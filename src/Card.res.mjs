// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Decco from "@rescript-labs/decco/src/Decco.res.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Js_array from "rescript/lib/es6/js_array.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function suit_encode(value) {
  switch (value) {
    case "Spades" :
        return ["Spades"];
    case "Hearts" :
        return ["Hearts"];
    case "Diamonds" :
        return ["Diamonds"];
    case "Clubs" :
        return ["Clubs"];
    
  }
}

function suit_decode(value) {
  var jsonArr = Js_json.classify(value);
  if (typeof jsonArr !== "object") {
    return Decco.error(undefined, "Not a variant", value);
  }
  if (jsonArr.TAG !== "JSONArray") {
    return Decco.error(undefined, "Not a variant", value);
  }
  var jsonArr$1 = jsonArr._0;
  if (jsonArr$1.length === 0) {
    return Decco.error(undefined, "Expected variant, found empty array", value);
  }
  var tagged = Js_array.map(Js_json.classify, jsonArr$1);
  var match = Belt_Array.getExn(tagged, 0);
  if (typeof match === "object" && match.TAG === "JSONString") {
    switch (match._0) {
      case "Clubs" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "Clubs"
                  };
          }
      case "Diamonds" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "Diamonds"
                  };
          }
      case "Hearts" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "Hearts"
                  };
          }
      case "Spades" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "Spades"
                  };
          }
      default:
        
    }
  }
  return Decco.error(undefined, "Invalid variant constructor", Belt_Array.getExn(jsonArr$1, 0));
}

function rank_encode(value) {
  switch (value) {
    case "RA" :
        return ["RA"];
    case "R2" :
        return ["R2"];
    case "R3" :
        return ["R3"];
    case "R4" :
        return ["R4"];
    case "R5" :
        return ["R5"];
    case "R6" :
        return ["R6"];
    case "R7" :
        return ["R7"];
    case "R8" :
        return ["R8"];
    case "R9" :
        return ["R9"];
    case "R10" :
        return ["R10"];
    case "RJ" :
        return ["RJ"];
    case "RQ" :
        return ["RQ"];
    case "RK" :
        return ["RK"];
    
  }
}

function rank_decode(value) {
  var jsonArr = Js_json.classify(value);
  if (typeof jsonArr !== "object") {
    return Decco.error(undefined, "Not a variant", value);
  }
  if (jsonArr.TAG !== "JSONArray") {
    return Decco.error(undefined, "Not a variant", value);
  }
  var jsonArr$1 = jsonArr._0;
  if (jsonArr$1.length === 0) {
    return Decco.error(undefined, "Expected variant, found empty array", value);
  }
  var tagged = Js_array.map(Js_json.classify, jsonArr$1);
  var match = Belt_Array.getExn(tagged, 0);
  if (typeof match === "object" && match.TAG === "JSONString") {
    switch (match._0) {
      case "R10" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R10"
                  };
          }
      case "R2" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R2"
                  };
          }
      case "R3" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R3"
                  };
          }
      case "R4" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R4"
                  };
          }
      case "R5" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R5"
                  };
          }
      case "R6" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R6"
                  };
          }
      case "R7" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R7"
                  };
          }
      case "R8" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R8"
                  };
          }
      case "R9" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R9"
                  };
          }
      case "RA" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "RA"
                  };
          }
      case "RJ" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "RJ"
                  };
          }
      case "RK" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "RK"
                  };
          }
      case "RQ" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "RQ"
                  };
          }
      default:
        
    }
  }
  return Decco.error(undefined, "Invalid variant constructor", Belt_Array.getExn(jsonArr$1, 0));
}

function card_encode(value) {
  return Js_dict.fromArray([
              [
                "suit",
                suit_encode(value.suit)
              ],
              [
                "rank",
                rank_encode(value.rank)
              ]
            ]);
}

function card_decode(value) {
  var dict = Js_json.classify(value);
  if (typeof dict !== "object") {
    return Decco.error(undefined, "Not an object", value);
  }
  if (dict.TAG !== "JSONObject") {
    return Decco.error(undefined, "Not an object", value);
  }
  var dict$1 = dict._0;
  var suit = suit_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "suit"), null));
  if (suit.TAG === "Ok") {
    var rank = rank_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rank"), null));
    if (rank.TAG === "Ok") {
      return {
              TAG: "Ok",
              _0: Decco.unsafeAddFieldToObject("suit", suit._0, Decco.unsafeAddFieldToObject("rank", rank._0, {}))
            };
    }
    var e = rank._0;
    return {
            TAG: "Error",
            _0: {
              path: ".rank" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = suit._0;
  return {
          TAG: "Error",
          _0: {
            path: ".suit" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

var allRanks = [
  "RA",
  "R2",
  "R3",
  "R4",
  "R5",
  "R6",
  "R7",
  "R8",
  "R9",
  "R10",
  "RJ",
  "RQ",
  "RK"
];

var allSuits = [
  "Spades",
  "Hearts",
  "Diamonds",
  "Clubs"
];

function equals(a, b) {
  if (a.suit === b.suit) {
    return a.rank === b.rank;
  } else {
    return false;
  }
}

function isRed(card) {
  if (card.suit === "Hearts") {
    return true;
  } else {
    return card.suit === "Diamonds";
  }
}

function isBlack(card) {
  if (card.suit === "Spades") {
    return true;
  } else {
    return card.suit === "Clubs";
  }
}

function rankIsBelow(a, b) {
  var match = a.rank;
  var match$1 = b.rank;
  switch (match) {
    case "RA" :
        if (match$1 === "R2") {
          return true;
        } else {
          return false;
        }
    case "R2" :
        if (match$1 === "R3") {
          return true;
        } else {
          return false;
        }
    case "R3" :
        if (match$1 === "R4") {
          return true;
        } else {
          return false;
        }
    case "R4" :
        if (match$1 === "R5") {
          return true;
        } else {
          return false;
        }
    case "R5" :
        if (match$1 === "R6") {
          return true;
        } else {
          return false;
        }
    case "R6" :
        if (match$1 === "R7") {
          return true;
        } else {
          return false;
        }
    case "R7" :
        if (match$1 === "R8") {
          return true;
        } else {
          return false;
        }
    case "R8" :
        if (match$1 === "R9") {
          return true;
        } else {
          return false;
        }
    case "R9" :
        if (match$1 === "R10") {
          return true;
        } else {
          return false;
        }
    case "R10" :
        if (match$1 === "RJ") {
          return true;
        } else {
          return false;
        }
    case "RJ" :
        if (match$1 === "RQ") {
          return true;
        } else {
          return false;
        }
    case "RQ" :
        if (match$1 === "RK") {
          return true;
        } else {
          return false;
        }
    case "RK" :
        return false;
    
  }
}

function rankIsAbove(a, b) {
  var match = a.rank;
  var match$1 = b.rank;
  switch (match) {
    case "RA" :
        return false;
    case "R2" :
        if (match$1 === "RA") {
          return true;
        } else {
          return false;
        }
    case "R3" :
        if (match$1 === "R2") {
          return true;
        } else {
          return false;
        }
    case "R4" :
        if (match$1 === "R3") {
          return true;
        } else {
          return false;
        }
    case "R5" :
        if (match$1 === "R4") {
          return true;
        } else {
          return false;
        }
    case "R6" :
        if (match$1 === "R5") {
          return true;
        } else {
          return false;
        }
    case "R7" :
        if (match$1 === "R6") {
          return true;
        } else {
          return false;
        }
    case "R8" :
        if (match$1 === "R7") {
          return true;
        } else {
          return false;
        }
    case "R9" :
        if (match$1 === "R8") {
          return true;
        } else {
          return false;
        }
    case "R10" :
        if (match$1 === "R9") {
          return true;
        } else {
          return false;
        }
    case "RJ" :
        if (match$1 === "R10") {
          return true;
        } else {
          return false;
        }
    case "RQ" :
        if (match$1 === "RJ") {
          return true;
        } else {
          return false;
        }
    case "RK" :
        if (match$1 === "RQ") {
          return true;
        } else {
          return false;
        }
    
  }
}

function rankString(card) {
  var match = card.rank;
  switch (match) {
    case "RA" :
        return "A";
    case "R2" :
        return "2";
    case "R3" :
        return "3";
    case "R4" :
        return "4";
    case "R5" :
        return "5";
    case "R6" :
        return "6";
    case "R7" :
        return "7";
    case "R8" :
        return "8";
    case "R9" :
        return "9";
    case "R10" :
        return "10";
    case "RJ" :
        return "J";
    case "RQ" :
        return "Q";
    case "RK" :
        return "K";
    
  }
}

function stringToRank(s) {
  switch (s) {
    case "10" :
        return "R10";
    case "2" :
        return "R2";
    case "3" :
        return "R3";
    case "4" :
        return "R4";
    case "5" :
        return "R5";
    case "6" :
        return "R6";
    case "7" :
        return "R7";
    case "8" :
        return "R8";
    case "9" :
        return "R9";
    case "J" :
        return "RJ";
    case "K" :
        return "RK";
    case "Q" :
        return "RQ";
    default:
      return "RA";
  }
}

function stringToSuit(s) {
  switch (s) {
    case "♣" :
        return "Clubs";
    case "♥" :
        return "Hearts";
    case "♦" :
        return "Diamonds";
    default:
      return "Spades";
  }
}

function suitString(card) {
  var match = card.suit;
  switch (match) {
    case "Spades" :
        return "♠";
    case "Hearts" :
        return "♥";
    case "Diamonds" :
        return "♦";
    case "Clubs" :
        return "♣";
    
  }
}

function color(card) {
  var match = card.suit;
  switch (match) {
    case "Hearts" :
    case "Diamonds" :
        return "Red";
    case "Spades" :
    case "Clubs" :
        return "Black";
    
  }
}

function colorHex(card) {
  var match = card.suit;
  switch (match) {
    case "Hearts" :
    case "Diamonds" :
        return "hsl(0 100% 44.31%)";
    case "Spades" :
    case "Clubs" :
        return "hsl(0 0% 0%)";
    
  }
}

function isOppositeColor(a, b) {
  return isRed(a) !== isRed(b);
}

function rotation(card) {
  var suitJitter = allSuits.findIndex(function (s) {
        return s === card.suit;
      }) - 2 | 0;
  var rankJitter = allRanks.findIndex(function (r) {
        return r === card.rank;
      }) % 4 - 2 | 0;
  return "rotate(" + (suitJitter + rankJitter | 0).toString() + "deg)";
}

function toString(card) {
  return JSON.stringify(card_encode(card));
}

function Card$Display(props) {
  var card = props.card;
  var match = card.rank;
  var tmp;
  tmp = match === "R10" ? "tracking-[-0.1rem] w-4" : "w-3.5";
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx("div", {
                    children: JsxRuntime.jsxs("span", {
                          children: [
                            JsxRuntime.jsxs("span", {
                                  children: [
                                    JsxRuntime.jsx("span", {
                                          children: rankString(card),
                                          className: [
                                              "font-medium ",
                                              tmp
                                            ].join(" ")
                                        }),
                                    JsxRuntime.jsx("span", {
                                          children: suitString(card),
                                          className: "w-3.5 flex flex-row justify-center"
                                        })
                                  ],
                                  className: "flex flex-row"
                                }),
                            JsxRuntime.jsx("span", {
                                  children: suitString(card),
                                  className: "w-3.5 flex flex-row mt-0.5 -ml-0.5"
                                })
                          ],
                          className: "flex flex-col"
                        }),
                    className: [" border border-gray-300 rounded w-14 h-20 bg-white shadow-sm px-1 leading-none py-0.5 cursor-default"].join(" "),
                    style: {
                      color: colorHex(card),
                      transform: rotation(card)
                    }
                  }),
              ref: Caml_option.some(props.cardRef),
              className: "absolute w-14 h-20 select-none",
              id: props.id,
              onMouseDown: props.onMouseDown
            });
}

var Display = {
  make: Card$Display
};

function getShuffledDeck() {
  return Core__Array.toShuffled(Core__Array.reduce(allRanks, [], (function (a, rank) {
                    return Core__Array.reduce(allSuits, a, (function (a2, suit) {
                                  return a2.concat([{
                                                suit: suit,
                                                rank: rank
                                              }]);
                                }));
                  })));
}

export {
  suit_encode ,
  suit_decode ,
  rank_encode ,
  rank_decode ,
  card_encode ,
  card_decode ,
  allRanks ,
  allSuits ,
  equals ,
  isRed ,
  isBlack ,
  rankIsBelow ,
  rankIsAbove ,
  rankString ,
  stringToRank ,
  stringToSuit ,
  suitString ,
  color ,
  colorHex ,
  isOppositeColor ,
  rotation ,
  toString ,
  Display ,
  getShuffledDeck ,
}
/* react/jsx-runtime Not a pure module */
