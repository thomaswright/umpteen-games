// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Decco from "@rescript-labs/decco/src/Decco.res.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Js_array from "rescript/lib/es6/js_array.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function suit_encode(value) {
  switch (value) {
    case "Spades" :
        return ["Spades"];
    case "Hearts" :
        return ["Hearts"];
    case "Diamonds" :
        return ["Diamonds"];
    case "Clubs" :
        return ["Clubs"];
    
  }
}

function suit_decode(value) {
  var jsonArr = Js_json.classify(value);
  if (typeof jsonArr !== "object") {
    return Decco.error(undefined, "Not a variant", value);
  }
  if (jsonArr.TAG !== "JSONArray") {
    return Decco.error(undefined, "Not a variant", value);
  }
  var jsonArr$1 = jsonArr._0;
  if (jsonArr$1.length === 0) {
    return Decco.error(undefined, "Expected variant, found empty array", value);
  }
  var tagged = Js_array.map(Js_json.classify, jsonArr$1);
  var match = Belt_Array.getExn(tagged, 0);
  if (typeof match === "object" && match.TAG === "JSONString") {
    switch (match._0) {
      case "Clubs" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "Clubs"
                  };
          }
      case "Diamonds" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "Diamonds"
                  };
          }
      case "Hearts" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "Hearts"
                  };
          }
      case "Spades" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "Spades"
                  };
          }
      default:
        
    }
  }
  return Decco.error(undefined, "Invalid variant constructor", Belt_Array.getExn(jsonArr$1, 0));
}

function rank_encode(value) {
  switch (value) {
    case "RA" :
        return ["RA"];
    case "R2" :
        return ["R2"];
    case "R3" :
        return ["R3"];
    case "R4" :
        return ["R4"];
    case "R5" :
        return ["R5"];
    case "R6" :
        return ["R6"];
    case "R7" :
        return ["R7"];
    case "R8" :
        return ["R8"];
    case "R9" :
        return ["R9"];
    case "R10" :
        return ["R10"];
    case "RJ" :
        return ["RJ"];
    case "RQ" :
        return ["RQ"];
    case "RK" :
        return ["RK"];
    
  }
}

function rank_decode(value) {
  var jsonArr = Js_json.classify(value);
  if (typeof jsonArr !== "object") {
    return Decco.error(undefined, "Not a variant", value);
  }
  if (jsonArr.TAG !== "JSONArray") {
    return Decco.error(undefined, "Not a variant", value);
  }
  var jsonArr$1 = jsonArr._0;
  if (jsonArr$1.length === 0) {
    return Decco.error(undefined, "Expected variant, found empty array", value);
  }
  var tagged = Js_array.map(Js_json.classify, jsonArr$1);
  var match = Belt_Array.getExn(tagged, 0);
  if (typeof match === "object" && match.TAG === "JSONString") {
    switch (match._0) {
      case "R10" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R10"
                  };
          }
      case "R2" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R2"
                  };
          }
      case "R3" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R3"
                  };
          }
      case "R4" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R4"
                  };
          }
      case "R5" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R5"
                  };
          }
      case "R6" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R6"
                  };
          }
      case "R7" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R7"
                  };
          }
      case "R8" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R8"
                  };
          }
      case "R9" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R9"
                  };
          }
      case "RA" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "RA"
                  };
          }
      case "RJ" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "RJ"
                  };
          }
      case "RK" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "RK"
                  };
          }
      case "RQ" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "RQ"
                  };
          }
      default:
        
    }
  }
  return Decco.error(undefined, "Invalid variant constructor", Belt_Array.getExn(jsonArr$1, 0));
}

function card_encode(value) {
  return Js_dict.fromArray([
              [
                "suit",
                suit_encode(value.suit)
              ],
              [
                "rank",
                rank_encode(value.rank)
              ],
              [
                "deck",
                Decco.intToJson(value.deck)
              ]
            ]);
}

function card_decode(value) {
  var dict = Js_json.classify(value);
  if (typeof dict !== "object") {
    return Decco.error(undefined, "Not an object", value);
  }
  if (dict.TAG !== "JSONObject") {
    return Decco.error(undefined, "Not an object", value);
  }
  var dict$1 = dict._0;
  var suit = suit_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "suit"), null));
  if (suit.TAG === "Ok") {
    var rank = rank_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rank"), null));
    if (rank.TAG === "Ok") {
      var deck = Decco.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "deck"), null));
      if (deck.TAG === "Ok") {
        return {
                TAG: "Ok",
                _0: Decco.unsafeAddFieldToObject("suit", suit._0, Decco.unsafeAddFieldToObject("rank", rank._0, Decco.unsafeAddFieldToObject("deck", deck._0, {})))
              };
      }
      var e = deck._0;
      return {
              TAG: "Error",
              _0: {
                path: ".deck" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = rank._0;
    return {
            TAG: "Error",
            _0: {
              path: ".rank" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = suit._0;
  return {
          TAG: "Error",
          _0: {
            path: ".suit" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

function sides_encode(value) {
  return Js_dict.fromArray([
              [
                "card",
                card_encode(value.card)
              ],
              [
                "hidden",
                Decco.boolToJson(value.hidden)
              ]
            ]);
}

function sides_decode(value) {
  var dict = Js_json.classify(value);
  if (typeof dict !== "object") {
    return Decco.error(undefined, "Not an object", value);
  }
  if (dict.TAG !== "JSONObject") {
    return Decco.error(undefined, "Not an object", value);
  }
  var dict$1 = dict._0;
  var card = card_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "card"), null));
  if (card.TAG === "Ok") {
    var hidden = Decco.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "hidden"), null));
    if (hidden.TAG === "Ok") {
      return {
              TAG: "Ok",
              _0: Decco.unsafeAddFieldToObject("card", card._0, Decco.unsafeAddFieldToObject("hidden", hidden._0, {}))
            };
    }
    var e = hidden._0;
    return {
            TAG: "Error",
            _0: {
              path: ".hidden" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = card._0;
  return {
          TAG: "Error",
          _0: {
            path: ".card" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

var allRanks = [
  "RA",
  "R2",
  "R3",
  "R4",
  "R5",
  "R6",
  "R7",
  "R8",
  "R9",
  "R10",
  "RJ",
  "RQ",
  "RK"
];

function getNumberedRankCyclic(i) {
  return allRanks[i % 13];
}

var allSuits = [
  "Spades",
  "Hearts",
  "Diamonds",
  "Clubs"
];

function equals(a, b) {
  if (a.suit === b.suit) {
    return a.rank === b.rank;
  } else {
    return false;
  }
}

function isRed(v) {
  if (v.card.suit === "Hearts") {
    return true;
  } else {
    return v.card.suit === "Diamonds";
  }
}

function isBlack(v) {
  if (v.card.suit === "Spades") {
    return true;
  } else {
    return v.card.suit === "Clubs";
  }
}

function rankIsAbove(a, b) {
  return allRanks.findIndex(function (x) {
              return x === a.card.rank;
            }) === (allRanks.findIndex(function (x) {
                return x === b.card.rank;
              }) + 1 | 0);
}

function rankIsAboveCyclic(a, b) {
  if (a.card.rank === "RA") {
    return b.card.rank === "RK";
  } else {
    return allRanks.findIndex(function (x) {
                return x === a.card.rank;
              }) === (allRanks.findIndex(function (x) {
                  return x === b.card.rank;
                }) + 1 | 0);
  }
}

function rankIsAdjacent(a, b) {
  if (rankIsAbove(b, a)) {
    return true;
  } else {
    return rankIsAbove(a, b);
  }
}

function rankString(v) {
  return v.card.rank;
}

function stringToRank(s) {
  return s;
}

function suitString(v) {
  return v.card.suit;
}

function stringToSuit(s) {
  return s;
}

function displayRank(v) {
  var match = v.card.rank;
  switch (match) {
    case "RA" :
        return "A";
    case "R2" :
        return "2";
    case "R3" :
        return "3";
    case "R4" :
        return "4";
    case "R5" :
        return "5";
    case "R6" :
        return "6";
    case "R7" :
        return "7";
    case "R8" :
        return "8";
    case "R9" :
        return "9";
    case "R10" :
        return "10";
    case "RJ" :
        return "J";
    case "RQ" :
        return "Q";
    case "RK" :
        return "K";
    
  }
}

function displaySuit(v) {
  var match = v.card.suit;
  switch (match) {
    case "Spades" :
        return "♠";
    case "Hearts" :
        return "♥";
    case "Diamonds" :
        return "♦";
    case "Clubs" :
        return "♣";
    
  }
}

function color(v) {
  var match = v.card.suit;
  switch (match) {
    case "Hearts" :
    case "Diamonds" :
        return "Red";
    case "Spades" :
    case "Clubs" :
        return "Black";
    
  }
}

function colorHex(v) {
  var match = v.card.suit;
  switch (match) {
    case "Hearts" :
    case "Diamonds" :
        return "hsl(0 100% 44.31%)";
    case "Spades" :
    case "Clubs" :
        return "hsl(0 0% 0%)";
    
  }
}

function multiColorHex(v) {
  var match = v.card.suit;
  switch (match) {
    case "Spades" :
        return "hsl(224 100% 40%)";
    case "Hearts" :
        return "hsl(0 100% 43%)";
    case "Diamonds" :
        return "hsl(39 100% 50%)";
    case "Clubs" :
        return "hsl(130 100% 25%)";
    
  }
}

function multiColorPastel(v) {
  var match = v.card.suit;
  switch (match) {
    case "Spades" :
        return "hsl(224 100% 97%)";
    case "Hearts" :
        return "hsl(0 100% 97%)";
    case "Diamonds" :
        return "hsl(48 100% 97%)";
    case "Clubs" :
        return "hsl(130 100% 97%)";
    
  }
}

function isOppositeColor(a, b) {
  return isRed(a) !== isRed(b);
}

function rotation(card) {
  var suitJitter = allSuits.findIndex(function (s) {
        return s === card.suit;
      }) - 2 | 0;
  var rankJitter = allRanks.findIndex(function (r) {
        return r === card.rank;
      }) % 4 - 2 | 0;
  return "rotate(" + (suitJitter + rankJitter | 0).toString() + "deg)";
}

function toString(card) {
  return JSON.stringify(card_encode(card));
}

function Card$Display(props) {
  var __multiColor = props.multiColor;
  var card = props.card;
  var multiColor = __multiColor !== undefined ? __multiColor : false;
  var match = card.card.rank;
  var tmp;
  tmp = match === "R10" ? "-ml-0.5 w-6" : "w-4";
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsx("div", {
                            className: [
                                "absolute bg-[#9d0404] border-4 border-[#ffffff] w-full h-full card-back",
                                card.hidden ? "" : "hidden"
                              ].join(" ")
                          }),
                      JsxRuntime.jsxs("span", {
                            children: [
                              JsxRuntime.jsxs("span", {
                                    children: [
                                      JsxRuntime.jsx("span", {
                                            children: displayRank(card),
                                            className: [
                                                "font-medium ",
                                                tmp
                                              ].join(" ")
                                          }),
                                      JsxRuntime.jsx("span", {
                                            children: displaySuit(card),
                                            className: "w-3.5 flex flex-row justify-center"
                                          })
                                    ],
                                    className: "flex flex-row"
                                  }),
                              JsxRuntime.jsx("span", {
                                    children: displaySuit(card),
                                    className: "w-3.5 flex flex-row mt-0.5 -ml-0.5"
                                  })
                            ],
                            className: "flex flex-col py-0.5 px-1 bg-white w-full  h-full border border-[#939cae] rounded text-xl leading-none",
                            style: {
                              backgroundColor: multiColor ? multiColorPastel(card) : "white"
                            }
                          })
                    ],
                    className: ["relative rounded shadow-sm leading-none  cursor-default overflow-hidden card-dims"].join(" "),
                    style: {
                      color: multiColor ? multiColorHex(card) : colorHex(card),
                      transform: rotation(card.card)
                    }
                  }),
              ref: Caml_option.some(props.cardRef),
              className: "absolute card-dims select-none",
              id: props.id,
              onMouseDown: props.onMouseDown
            });
}

var Display = {
  make: Card$Display
};

function hide(element) {
  Core__Option.mapOr(Caml_option.nullable_to_opt(element.querySelector(".card-back")), undefined, (function (cardBackElement) {
          cardBackElement.classList.remove("hidden");
        }));
}

function show(element) {
  Core__Option.mapOr(Caml_option.nullable_to_opt(element.querySelector(".card-back")), undefined, (function (cardBackElement) {
          cardBackElement.classList.add("hidden");
        }));
}

function showOrHide(card, element) {
  if (card.hidden) {
    return hide(element);
  } else {
    return show(element);
  }
}

function showAfter(a, n) {
  return a.map(function (v, i) {
              if (i >= n) {
                return {
                        card: v.card,
                        hidden: false
                      };
              } else {
                return v;
              }
            });
}

function hideAfter(a, n) {
  return a.map(function (v, i) {
              if (i >= n) {
                return {
                        card: v.card,
                        hidden: true
                      };
              } else {
                return v;
              }
            });
}

function getOneSuitDeck(deck, suit, hidden) {
  return Core__Array.reduce(allRanks, [], (function (a, rank) {
                return a.concat([{
                              card: {
                                suit: suit,
                                rank: rank,
                                deck: deck
                              },
                              hidden: hidden
                            }]);
              }));
}

function getDeck(deck, hidden) {
  return Core__Array.reduce(allRanks, [], (function (a, rank) {
                return Core__Array.reduce(allSuits, a, (function (a2, suit) {
                              return a2.concat([{
                                            card: {
                                              suit: suit,
                                              rank: rank,
                                              deck: deck
                                            },
                                            hidden: hidden
                                          }]);
                            }));
              }));
}

export {
  suit_encode ,
  suit_decode ,
  rank_encode ,
  rank_decode ,
  card_encode ,
  card_decode ,
  sides_encode ,
  sides_decode ,
  allRanks ,
  getNumberedRankCyclic ,
  allSuits ,
  equals ,
  isRed ,
  isBlack ,
  rankIsAbove ,
  rankIsAboveCyclic ,
  rankIsAdjacent ,
  rankString ,
  stringToRank ,
  suitString ,
  stringToSuit ,
  displayRank ,
  displaySuit ,
  color ,
  colorHex ,
  multiColorHex ,
  multiColorPastel ,
  isOppositeColor ,
  rotation ,
  toString ,
  Display ,
  hide ,
  show ,
  showOrHide ,
  showAfter ,
  hideAfter ,
  getOneSuitDeck ,
  getDeck ,
}
/* react/jsx-runtime Not a pure module */
