// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "./Card.res.mjs";
import * as Decco from "@rescript-labs/decco/src/Decco.res.mjs";
import * as React from "react";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Js_array from "rescript/lib/es6/js_array.js";
import * as Core__Int from "@rescript/core/src/Core__Int.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function getShuffledDeck() {
  return Core__Array.toShuffled(Core__Array.reduce(Card.allRanks, [], (function (a, rank) {
                    return Core__Array.reduce(Card.allSuits, a, (function (a2, suit) {
                                  return a2.concat([{
                                                suit: suit,
                                                rank: rank
                                              }]);
                                }));
                  })));
}

var shuffledDeck = getShuffledDeck();

var cardsData = [
  shuffledDeck.slice(0, 1),
  shuffledDeck.slice(1, 3),
  shuffledDeck.slice(3, 6),
  shuffledDeck.slice(6, 10),
  shuffledDeck.slice(10, 15),
  shuffledDeck.slice(15, 21),
  shuffledDeck.slice(21, 28)
];

var stockData = shuffledDeck.slice(28);

function space_encode(value) {
  if (typeof value !== "object") {
    if (value === "Stock") {
      return ["Stock"];
    } else {
      return ["Waste"];
    }
  }
  switch (value.TAG) {
    case "Pile" :
        return [
                "Pile",
                Decco.intToJson(value._0)
              ];
    case "Foundation" :
        return [
                "Foundation",
                Decco.intToJson(value._0)
              ];
    case "Card" :
        return [
                "Card",
                Card.card_encode(value._0)
              ];
    
  }
}

function space_decode(value) {
  var jsonArr = Js_json.classify(value);
  if (typeof jsonArr !== "object") {
    return Decco.error(undefined, "Not a variant", value);
  }
  if (jsonArr.TAG !== "JSONArray") {
    return Decco.error(undefined, "Not a variant", value);
  }
  var jsonArr$1 = jsonArr._0;
  if (jsonArr$1.length === 0) {
    return Decco.error(undefined, "Expected variant, found empty array", value);
  }
  var tagged = Js_array.map(Js_json.classify, jsonArr$1);
  var match = Belt_Array.getExn(tagged, 0);
  if (typeof match === "object" && match.TAG === "JSONString") {
    switch (match._0) {
      case "Card" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0 = Card.card_decode(Belt_Array.getExn(jsonArr$1, 1));
          if (v0.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "Card",
                      _0: v0._0
                    }
                  };
          }
          var e = v0._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
      case "Foundation" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0$1 = Decco.intFromJson(Belt_Array.getExn(jsonArr$1, 1));
          if (v0$1.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "Foundation",
                      _0: v0$1._0
                    }
                  };
          }
          var e$1 = v0$1._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e$1.path,
                    message: e$1.message,
                    value: e$1.value
                  }
                };
      case "Pile" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0$2 = Decco.intFromJson(Belt_Array.getExn(jsonArr$1, 1));
          if (v0$2.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "Pile",
                      _0: v0$2._0
                    }
                  };
          }
          var e$2 = v0$2._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e$2.path,
                    message: e$2.message,
                    value: e$2.value
                  }
                };
      case "Stock" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "Stock"
                  };
          }
      case "Waste" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "Waste"
                  };
          }
      default:
        
    }
  }
  return Decco.error(undefined, "Invalid variant constructor", Belt_Array.getExn(jsonArr$1, 0));
}

function spaceToString(space) {
  return JSON.stringify(space_encode(space));
}

function zIndexFromElement(element) {
  return Core__Int.fromString(element.style["z-index"], undefined);
}

function spaceFromElement(element) {
  return Core__Option.flatMap(element.space, (function (s) {
                var d = space_decode(JSON.parse(s));
                if (d.TAG === "Ok") {
                  return d._0;
                }
                
              }));
}

function parentFromElement(element) {
  return Core__Option.flatMap(element.parentSpace, (function (s) {
                var d = space_decode(JSON.parse(s));
                if (d.TAG === "Ok") {
                  return d._0;
                }
                
              }));
}

function elementPosition(element) {
  var a = element.getBoundingClientRect();
  return {
          top: a.top,
          right: a.right,
          bottom: a.bottom,
          left: a.left
        };
}

function eventPosition($$event) {
  return elementPosition($$event.currentTarget);
}

function OldKlondike$CardDisplay(props) {
  var card = props.card;
  var match = card.rank;
  var tmp;
  tmp = match === "R10" ? "tracking-[-0.1rem] w-4" : "w-3.5";
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx("div", {
                    children: JsxRuntime.jsxs("span", {
                          children: [
                            JsxRuntime.jsxs("span", {
                                  children: [
                                    JsxRuntime.jsx("span", {
                                          children: Card.rankString(card),
                                          className: [
                                              "font-medium ",
                                              tmp
                                            ].join(" ")
                                        }),
                                    JsxRuntime.jsx("span", {
                                          children: Card.suitString(card),
                                          className: "w-3.5 flex flex-row justify-center"
                                        })
                                  ],
                                  className: "flex flex-row"
                                }),
                            JsxRuntime.jsx("span", {
                                  children: Card.suitString(card),
                                  className: "w-3.5 flex flex-row mt-0.5 -ml-0.5"
                                })
                          ],
                          className: "flex flex-col"
                        }),
                    className: [" border border-gray-300 rounded w-14 h-20 bg-white shadow-sm px-1 leading-none py-0.5 cursor-default"].join(" "),
                    style: {
                      color: Card.colorHex(card)
                    }
                  }),
              ref: Caml_option.some(props.cardRef),
              className: "absolute w-14 h-20 select-none",
              style: {
                left: props.left,
                top: props.top,
                zIndex: props.zIndex
              },
              onMouseDown: props.onMouseDown
            });
}

var CardDisplay = {
  make: OldKlondike$CardDisplay
};

function OldKlondike(props) {
  var refs = React.useRef([]);
  var dragCard = React.useRef(undefined);
  var offset = React.useRef([
        0,
        0
      ]);
  var originalData = React.useRef(undefined);
  var setRef = function (space, parent) {
    return function (element) {
      if (element === null || element === undefined) {
        return ;
      }
      element.space = JSON.stringify(space_encode(space));
      Core__Option.mapOr(parent, undefined, (function (parent) {
              element.parentSpace = JSON.stringify(space_encode(parent));
            }));
      refs.current.push(element);
    };
  };
  var applyToChildren = function (element, f) {
    var elementSpace = spaceFromElement(element);
    refs.current.forEach(function (el) {
          var match = parentFromElement(el);
          if (elementSpace !== undefined && !(typeof elementSpace !== "object" || !(elementSpace.TAG === "Card" && match !== undefined && !(typeof match !== "object" || !(match.TAG === "Card" && Card.equals(match._0, elementSpace._0)))))) {
            return f(el);
          }
          
        });
  };
  var move = function (element, left, top, leftOffset, topOffset, zIndex) {
    element.style.left = left.toString() + "px";
    element.style.top = top.toString() + "px";
    Core__Option.mapOr(zIndex, undefined, (function (zIndex) {
            element.style["z-index"] = zIndex.toString();
          }));
    applyToChildren(element, (function (childEl) {
            move(childEl, left + leftOffset | 0, top + topOffset | 0, leftOffset, topOffset, Core__Option.map(zIndex, (function (zIndex) {
                        return zIndex + 1 | 0;
                      })));
          }));
  };
  var moveWithTime = function (element, targetLeft, targetTop, offsetLeft, offsetTop, zIndex, duration) {
    var start = elementPosition(element);
    var startTime = performance.now();
    var step = function (currentTime) {
      var elapsedTime = currentTime - startTime;
      var progress = Math.min(elapsedTime / duration, 1);
      var leftMove = start.left + (targetLeft - start.left) * progress;
      var topMove = start.top + (targetTop - start.top) * progress;
      move(element, leftMove | 0, topMove | 0, offsetLeft, offsetTop, zIndex);
      if (progress < 1) {
        requestAnimationFrame(step);
        return ;
      }
      
    };
    requestAnimationFrame(step);
  };
  var liftUp = function (element, zIndex) {
    element.style["z-index"] = zIndex.toString();
    applyToChildren(element, (function (childEl) {
            liftUp(childEl, zIndex + 1 | 0);
          }));
  };
  var getOverlap = function (aEl, bEl) {
    var aPos = elementPosition(aEl);
    var bPos = elementPosition(bEl);
    var overlapX = Math.max(0, Math.min(aPos.right, bPos.right) - Math.max(aPos.left, bPos.left));
    var overlapY = Math.max(0, Math.min(aPos.bottom, bPos.bottom) - Math.max(aPos.top, bPos.top));
    return overlapX * overlapY;
  };
  var getElement = function (space) {
    return refs.current.find(function (el) {
                return Caml_obj.equal(spaceFromElement(el), space);
              });
  };
  var baseSpace = function (_el) {
    while(true) {
      var el = _el;
      var x = parentFromElement(el);
      if (x === undefined) {
        return ;
      }
      if (typeof x !== "object") {
        return x;
      }
      if (x.TAG !== "Card") {
        return x;
      }
      _el = getElement({
            TAG: "Card",
            _0: x._0
          });
      continue ;
    };
  };
  var buildDragPile = function (el, build) {
    return Core__Option.mapOr(refs.current.find(function (v) {
                      return Caml_obj.equal(parentFromElement(v), spaceFromElement(el));
                    }), [el], (function (parentEl) {
                    return buildDragPile(parentEl, [el]);
                  })).concat(build);
  };
  var canDrag = function (dragPile) {
    return Core__Array.reduce(dragPile, [
                  true,
                  undefined
                ], (function (param, onBottom) {
                    var isStillValid = param[0];
                    if (!isStillValid) {
                      return [
                              isStillValid,
                              undefined
                            ];
                    }
                    var onTopElement = param[1];
                    if (onTopElement === undefined) {
                      return [
                              true,
                              Caml_option.some(onBottom)
                            ];
                    }
                    var match = spaceFromElement(Caml_option.valFromOption(onTopElement));
                    var match$1 = spaceFromElement(onBottom);
                    if (match === undefined) {
                      return [
                              false,
                              undefined
                            ];
                    }
                    if (typeof match !== "object") {
                      return [
                              false,
                              undefined
                            ];
                    }
                    if (match.TAG !== "Card") {
                      return [
                              false,
                              undefined
                            ];
                    }
                    var onTopCard = match._0;
                    if (match$1 === undefined) {
                      return [
                              true,
                              Caml_option.some(onBottom)
                            ];
                    }
                    if (typeof match$1 !== "object") {
                      return [
                              true,
                              Caml_option.some(onBottom)
                            ];
                    }
                    if (match$1.TAG !== "Card") {
                      return [
                              true,
                              Caml_option.some(onBottom)
                            ];
                    }
                    var onBottomCard = match$1._0;
                    return [
                            Card.rankIsBelow(onTopCard, onBottomCard) && Card.color(onTopCard) !== Card.color(onBottomCard),
                            Caml_option.some(onBottom)
                          ];
                  }))[0];
  };
  var canDrop = function (dragCard, dropEl) {
    var match = spaceFromElement(dragCard);
    if (match === undefined) {
      return false;
    }
    if (typeof match !== "object") {
      return false;
    }
    if (match.TAG !== "Card") {
      return false;
    }
    var dragCard$1 = match._0;
    var match$1 = spaceFromElement(dropEl);
    if (match$1 === undefined) {
      return false;
    }
    if (typeof match$1 !== "object") {
      return false;
    }
    switch (match$1.TAG) {
      case "Pile" :
          return dragCard$1.rank === "RK";
      case "Foundation" :
          return dragCard$1.rank === "RA";
      case "Card" :
          var dropCard = match$1._0;
          console.log(baseSpace(Caml_option.some(dropEl)));
          var match$2 = baseSpace(Caml_option.some(dropEl));
          if (match$2 === undefined) {
            return false;
          }
          if (typeof match$2 !== "object") {
            return false;
          }
          switch (match$2.TAG) {
            case "Pile" :
                if (Card.rankIsAbove(dropCard, dragCard$1)) {
                  return Card.color(dragCard$1) !== Card.color(dropCard);
                } else {
                  return false;
                }
            case "Foundation" :
                if (Card.rankIsBelow(dropCard, dragCard$1)) {
                  return dragCard$1.suit === dropCard.suit;
                } else {
                  return false;
                }
            default:
              return false;
          }
      
    }
  };
  var onMouseDown = function ($$event) {
    var eventElement = $$event.currentTarget;
    var dragPile = buildDragPile(eventElement, []);
    var canDrag$1 = canDrag(dragPile);
    if (!canDrag$1) {
      return ;
    }
    dragCard.current = Caml_option.some(eventElement);
    var dragCardPos = elementPosition(eventElement);
    originalData.current = Core__Option.map(zIndexFromElement(eventElement), (function (v) {
            return [
                    dragCardPos,
                    v
                  ];
          }));
    liftUp(eventElement, 1000);
    var pos = elementPosition($$event.currentTarget);
    offset.current = [
      $$event.clientX - (pos.left | 0) | 0,
      $$event.clientY - (pos.top | 0) | 0
    ];
  };
  var onMouseMove = function ($$event) {
    Core__Option.mapOr(dragCard.current, undefined, (function (dragCard) {
            var match = offset.current;
            var leftMove = $$event.clientX - match[0] | 0;
            var topMove = $$event.clientY - match[1] | 0;
            move(dragCard, leftMove, topMove, 0, 20, undefined);
          }));
  };
  var onMouseUp = function (param) {
    Core__Option.mapOr(dragCard.current, undefined, (function (dragCard) {
            var dragPile = buildDragPile(dragCard, []);
            var dropOn = Core__Option.map(Core__Array.reduce(refs.current.filter(function (el) {
                          return Core__Option.isNone(dragPile.find(function (pileEl) {
                                          return Caml_obj.equal(spaceFromElement(pileEl), spaceFromElement(el));
                                        }));
                        }), undefined, (function (acc, el) {
                        var dropHasNoChildren = Core__Option.mapOr(spaceFromElement(el), false, (function (x) {
                                return !refs.current.some(function (el2) {
                                            return Core__Option.mapOr(parentFromElement(el2), false, (function (p) {
                                                          return Caml_obj.equal(p, x);
                                                        }));
                                          });
                              }));
                        var canDrop$1 = dropHasNoChildren && canDrop(dragCard, el);
                        if (!canDrop$1) {
                          return acc;
                        }
                        var overlap = getOverlap(el, dragCard);
                        var $$new = [
                          overlap,
                          el
                        ];
                        if (overlap > 0 && !(acc !== undefined && acc[0] > overlap)) {
                          return $$new;
                        } else {
                          return acc;
                        }
                      })), (function (param) {
                    return param[1];
                  }));
            var revert = function () {
              Core__Option.mapOr(originalData.current, undefined, (function (param) {
                      var originalPos = param[0];
                      moveWithTime(dragCard, originalPos.left, originalPos.top, 0, 20, param[1], 100);
                    }));
            };
            if (dropOn === undefined) {
              return revert();
            }
            var dropOn$1 = Caml_option.valFromOption(dropOn);
            var pos = elementPosition(dropOn$1);
            Core__Option.mapOr(spaceFromElement(dropOn$1), undefined, (function (dropOnSpace) {
                    dragCard.parentSpace = JSON.stringify(space_encode(dropOnSpace));
                  }));
            var match = spaceFromElement(dropOn$1);
            var match$1;
            if (match !== undefined) {
              if (typeof match !== "object") {
                match$1 = match === "Stock" ? [
                    0,
                    0
                  ] : [
                    0,
                    0
                  ];
              } else {
                switch (match.TAG) {
                  case "Pile" :
                      match$1 = [
                        0,
                        20
                      ];
                      break;
                  case "Foundation" :
                      match$1 = [
                        0,
                        0
                      ];
                      break;
                  case "Card" :
                      var match$2 = baseSpace(Caml_option.some(dropOn$1));
                      match$1 = match$2 !== undefined ? (
                          typeof match$2 !== "object" ? [
                              20,
                              20
                            ] : (
                              match$2.TAG === "Foundation" ? [
                                  0,
                                  0
                                ] : [
                                  20,
                                  20
                                ]
                            )
                        ) : [
                          20,
                          20
                        ];
                      break;
                  
                }
              }
            } else {
              match$1 = [
                0,
                0
              ];
            }
            moveWithTime(dragCard, pos.left, pos.top + match$1[0], 0, match$1[1], Core__Option.map(zIndexFromElement(dropOn$1), (function (v) {
                        return v + 1 | 0;
                      })), 100);
          }));
    dragCard.current = undefined;
    originalData.current = undefined;
  };
  React.useEffect((function () {
          window.addEventListener("mousemove", onMouseMove);
          window.addEventListener("mouseup", onMouseUp);
        }), []);
  var dealToWaste = function () {
    var el = getElement("Stock");
    var stock = el !== undefined ? buildDragPile(Caml_option.valFromOption(el), []) : [];
    var el$1 = getElement("Waste");
    var waste = el$1 !== undefined ? buildDragPile(Caml_option.valFromOption(el$1), []) : [];
    Core__Option.mapOr(stock[0], undefined, (function (topStockEl) {
            var match = spaceFromElement(topStockEl);
            if (match === undefined) {
              return ;
            }
            if (typeof match !== "object" && match === "Stock") {
              var wasteCards = waste.toReversed().slice(1);
              wasteCards.forEach(function (wasteCard, i) {
                    if (i === (wasteCards.length - 1 | 0)) {
                      wasteCard.parentSpace = JSON.stringify(space_encode("Stock"));
                      return moveWithTime(wasteCard, 0, 0, 0, 0, 1, 200);
                    } else {
                      return Core__Option.mapOr(Core__Option.flatMap(wasteCards[i + 1 | 0], spaceFromElement), undefined, (function (v) {
                                    wasteCard.parentSpace = JSON.stringify(space_encode(v));
                                  }));
                    }
                  });
              return ;
            }
            var topWasteElement = waste[0];
            Core__Option.mapOr(spaceFromElement(topWasteElement), undefined, (function (v) {
                    topStockEl.parentSpace = JSON.stringify(space_encode(v));
                  }));
            var pos = elementPosition(topWasteElement);
            moveWithTime(topStockEl, pos.left, pos.top, 0, 0, Core__Option.map(zIndexFromElement(topWasteElement), (function (v) {
                        return v + 1 | 0;
                      })), 200);
          }));
  };
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      ref: Caml_option.some(setRef("Stock", undefined)),
                      className: "absolute bg-pink-500 rounded w-14 h-20",
                      style: {
                        left: "0px",
                        top: "0px",
                        zIndex: "0"
                      }
                    }, JSON.stringify(space_encode("Stock"))),
                stockData.map(function (card, i) {
                      var parent = i === 0 ? "Stock" : ({
                            TAG: "Card",
                            _0: stockData[i - 1 | 0]
                          });
                      return JsxRuntime.jsx(OldKlondike$CardDisplay, {
                                  card: card,
                                  top: (0).toString() + "px",
                                  left: (0).toString() + "px",
                                  zIndex: (i + 1 | 0).toString(),
                                  onMouseDown: onMouseDown,
                                  cardRef: setRef({
                                        TAG: "Card",
                                        _0: card
                                      }, parent)
                                }, JSON.stringify(space_encode({
                                          TAG: "Card",
                                          _0: card
                                        })));
                    }),
                JsxRuntime.jsx("div", {
                      className: "absolute bg-blue-700 rounded w-14 h-20",
                      style: {
                        left: "0px",
                        top: "0px",
                        zIndex: "53"
                      },
                      onClick: (function (param) {
                          dealToWaste();
                        })
                    }, "Stock Cover"),
                JsxRuntime.jsx("div", {
                      ref: Caml_option.some(setRef("Waste", undefined)),
                      className: "absolute bg-cyan-500 rounded w-14 h-20",
                      style: {
                        left: "70px",
                        top: "0px",
                        zIndex: "0"
                      }
                    }, JSON.stringify(space_encode("Waste"))),
                [
                    [],
                    [],
                    [],
                    []
                  ].map(function (param, i) {
                      return JsxRuntime.jsx("div", {
                                  ref: Caml_option.some(setRef({
                                            TAG: "Foundation",
                                            _0: i
                                          }, undefined)),
                                  className: "absolute bg-purple-500 rounded w-14 h-20",
                                  style: {
                                    left: Math.imul(i, 70).toString() + "px",
                                    top: "100px",
                                    zIndex: "0"
                                  }
                                }, JSON.stringify(space_encode({
                                          TAG: "Foundation",
                                          _0: i
                                        })));
                    }),
                [
                    [],
                    [],
                    [],
                    []
                  ].map(function (param, i) {
                      return JsxRuntime.jsx("div", {
                                  ref: Caml_option.some(setRef({
                                            TAG: "Pile",
                                            _0: i
                                          }, undefined)),
                                  className: "absolute bg-red-500 rounded w-14 h-20",
                                  style: {
                                    left: Math.imul(i, 70).toString() + "px",
                                    top: "200px",
                                    zIndex: "0"
                                  }
                                }, JSON.stringify(space_encode({
                                          TAG: "Pile",
                                          _0: i
                                        })));
                    }),
                cardsData.map(function (cardPile, i) {
                      return cardPile.map(function (card, j) {
                                  var parent = j === 0 ? ({
                                        TAG: "Pile",
                                        _0: i
                                      }) : ({
                                        TAG: "Card",
                                        _0: cardsData[i][j - 1 | 0]
                                      });
                                  return JsxRuntime.jsx(OldKlondike$CardDisplay, {
                                              card: card,
                                              top: (200 + Math.imul(j, 20) | 0).toString() + "px",
                                              left: Math.imul(i, 70).toString() + "px",
                                              zIndex: (j + 1 | 0).toString(),
                                              onMouseDown: onMouseDown,
                                              cardRef: setRef({
                                                    TAG: "Card",
                                                    _0: card
                                                  }, parent)
                                            }, JSON.stringify(space_encode({
                                                      TAG: "Card",
                                                      _0: card
                                                    })));
                                });
                    })
              ],
              className: "relative"
            });
}

var make = OldKlondike;

export {
  getShuffledDeck ,
  shuffledDeck ,
  cardsData ,
  stockData ,
  space_encode ,
  space_decode ,
  spaceToString ,
  zIndexFromElement ,
  spaceFromElement ,
  parentFromElement ,
  elementPosition ,
  eventPosition ,
  CardDisplay ,
  make ,
}
/* shuffledDeck Not a pure module */
