// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as ReactDnd from "react-dnd";
import * as Caml_module from "rescript/lib/es6/caml_module.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as ReactDndHtml5Backend from "react-dnd-html5-backend";

var allRanks = [
  "RA",
  "R2",
  "R3",
  "R4",
  "R5",
  "R6",
  "R7",
  "R8",
  "R9",
  "R10",
  "RJ",
  "RQ",
  "RK"
];

var allSuits = [
  "Spades",
  "Hearts",
  "Diamonds",
  "Clubs"
];

function isRed(card) {
  if (card.suit === "Hearts") {
    return true;
  } else {
    return card.suit === "Diamonds";
  }
}

function rankIsBelow(a, b) {
  var match = a.rank;
  var match$1 = b.rank;
  switch (match) {
    case "RA" :
        if (match$1 === "R2") {
          return true;
        } else {
          return false;
        }
    case "R2" :
        if (match$1 === "R3") {
          return true;
        } else {
          return false;
        }
    case "R3" :
        if (match$1 === "R4") {
          return true;
        } else {
          return false;
        }
    case "R4" :
        if (match$1 === "R5") {
          return true;
        } else {
          return false;
        }
    case "R5" :
        if (match$1 === "R6") {
          return true;
        } else {
          return false;
        }
    case "R6" :
        if (match$1 === "R7") {
          return true;
        } else {
          return false;
        }
    case "R7" :
        if (match$1 === "R8") {
          return true;
        } else {
          return false;
        }
    case "R8" :
        if (match$1 === "R9") {
          return true;
        } else {
          return false;
        }
    case "R9" :
        if (match$1 === "R10") {
          return true;
        } else {
          return false;
        }
    case "R10" :
        if (match$1 === "RJ") {
          return true;
        } else {
          return false;
        }
    case "RJ" :
        if (match$1 === "RQ") {
          return true;
        } else {
          return false;
        }
    case "RQ" :
        if (match$1 === "RK") {
          return true;
        } else {
          return false;
        }
    case "RK" :
        return false;
    
  }
}

function rankIsAbove(a, b) {
  var match = a.rank;
  var match$1 = b.rank;
  switch (match) {
    case "RA" :
        return false;
    case "R2" :
        if (match$1 === "RA") {
          return true;
        } else {
          return false;
        }
    case "R3" :
        if (match$1 === "R2") {
          return true;
        } else {
          return false;
        }
    case "R4" :
        if (match$1 === "R3") {
          return true;
        } else {
          return false;
        }
    case "R5" :
        if (match$1 === "R4") {
          return true;
        } else {
          return false;
        }
    case "R6" :
        if (match$1 === "R5") {
          return true;
        } else {
          return false;
        }
    case "R7" :
        if (match$1 === "R6") {
          return true;
        } else {
          return false;
        }
    case "R8" :
        if (match$1 === "R7") {
          return true;
        } else {
          return false;
        }
    case "R9" :
        if (match$1 === "R8") {
          return true;
        } else {
          return false;
        }
    case "R10" :
        if (match$1 === "R9") {
          return true;
        } else {
          return false;
        }
    case "RJ" :
        if (match$1 === "R10") {
          return true;
        } else {
          return false;
        }
    case "RQ" :
        if (match$1 === "RJ") {
          return true;
        } else {
          return false;
        }
    case "RK" :
        if (match$1 === "RQ") {
          return true;
        } else {
          return false;
        }
    
  }
}

function string(card) {
  var match = card.rank;
  var rankString;
  switch (match) {
    case "RA" :
        rankString = "A";
        break;
    case "R2" :
        rankString = "2";
        break;
    case "R3" :
        rankString = "3";
        break;
    case "R4" :
        rankString = "4";
        break;
    case "R5" :
        rankString = "5";
        break;
    case "R6" :
        rankString = "6";
        break;
    case "R7" :
        rankString = "7";
        break;
    case "R8" :
        rankString = "8";
        break;
    case "R9" :
        rankString = "9";
        break;
    case "R10" :
        rankString = "10";
        break;
    case "RJ" :
        rankString = "J";
        break;
    case "RQ" :
        rankString = "Q";
        break;
    case "RK" :
        rankString = "K";
        break;
    
  }
  var match$1 = card.suit;
  var suitString;
  switch (match$1) {
    case "Spades" :
        suitString = "♠";
        break;
    case "Hearts" :
        suitString = "♥";
        break;
    case "Diamonds" :
        suitString = "♦";
        break;
    case "Clubs" :
        suitString = "♣";
        break;
    
  }
  return rankString + suitString;
}

function getShuffledDeck() {
  return Core__Array.toShuffled(Core__Array.reduce(allRanks, [], (function (a, rank) {
                    return Core__Array.reduce(allSuits, a, (function (a2, suit) {
                                  return a2.concat([{
                                                suit: suit,
                                                rank: rank,
                                                revealed: false
                                              }]);
                                }));
                  })));
}

function canPutOnPile(a, b, param) {
  if (a.revealed && b.revealed && rankIsAbove(a, b)) {
    return isRed(a) !== isRed(b);
  } else {
    return false;
  }
}

function canPutOnFoundation(a, b, hasOnTop) {
  if (!hasOnTop && a.revealed && b.revealed && rankIsBelow(a, b)) {
    return a.suit === b.suit;
  } else {
    return false;
  }
}

function initiateGame() {
  var shuffledDeck = getShuffledDeck();
  return {
          piles: [
            [],
            shuffledDeck.slice(0, 1),
            shuffledDeck.slice(1, 3),
            shuffledDeck.slice(3, 6),
            shuffledDeck.slice(6, 10),
            shuffledDeck.slice(10, 15),
            shuffledDeck.slice(15, 21)
          ],
          foundations: [
            [],
            [],
            [],
            []
          ],
          stock: shuffledDeck.slice(21),
          waste: [],
          movesCounter: 0,
          gameEnded: false
        };
}

function App$DropZone(props) {
  var canDrop = props.canDrop;
  var onDrop = props.onDrop;
  var match = Curry._2(ReactDnd.useDrop, (function () {
          return {
                  canDrop: canDrop,
                  drop: onDrop,
                  accept: "CARD",
                  collect: (function (monitor) {
                      return {
                              canDrop: monitor.canDrop(),
                              isOver: monitor.isOver(),
                              beingDragged: monitor.getClientOffset()
                            };
                    })
                };
        }), [
        canDrop,
        onDrop
      ]);
  var match$1 = match[0];
  return JsxRuntime.jsx("div", {
              className: [
                  "rounded w-12 h-20",
                  match$1.isOver ? (
                      match$1.canDrop ? "bg-blue-800" : "bg-red-800"
                    ) : "bg-green-800"
                ].join(" ")
            });
}

var CardComp = Caml_module.init_mod([
      "App.res",
      252,
      32
    ], {
      TAG: "Module",
      _0: [[
          "Function",
          "make"
        ]]
    });

function make(param) {
  var canPutCardOnCard = param.canPutCardOnCard;
  var index = param.index;
  var stack = param.stack;
  var card = stack[index];
  var onTop = stack[index + 1 | 0];
  var hasOnTop = Core__Option.isSome(onTop);
  Curry._2(ReactDnd.useDrag, (function () {
          return {
                  type: "CARD",
                  item: card,
                  canDrag: (function () {
                      return card.revealed;
                    }),
                  collect: (function (monitor) {
                      return {
                              isDragging: monitor.isDragging()
                            };
                    })
                };
        }), [card]);
  var onDrop = function (item) {
    
  };
  var canDrop = function (item) {
    return canPutCardOnCard(item, card, hasOnTop);
  };
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: string(card),
                      className: [
                          "border border-gray-300 rounded h-20 w-12 -mb-14 bg-white shadow-sm px-1",
                          isRed(card) ? "text-red-700" : "text-black"
                        ].join(" ")
                    }),
                hasOnTop ? JsxRuntime.jsx(CardComp.make, {
                        stack: stack,
                        index: index + 1 | 0,
                        canPutCardOnCard: canPutCardOnCard,
                        aligned: param.aligned
                      }) : JsxRuntime.jsx(App$DropZone, {
                        onDrop: onDrop,
                        canDrop: canDrop
                      })
              ]
            });
}

Caml_module.update_mod({
      TAG: "Module",
      _0: [[
          "Function",
          "make"
        ]]
    }, CardComp, {
      make: make
    });

function App$Pile(props) {
  var stack = props.stack;
  var onDrop = function (param) {
    
  };
  return JsxRuntime.jsx("div", {
              children: stack.length !== 0 ? JsxRuntime.jsx(CardComp.make, {
                      stack: stack,
                      index: 0,
                      canPutCardOnCard: canPutOnPile,
                      aligned: false
                    }) : JsxRuntime.jsx(App$DropZone, {
                      onDrop: onDrop,
                      canDrop: (function (card) {
                          return card.rank === "RK";
                        })
                    })
            });
}

function App$Foundation(props) {
  var stack = props.stack;
  var onDrop = function (param) {
    
  };
  return JsxRuntime.jsx("div", {
              children: stack.length !== 0 ? JsxRuntime.jsx(CardComp.make, {
                      stack: stack,
                      index: 0,
                      canPutCardOnCard: canPutOnFoundation,
                      aligned: true
                    }) : JsxRuntime.jsx(App$DropZone, {
                      onDrop: onDrop,
                      canDrop: (function (card) {
                          return card.rank === "RA";
                        })
                    })
            });
}

function App(props) {
  var match = React.useState(function () {
        return initiateGame();
      });
  var game = match[0];
  var match$1 = game.foundations;
  var match$2 = game.piles;
  var restart = function (param) {
    
  };
  return JsxRuntime.jsx(ReactDnd.DndProvider, {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx("button", {
                                    children: "restart",
                                    onClick: restart
                                  }),
                              JsxRuntime.jsx("div", {
                                    children: "Moves: " + game.movesCounter.toString()
                                  }),
                              JsxRuntime.jsx("div", {
                                    children: game.gameEnded ? "You win!" : null
                                  })
                            ]
                          }),
                      JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx(App$Foundation, {
                                    num: 0,
                                    stack: match$1[0]
                                  }),
                              JsxRuntime.jsx(App$Foundation, {
                                    num: 1,
                                    stack: match$1[1]
                                  }),
                              JsxRuntime.jsx(App$Foundation, {
                                    num: 2,
                                    stack: match$1[2]
                                  }),
                              JsxRuntime.jsx(App$Foundation, {
                                    num: 3,
                                    stack: match$1[3]
                                  })
                            ],
                            className: "flex flex-row gap-4 py-1"
                          }),
                      JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx(App$Pile, {
                                    num: 0,
                                    stack: match$2[0]
                                  }),
                              JsxRuntime.jsx(App$Pile, {
                                    num: 1,
                                    stack: match$2[1]
                                  }),
                              JsxRuntime.jsx(App$Pile, {
                                    num: 2,
                                    stack: match$2[2]
                                  }),
                              JsxRuntime.jsx(App$Pile, {
                                    num: 3,
                                    stack: match$2[3]
                                  }),
                              JsxRuntime.jsx(App$Pile, {
                                    num: 4,
                                    stack: match$2[4]
                                  }),
                              JsxRuntime.jsx(App$Pile, {
                                    num: 5,
                                    stack: match$2[5]
                                  }),
                              JsxRuntime.jsx(App$Pile, {
                                    num: 6,
                                    stack: match$2[6]
                                  })
                            ],
                            className: "flex flex-row gap-1 py-1"
                          })
                    ],
                    className: "p-6"
                  }),
              backend: ReactDndHtml5Backend.HTML5Backend
            });
}

var make$1 = App;

export {
  make$1 as make,
}
/* CardComp Not a pure module */
