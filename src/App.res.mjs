// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import TestJsx from "./Test.jsx";
import * as Caml_module from "rescript/lib/es6/caml_module.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Core from "@dnd-kit/core";
import * as JsxRuntime from "react/jsx-runtime";

var allRanks = [
  "RA",
  "R2",
  "R3",
  "R4",
  "R5",
  "R6",
  "R7",
  "R8",
  "R9",
  "R10",
  "RJ",
  "RQ",
  "RK"
];

var allSuits = [
  "Spades",
  "Hearts",
  "Diamonds",
  "Clubs"
];

function isRed(card) {
  if (card.suit === "Hearts") {
    return true;
  } else {
    return card.suit === "Diamonds";
  }
}

function rankIsBelow(a, b) {
  var match = a.rank;
  var match$1 = b.rank;
  switch (match) {
    case "RA" :
        if (match$1 === "R2") {
          return true;
        } else {
          return false;
        }
    case "R2" :
        if (match$1 === "R3") {
          return true;
        } else {
          return false;
        }
    case "R3" :
        if (match$1 === "R4") {
          return true;
        } else {
          return false;
        }
    case "R4" :
        if (match$1 === "R5") {
          return true;
        } else {
          return false;
        }
    case "R5" :
        if (match$1 === "R6") {
          return true;
        } else {
          return false;
        }
    case "R6" :
        if (match$1 === "R7") {
          return true;
        } else {
          return false;
        }
    case "R7" :
        if (match$1 === "R8") {
          return true;
        } else {
          return false;
        }
    case "R8" :
        if (match$1 === "R9") {
          return true;
        } else {
          return false;
        }
    case "R9" :
        if (match$1 === "R10") {
          return true;
        } else {
          return false;
        }
    case "R10" :
        if (match$1 === "RJ") {
          return true;
        } else {
          return false;
        }
    case "RJ" :
        if (match$1 === "RQ") {
          return true;
        } else {
          return false;
        }
    case "RQ" :
        if (match$1 === "RK") {
          return true;
        } else {
          return false;
        }
    case "RK" :
        return false;
    
  }
}

function rankIsAbove(a, b) {
  var match = a.rank;
  var match$1 = b.rank;
  switch (match) {
    case "RA" :
        return false;
    case "R2" :
        if (match$1 === "RA") {
          return true;
        } else {
          return false;
        }
    case "R3" :
        if (match$1 === "R2") {
          return true;
        } else {
          return false;
        }
    case "R4" :
        if (match$1 === "R3") {
          return true;
        } else {
          return false;
        }
    case "R5" :
        if (match$1 === "R4") {
          return true;
        } else {
          return false;
        }
    case "R6" :
        if (match$1 === "R5") {
          return true;
        } else {
          return false;
        }
    case "R7" :
        if (match$1 === "R6") {
          return true;
        } else {
          return false;
        }
    case "R8" :
        if (match$1 === "R7") {
          return true;
        } else {
          return false;
        }
    case "R9" :
        if (match$1 === "R8") {
          return true;
        } else {
          return false;
        }
    case "R10" :
        if (match$1 === "R9") {
          return true;
        } else {
          return false;
        }
    case "RJ" :
        if (match$1 === "R10") {
          return true;
        } else {
          return false;
        }
    case "RQ" :
        if (match$1 === "RJ") {
          return true;
        } else {
          return false;
        }
    case "RK" :
        if (match$1 === "RQ") {
          return true;
        } else {
          return false;
        }
    
  }
}

function rankString(card) {
  var match = card.rank;
  switch (match) {
    case "RA" :
        return "A";
    case "R2" :
        return "2";
    case "R3" :
        return "3";
    case "R4" :
        return "4";
    case "R5" :
        return "5";
    case "R6" :
        return "6";
    case "R7" :
        return "7";
    case "R8" :
        return "8";
    case "R9" :
        return "9";
    case "R10" :
        return "X";
    case "RJ" :
        return "J";
    case "RQ" :
        return "Q";
    case "RK" :
        return "K";
    
  }
}

function suitString(card) {
  var match = card.suit;
  switch (match) {
    case "Spades" :
        return "♠";
    case "Hearts" :
        return "♥";
    case "Diamonds" :
        return "♦";
    case "Clubs" :
        return "♣";
    
  }
}

function string(card) {
  return JsxRuntime.jsxs("span", {
              children: [
                JsxRuntime.jsx("span", {
                      children: rankString(card),
                      className: "w-3.5"
                    }),
                JsxRuntime.jsx("span", {
                      children: suitString(card),
                      className: "w-3.5 flex flex-row justify-center"
                    })
              ],
              className: "flex flex-row"
            });
}

function id(card) {
  return rankString(card) + suitString(card);
}

function getShuffledDeck() {
  return Core__Array.toShuffled(Core__Array.reduce(allRanks, [], (function (a, rank) {
                    return Core__Array.reduce(allSuits, a, (function (a2, suit) {
                                  return a2.concat([{
                                                suit: suit,
                                                rank: rank,
                                                revealed: false
                                              }]);
                                }));
                  })));
}

function canPutOnPile(a, b, param) {
  if (a.revealed && b.revealed && rankIsAbove(a, b)) {
    return isRed(a) !== isRed(b);
  } else {
    return false;
  }
}

function canPutOnFoundation(a, b, hasOnTop) {
  if (!hasOnTop && a.revealed && b.revealed && rankIsBelow(a, b)) {
    return a.suit === b.suit;
  } else {
    return false;
  }
}

function initiateGame() {
  var shuffledDeck = getShuffledDeck();
  return {
          piles: [
            shuffledDeck.slice(0, 1),
            shuffledDeck.slice(1, 3),
            shuffledDeck.slice(3, 6),
            shuffledDeck.slice(6, 10),
            shuffledDeck.slice(10, 15),
            shuffledDeck.slice(15, 21),
            shuffledDeck.slice(21, 28)
          ],
          foundations: [
            [],
            [],
            [],
            []
          ],
          stock: shuffledDeck.slice(28),
          waste: [],
          movesCounter: 0,
          gameEnded: false
        };
}

function App$DropZone(props) {
  var cardId = props.cardId;
  var __empty = props.empty;
  var canDrop = props.canDrop;
  var empty = __empty !== undefined ? __empty : false;
  var match = Core.useDroppable({
        id: cardId
      });
  var isOver = match.isOver;
  return JsxRuntime.jsx("div", {
              children: cardId,
              ref: Caml_option.some(match.setNodeRef),
              className: [
                  "rounded h-[80px] w-[57px]",
                  empty ? (
                      isOver ? (
                          canDrop ? "bg-blue-200" : "bg-red-200"
                        ) : "bg-gray-200 "
                    ) : (
                      isOver ? (
                          canDrop ? "bg-blue-200" : "bg-red-200"
                        ) : "opacity-0"
                    )
                ].join(" ")
            });
}

function encodeDropId(d) {
  var tmp;
  switch (d.TAG) {
    case "BasePile" :
        tmp = [
          "basepile",
          d._0.toString()
        ];
        break;
    case "BaseFoundation" :
        tmp = [
          "basefoundation",
          d._0.toString()
        ];
        break;
    case "ChildPile" :
        tmp = [
          "childpile",
          d._0.toString(),
          d._1.toString()
        ];
        break;
    case "ChildFoundation" :
        tmp = [
          "childfoundation",
          d._0.toString(),
          d._1.toString()
        ];
        break;
    
  }
  return tmp.join("-");
}

var CardComp = Caml_module.init_mod([
      "App.res",
      359,
      32
    ], {
      TAG: "Module",
      _0: [[
          "Function",
          "make"
        ]]
    });

function make(param) {
  var place = param.place;
  var num = param.num;
  var index = param.index;
  var stack = param.stack;
  var card = stack[index];
  var onTop = stack[index + 1 | 0];
  var hasOnTop = Core__Option.isSome(onTop);
  var match = Core.useDraggable({
        id: id(card)
      });
  var style = Core__Option.mapOr(Caml_option.nullable_to_opt(match.transform), {}, (function (t) {
          return {
                  transform: "translate3d(" + t.x.toString() + "px, " + t.y.toString() + "px, 0)"
                };
        }));
  var match$1 = card.suit;
  var tmp;
  switch (match$1) {
    case "Hearts" :
    case "Diamonds" :
        tmp = "text-red-600";
        break;
    case "Spades" :
    case "Clubs" :
        tmp = "text-black";
        break;
    
  }
  var tmp$1;
  if (hasOnTop) {
    tmp$1 = JsxRuntime.jsx(CardComp.make, {
          stack: stack,
          index: index + 1 | 0,
          num: num,
          place: place,
          canPutCardOnCard: param.canPutCardOnCard,
          aligned: param.aligned
        });
  } else {
    var tmp$2;
    tmp$2 = place === "Pile" ? ({
          TAG: "ChildPile",
          _0: num,
          _1: index
        }) : ({
          TAG: "ChildFoundation",
          _0: num,
          _1: index
        });
    tmp$1 = JsxRuntime.jsx(App$DropZone, {
          canDrop: true,
          cardId: encodeDropId(tmp$2)
        });
  }
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: string(card),
                      className: [
                          "border border-gray-300 rounded h-[80px] w-[57px] -mb-[58px] bg-white shadow-sm px-1 leading-none py-0.5",
                          tmp
                        ].join(" ")
                    }),
                tmp$1
              ],
              ref: Caml_option.some(match.setNodeRef),
              style: style,
              onPointerDown: match.listeners.onPointerDown
            });
}

Caml_module.update_mod({
      TAG: "Module",
      _0: [[
          "Function",
          "make"
        ]]
    }, CardComp, {
      make: make
    });

function App$Pile(props) {
  var stack = props.stack;
  var num = props.num;
  return JsxRuntime.jsx("div", {
              children: stack.length !== 0 ? JsxRuntime.jsx(CardComp.make, {
                      stack: stack,
                      index: 0,
                      num: num,
                      place: "Pile",
                      canPutCardOnCard: canPutOnPile,
                      aligned: false
                    }) : JsxRuntime.jsx(App$DropZone, {
                      canDrop: true,
                      empty: true,
                      cardId: encodeDropId({
                            TAG: "BasePile",
                            _0: num
                          })
                    })
            });
}

function App$Foundation(props) {
  var stack = props.stack;
  var num = props.num;
  return JsxRuntime.jsx("div", {
              children: stack.length !== 0 ? JsxRuntime.jsx(CardComp.make, {
                      stack: stack,
                      index: 0,
                      num: num,
                      place: "Foundation",
                      canPutCardOnCard: canPutOnFoundation,
                      aligned: true
                    }) : JsxRuntime.jsx(App$DropZone, {
                      canDrop: true,
                      empty: true,
                      cardId: encodeDropId({
                            TAG: "BaseFoundation",
                            _0: num
                          })
                    })
            });
}

function App(props) {
  var match = React.useState(function () {
        return initiateGame();
      });
  var game = match[0];
  var match$1 = React.useState(function () {
        
      });
  var match$2 = game.foundations;
  var match$3 = game.piles;
  var setMovingCard = match$1[1];
  var movingCard = match$1[0];
  var restart = function (param) {
    
  };
  var onDragStart = React.useCallback((function (dragStartEvent) {
          console.log("onDragStart: ", dragStartEvent);
          setMovingCard(function (param) {
                return dragStartEvent.active.id;
              });
        }), []);
  var onDragCancel = React.useCallback((function () {
          setMovingCard(function (param) {
                
              });
        }), []);
  var onDragEnd = React.useCallback((function (dragEndEvent) {
          console.log(dragEndEvent.over.id);
          console.log(movingCard);
          setMovingCard(function (param) {
                
              });
        }), []);
  return JsxRuntime.jsx(Core.DndContext, {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx("button", {
                                    children: "restart",
                                    onClick: restart
                                  }),
                              JsxRuntime.jsx("div", {
                                    children: "Moves: " + game.movesCounter.toString()
                                  }),
                              JsxRuntime.jsx("div", {
                                    children: game.gameEnded ? "You win!" : null
                                  })
                            ]
                          }),
                      JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx(App$Foundation, {
                                    num: 0,
                                    stack: match$2[0]
                                  }),
                              JsxRuntime.jsx(App$Foundation, {
                                    num: 1,
                                    stack: match$2[1]
                                  }),
                              JsxRuntime.jsx(App$Foundation, {
                                    num: 2,
                                    stack: match$2[2]
                                  }),
                              JsxRuntime.jsx(App$Foundation, {
                                    num: 3,
                                    stack: match$2[3]
                                  })
                            ],
                            className: "flex flex-row gap-2 py-1"
                          }),
                      JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx(App$Pile, {
                                    num: 0,
                                    stack: match$3[0]
                                  }),
                              JsxRuntime.jsx(App$Pile, {
                                    num: 1,
                                    stack: match$3[1]
                                  }),
                              JsxRuntime.jsx(App$Pile, {
                                    num: 2,
                                    stack: match$3[2]
                                  }),
                              JsxRuntime.jsx(App$Pile, {
                                    num: 3,
                                    stack: match$3[3]
                                  }),
                              JsxRuntime.jsx(App$Pile, {
                                    num: 4,
                                    stack: match$3[4]
                                  }),
                              JsxRuntime.jsx(App$Pile, {
                                    num: 5,
                                    stack: match$3[5]
                                  }),
                              JsxRuntime.jsx(App$Pile, {
                                    num: 6,
                                    stack: match$3[6]
                                  })
                            ],
                            className: "flex flex-row gap-2 py-1"
                          })
                    ],
                    className: "p-6"
                  }),
              onDragEnd: onDragEnd,
              onDragStart: onDragStart,
              onDragCancel: onDragCancel
            });
}

var make$1 = App;

export {
  make$1 as make,
}
/*  Not a pure module */
