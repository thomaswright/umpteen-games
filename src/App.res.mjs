// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Core__Int from "@rescript/core/src/Core__Int.res.mjs";
import TestJsx from "./Test.jsx";
import * as Caml_module from "rescript/lib/es6/caml_module.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Core from "@dnd-kit/core";
import * as JsxRuntime from "react/jsx-runtime";

var allRanks = [
  "RA",
  "R2",
  "R3",
  "R4",
  "R5",
  "R6",
  "R7",
  "R8",
  "R9",
  "R10",
  "RJ",
  "RQ",
  "RK"
];

var allSuits = [
  "Spades",
  "Hearts",
  "Diamonds",
  "Clubs"
];

function isRed(card) {
  if (card.suit === "Hearts") {
    return true;
  } else {
    return card.suit === "Diamonds";
  }
}

function rankIsBelow(a, b) {
  var match = a.rank;
  var match$1 = b.rank;
  switch (match) {
    case "RA" :
        if (match$1 === "R2") {
          return true;
        } else {
          return false;
        }
    case "R2" :
        if (match$1 === "R3") {
          return true;
        } else {
          return false;
        }
    case "R3" :
        if (match$1 === "R4") {
          return true;
        } else {
          return false;
        }
    case "R4" :
        if (match$1 === "R5") {
          return true;
        } else {
          return false;
        }
    case "R5" :
        if (match$1 === "R6") {
          return true;
        } else {
          return false;
        }
    case "R6" :
        if (match$1 === "R7") {
          return true;
        } else {
          return false;
        }
    case "R7" :
        if (match$1 === "R8") {
          return true;
        } else {
          return false;
        }
    case "R8" :
        if (match$1 === "R9") {
          return true;
        } else {
          return false;
        }
    case "R9" :
        if (match$1 === "R10") {
          return true;
        } else {
          return false;
        }
    case "R10" :
        if (match$1 === "RJ") {
          return true;
        } else {
          return false;
        }
    case "RJ" :
        if (match$1 === "RQ") {
          return true;
        } else {
          return false;
        }
    case "RQ" :
        if (match$1 === "RK") {
          return true;
        } else {
          return false;
        }
    case "RK" :
        return false;
    
  }
}

function rankIsAbove(a, b) {
  var match = a.rank;
  var match$1 = b.rank;
  switch (match) {
    case "RA" :
        return false;
    case "R2" :
        if (match$1 === "RA") {
          return true;
        } else {
          return false;
        }
    case "R3" :
        if (match$1 === "R2") {
          return true;
        } else {
          return false;
        }
    case "R4" :
        if (match$1 === "R3") {
          return true;
        } else {
          return false;
        }
    case "R5" :
        if (match$1 === "R4") {
          return true;
        } else {
          return false;
        }
    case "R6" :
        if (match$1 === "R5") {
          return true;
        } else {
          return false;
        }
    case "R7" :
        if (match$1 === "R6") {
          return true;
        } else {
          return false;
        }
    case "R8" :
        if (match$1 === "R7") {
          return true;
        } else {
          return false;
        }
    case "R9" :
        if (match$1 === "R8") {
          return true;
        } else {
          return false;
        }
    case "R10" :
        if (match$1 === "R9") {
          return true;
        } else {
          return false;
        }
    case "RJ" :
        if (match$1 === "R10") {
          return true;
        } else {
          return false;
        }
    case "RQ" :
        if (match$1 === "RJ") {
          return true;
        } else {
          return false;
        }
    case "RK" :
        if (match$1 === "RQ") {
          return true;
        } else {
          return false;
        }
    
  }
}

function rankString(card) {
  var match = card.rank;
  switch (match) {
    case "RA" :
        return "A";
    case "R2" :
        return "2";
    case "R3" :
        return "3";
    case "R4" :
        return "4";
    case "R5" :
        return "5";
    case "R6" :
        return "6";
    case "R7" :
        return "7";
    case "R8" :
        return "8";
    case "R9" :
        return "9";
    case "R10" :
        return "X";
    case "RJ" :
        return "J";
    case "RQ" :
        return "Q";
    case "RK" :
        return "K";
    
  }
}

function suitString(card) {
  var match = card.suit;
  switch (match) {
    case "Spades" :
        return "♠";
    case "Hearts" :
        return "♥";
    case "Diamonds" :
        return "♦";
    case "Clubs" :
        return "♣";
    
  }
}

function string(card) {
  return JsxRuntime.jsxs("span", {
              children: [
                JsxRuntime.jsx("span", {
                      children: rankString(card),
                      className: "w-3.5"
                    }),
                JsxRuntime.jsx("span", {
                      children: suitString(card),
                      className: "w-3.5 flex flex-row justify-center"
                    })
              ],
              className: "flex flex-row"
            });
}

function isOppositeColor(a, b) {
  return isRed(a) !== isRed(b);
}

function getShuffledDeck() {
  return Core__Array.toShuffled(Core__Array.reduce(allRanks, [], (function (a, rank) {
                    return Core__Array.reduce(allSuits, a, (function (a2, suit) {
                                  return a2.concat([{
                                                suit: suit,
                                                rank: rank,
                                                revealed: false
                                              }]);
                                }));
                  })));
}

function canPutOnPile(a, b, param) {
  if (a.revealed && b.revealed && rankIsAbove(a, b)) {
    return isOppositeColor(a, b);
  } else {
    return false;
  }
}

function canPutOnFoundation(a, b, hasOnTop) {
  if (!hasOnTop && a.revealed && b.revealed && rankIsBelow(a, b)) {
    return a.suit === b.suit;
  } else {
    return false;
  }
}

function initiateGame() {
  var shuffledDeck = getShuffledDeck();
  return {
          piles: [
            shuffledDeck.slice(0, 1),
            shuffledDeck.slice(1, 3),
            shuffledDeck.slice(3, 6),
            shuffledDeck.slice(6, 10),
            shuffledDeck.slice(10, 15),
            shuffledDeck.slice(15, 21),
            shuffledDeck.slice(21, 28)
          ],
          foundations: [
            [],
            [],
            [],
            []
          ],
          stock: shuffledDeck.slice(28),
          waste: [],
          movesCounter: 0,
          gameEnded: false
        };
}

function App$DropZone(props) {
  var __empty = props.empty;
  var canDrop = props.canDrop;
  var empty = __empty !== undefined ? __empty : false;
  var match = Core.useDroppable({
        id: props.cardId
      });
  var isOver = match.isOver;
  return JsxRuntime.jsx("div", {
              ref: Caml_option.some(match.setNodeRef),
              className: [
                  "rounded h-[80px] w-[57px]",
                  empty ? (
                      isOver ? (
                          canDrop ? "opacity-0 bg-blue-200" : "opacity-0 bg-red-200"
                        ) : "bg-gray-200 "
                    ) : (
                      isOver ? (
                          canDrop ? "opacity-0 bg-blue-200" : "opacity-0 bg-red-200"
                        ) : "opacity-0"
                    )
                ].join(" ")
            });
}

function encodeDropId(d) {
  var tmp;
  switch (d.TAG) {
    case "PileBase" :
        tmp = [
          "PileBase",
          d._0.toString()
        ];
        break;
    case "FoundationBase" :
        tmp = [
          "FoundationBase",
          d._0.toString()
        ];
        break;
    case "PileChild" :
        tmp = [
          "PileChild",
          d._0.toString(),
          d._1.toString()
        ];
        break;
    case "FoundationChild" :
        tmp = [
          "FoundationChild",
          d._0.toString(),
          d._1.toString()
        ];
        break;
    
  }
  return tmp.join("-");
}

function decodeDropId(d) {
  var split = d.split("-");
  var len = split.length;
  if (len !== 2) {
    if (len !== 3) {
      return ;
    }
    var match = split[0];
    switch (match) {
      case "FoundationChild" :
          var num = split[1];
          var index = split[2];
          var match$1 = Core__Int.fromString(num, undefined);
          var match$2 = Core__Int.fromString(index, undefined);
          if (match$1 !== undefined && match$2 !== undefined) {
            return {
                    TAG: "FoundationChild",
                    _0: match$1,
                    _1: match$2
                  };
          } else {
            return ;
          }
      case "PileChild" :
          var num$1 = split[1];
          var index$1 = split[2];
          var match$3 = Core__Int.fromString(num$1, undefined);
          var match$4 = Core__Int.fromString(index$1, undefined);
          if (match$3 !== undefined && match$4 !== undefined) {
            return {
                    TAG: "PileChild",
                    _0: match$3,
                    _1: match$4
                  };
          } else {
            return ;
          }
      default:
        return ;
    }
  } else {
    var match$5 = split[0];
    switch (match$5) {
      case "FoundationBase" :
          var num$2 = split[1];
          var n = Core__Int.fromString(num$2, undefined);
          if (n !== undefined) {
            return {
                    TAG: "FoundationBase",
                    _0: n
                  };
          } else {
            return ;
          }
      case "PileBase" :
          var num$3 = split[1];
          var n$1 = Core__Int.fromString(num$3, undefined);
          if (n$1 !== undefined) {
            return {
                    TAG: "PileBase",
                    _0: n$1
                  };
          } else {
            return ;
          }
      default:
        return ;
    }
  }
}

var CardComp = Caml_module.init_mod([
      "App.res",
      350,
      32
    ], {
      TAG: "Module",
      _0: [[
          "Function",
          "make"
        ]]
    });

function make(param) {
  var place = param.place;
  var num = param.num;
  var index = param.index;
  var stack = param.stack;
  var card = stack[index];
  var onTop = stack[index + 1 | 0];
  var hasOnTop = Core__Option.isSome(onTop);
  var tmp;
  tmp = place === "Pile" ? ({
        TAG: "PileChild",
        _0: num,
        _1: index
      }) : ({
        TAG: "FoundationChild",
        _0: num,
        _1: index
      });
  var cardId = encodeDropId(tmp);
  var match = Core.useDraggable({
        id: cardId
      });
  var style = Core__Option.mapOr(Caml_option.nullable_to_opt(match.transform), {}, (function (t) {
          return {
                  transform: "translate3d(" + t.x.toString() + "px, " + t.y.toString() + "px, 0)"
                };
        }));
  var match$1 = card.suit;
  var tmp$1;
  switch (match$1) {
    case "Hearts" :
    case "Diamonds" :
        tmp$1 = "text-red-600";
        break;
    case "Spades" :
    case "Clubs" :
        tmp$1 = "text-black";
        break;
    
  }
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: string(card),
                      className: [
                          "border border-gray-300 rounded h-[80px] w-[57px] bg-white shadow-sm px-1 leading-none py-0.5 cursor-default",
                          tmp$1,
                          place === "Pile" ? "-mb-[58px]" : "-mb-[80px]"
                        ].join(" "),
                      style: {
                        position: place === "Foundation" ? "relative" : "static"
                      }
                    }),
                hasOnTop ? JsxRuntime.jsx(CardComp.make, {
                        stack: stack,
                        index: index + 1 | 0,
                        num: num,
                        place: place,
                        canPutCardOnCard: param.canPutCardOnCard,
                        aligned: param.aligned
                      }) : JsxRuntime.jsx(App$DropZone, {
                        canDrop: true,
                        cardId: cardId
                      })
              ],
              ref: Caml_option.some(match.setNodeRef),
              style: style,
              onPointerDown: match.listeners.onPointerDown
            });
}

Caml_module.update_mod({
      TAG: "Module",
      _0: [[
          "Function",
          "make"
        ]]
    }, CardComp, {
      make: make
    });

function App$Pile(props) {
  var stack = props.stack;
  var num = props.num;
  return JsxRuntime.jsx("div", {
              children: stack.length !== 0 ? JsxRuntime.jsx(CardComp.make, {
                      stack: stack,
                      index: 0,
                      num: num,
                      place: "Pile",
                      canPutCardOnCard: canPutOnPile,
                      aligned: false
                    }) : JsxRuntime.jsx(App$DropZone, {
                      canDrop: true,
                      empty: true,
                      cardId: encodeDropId({
                            TAG: "PileBase",
                            _0: num
                          })
                    })
            });
}

function App$Foundation(props) {
  var stack = props.stack;
  var num = props.num;
  return JsxRuntime.jsx("div", {
              children: stack.length !== 0 ? JsxRuntime.jsx(CardComp.make, {
                      stack: stack,
                      index: 0,
                      num: num,
                      place: "Foundation",
                      canPutCardOnCard: canPutOnFoundation,
                      aligned: true
                    }) : JsxRuntime.jsx(App$DropZone, {
                      canDrop: true,
                      empty: true,
                      cardId: encodeDropId({
                            TAG: "FoundationBase",
                            _0: num
                          })
                    })
            });
}

function App(props) {
  var match = React.useState(function () {
        return initiateGame();
      });
  var game = match[0];
  var foundations = game.foundations;
  var piles = game.piles;
  var setGame = match[1];
  var pileGet = function (a, b) {
    return piles[a][b];
  };
  var pileSlice = function (a, b) {
    return piles[a].slice(b);
  };
  var foundationGet = function (a, b) {
    return foundations[a][b];
  };
  var restart = function (param) {
    
  };
  var onDragEnd = function (dragEndEvent) {
    var dropSpace = decodeDropId(dragEndEvent.over.id);
    var dragSpace = decodeDropId(dragEndEvent.active.id);
    if (dragSpace === undefined) {
      return ;
    }
    if (dragSpace.TAG !== "PileChild") {
      return ;
    }
    var dragIndex = dragSpace._1;
    var dragNum = dragSpace._0;
    var dragPileSize = piles[dragNum].length;
    var dragCard = pileGet(dragNum, dragIndex);
    var dragHasChildren = dragIndex < (dragPileSize - 1 | 0);
    var dragSlice = pileSlice(dragNum, dragIndex);
    if (dropSpace === undefined) {
      return ;
    }
    switch (dropSpace.TAG) {
      case "PileBase" :
          var dropNum = dropSpace._0;
          return setGame(function (game) {
                      return {
                              piles: game.piles.map(function (pile, i) {
                                    if (i === dragNum) {
                                      return pile.slice(0, dragIndex);
                                    } else if (i === dropNum) {
                                      return pile.concat(dragSlice);
                                    } else {
                                      return pile;
                                    }
                                  }),
                              foundations: game.foundations,
                              stock: game.stock,
                              waste: game.waste,
                              movesCounter: game.movesCounter,
                              gameEnded: game.gameEnded
                            };
                    });
      case "FoundationBase" :
          if (!(dragCard.rank === "RA" && !dragHasChildren)) {
            return ;
          }
          var dropNum$1 = dropSpace._0;
          return setGame(function (game) {
                      return {
                              piles: game.piles.map(function (pile, i) {
                                    if (i === dragNum) {
                                      return pile.slice(0, dragIndex);
                                    } else {
                                      return pile;
                                    }
                                  }),
                              foundations: game.foundations.map(function (foundation, i) {
                                    if (i === dropNum$1) {
                                      return foundation.concat(dragSlice);
                                    } else {
                                      return foundation;
                                    }
                                  }),
                              stock: game.stock,
                              waste: game.waste,
                              movesCounter: game.movesCounter,
                              gameEnded: game.gameEnded
                            };
                    });
      case "PileChild" :
          var dropIndex = dropSpace._1;
          var dropNum$2 = dropSpace._0;
          var dropPileSize = piles[dropNum$2].length;
          var dropCard = pileGet(dropNum$2, dropIndex);
          var dropHasChildren = dropIndex < (dropPileSize - 1 | 0);
          if (rankIsBelow(dragCard, dropCard) && isOppositeColor(dragCard, dropCard) && !dropHasChildren) {
            return setGame(function (game) {
                        return {
                                piles: game.piles.map(function (pile, i) {
                                      if (i === dragNum) {
                                        return pile.slice(0, dragIndex);
                                      } else if (i === dropNum$2) {
                                        return pile.concat(dragSlice);
                                      } else {
                                        return pile;
                                      }
                                    }),
                                foundations: game.foundations,
                                stock: game.stock,
                                waste: game.waste,
                                movesCounter: game.movesCounter,
                                gameEnded: game.gameEnded
                              };
                      });
          } else {
            return ;
          }
      case "FoundationChild" :
          var dropNum$3 = dropSpace._0;
          var dropCard$1 = foundationGet(dropNum$3, dropSpace._1);
          if (rankIsAbove(dragCard, dropCard$1) && dragCard.suit === dropCard$1.suit && !dragHasChildren) {
            return setGame(function (game) {
                        return {
                                piles: game.piles.map(function (pile, i) {
                                      if (i === dragNum) {
                                        return pile.slice(0, dragIndex);
                                      } else {
                                        return pile;
                                      }
                                    }),
                                foundations: game.foundations.map(function (foundation, i) {
                                      if (i === dropNum$3) {
                                        return foundation.concat(dragSlice);
                                      } else {
                                        return foundation;
                                      }
                                    }),
                                stock: game.stock,
                                waste: game.waste,
                                movesCounter: game.movesCounter,
                                gameEnded: game.gameEnded
                              };
                      });
          } else {
            return ;
          }
      
    }
  };
  return JsxRuntime.jsx(Core.DndContext, {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx("button", {
                                    children: "restart",
                                    onClick: restart
                                  }),
                              JsxRuntime.jsx("div", {
                                    children: "Moves: " + game.movesCounter.toString()
                                  }),
                              JsxRuntime.jsx("div", {
                                    children: game.gameEnded ? "You win!" : null
                                  })
                            ]
                          }),
                      JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx(App$Foundation, {
                                    num: 0,
                                    stack: foundations[0]
                                  }),
                              JsxRuntime.jsx(App$Foundation, {
                                    num: 1,
                                    stack: foundations[1]
                                  }),
                              JsxRuntime.jsx(App$Foundation, {
                                    num: 2,
                                    stack: foundations[2]
                                  }),
                              JsxRuntime.jsx(App$Foundation, {
                                    num: 3,
                                    stack: foundations[3]
                                  })
                            ],
                            className: "flex flex-row gap-2 py-1"
                          }),
                      JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx(App$Pile, {
                                    num: 0,
                                    stack: piles[0]
                                  }),
                              JsxRuntime.jsx(App$Pile, {
                                    num: 1,
                                    stack: piles[1]
                                  }),
                              JsxRuntime.jsx(App$Pile, {
                                    num: 2,
                                    stack: piles[2]
                                  }),
                              JsxRuntime.jsx(App$Pile, {
                                    num: 3,
                                    stack: piles[3]
                                  }),
                              JsxRuntime.jsx(App$Pile, {
                                    num: 4,
                                    stack: piles[4]
                                  }),
                              JsxRuntime.jsx(App$Pile, {
                                    num: 5,
                                    stack: piles[5]
                                  }),
                              JsxRuntime.jsx(App$Pile, {
                                    num: 6,
                                    stack: piles[6]
                                  })
                            ],
                            className: "flex flex-row gap-2 py-1"
                          })
                    ],
                    className: "p-6"
                  }),
              onDragEnd: onDragEnd
            });
}

var make$1 = App;

export {
  make$1 as make,
}
/*  Not a pure module */
