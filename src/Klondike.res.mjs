// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Decco from "@rescript-labs/decco/src/Decco.res.mjs";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Js_array from "rescript/lib/es6/js_array.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function suit_encode(value) {
  switch (value) {
    case "Spades" :
        return ["Spades"];
    case "Hearts" :
        return ["Hearts"];
    case "Diamonds" :
        return ["Diamonds"];
    case "Clubs" :
        return ["Clubs"];
    
  }
}

function suit_decode(value) {
  var jsonArr = Js_json.classify(value);
  if (typeof jsonArr !== "object") {
    return Decco.error(undefined, "Not a variant", value);
  }
  if (jsonArr.TAG !== "JSONArray") {
    return Decco.error(undefined, "Not a variant", value);
  }
  var jsonArr$1 = jsonArr._0;
  if (jsonArr$1.length === 0) {
    return Decco.error(undefined, "Expected variant, found empty array", value);
  }
  var tagged = Js_array.map(Js_json.classify, jsonArr$1);
  var match = Belt_Array.getExn(tagged, 0);
  if (typeof match === "object" && match.TAG === "JSONString") {
    switch (match._0) {
      case "Clubs" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "Clubs"
                  };
          }
      case "Diamonds" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "Diamonds"
                  };
          }
      case "Hearts" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "Hearts"
                  };
          }
      case "Spades" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "Spades"
                  };
          }
      default:
        
    }
  }
  return Decco.error(undefined, "Invalid variant constructor", Belt_Array.getExn(jsonArr$1, 0));
}

function rank_encode(value) {
  switch (value) {
    case "RA" :
        return ["RA"];
    case "R2" :
        return ["R2"];
    case "R3" :
        return ["R3"];
    case "R4" :
        return ["R4"];
    case "R5" :
        return ["R5"];
    case "R6" :
        return ["R6"];
    case "R7" :
        return ["R7"];
    case "R8" :
        return ["R8"];
    case "R9" :
        return ["R9"];
    case "R10" :
        return ["R10"];
    case "RJ" :
        return ["RJ"];
    case "RQ" :
        return ["RQ"];
    case "RK" :
        return ["RK"];
    
  }
}

function rank_decode(value) {
  var jsonArr = Js_json.classify(value);
  if (typeof jsonArr !== "object") {
    return Decco.error(undefined, "Not a variant", value);
  }
  if (jsonArr.TAG !== "JSONArray") {
    return Decco.error(undefined, "Not a variant", value);
  }
  var jsonArr$1 = jsonArr._0;
  if (jsonArr$1.length === 0) {
    return Decco.error(undefined, "Expected variant, found empty array", value);
  }
  var tagged = Js_array.map(Js_json.classify, jsonArr$1);
  var match = Belt_Array.getExn(tagged, 0);
  if (typeof match === "object" && match.TAG === "JSONString") {
    switch (match._0) {
      case "R10" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R10"
                  };
          }
      case "R2" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R2"
                  };
          }
      case "R3" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R3"
                  };
          }
      case "R4" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R4"
                  };
          }
      case "R5" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R5"
                  };
          }
      case "R6" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R6"
                  };
          }
      case "R7" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R7"
                  };
          }
      case "R8" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R8"
                  };
          }
      case "R9" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R9"
                  };
          }
      case "RA" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "RA"
                  };
          }
      case "RJ" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "RJ"
                  };
          }
      case "RK" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "RK"
                  };
          }
      case "RQ" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "RQ"
                  };
          }
      default:
        
    }
  }
  return Decco.error(undefined, "Invalid variant constructor", Belt_Array.getExn(jsonArr$1, 0));
}

function card_encode(value) {
  return Js_dict.fromArray([
              [
                "suit",
                suit_encode(value.suit)
              ],
              [
                "rank",
                rank_encode(value.rank)
              ]
            ]);
}

function card_decode(value) {
  var dict = Js_json.classify(value);
  if (typeof dict !== "object") {
    return Decco.error(undefined, "Not an object", value);
  }
  if (dict.TAG !== "JSONObject") {
    return Decco.error(undefined, "Not an object", value);
  }
  var dict$1 = dict._0;
  var suit = suit_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "suit"), null));
  if (suit.TAG === "Ok") {
    var rank = rank_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rank"), null));
    if (rank.TAG === "Ok") {
      return {
              TAG: "Ok",
              _0: Decco.unsafeAddFieldToObject("suit", suit._0, Decco.unsafeAddFieldToObject("rank", rank._0, {}))
            };
    }
    var e = rank._0;
    return {
            TAG: "Error",
            _0: {
              path: ".rank" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = suit._0;
  return {
          TAG: "Error",
          _0: {
            path: ".suit" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

var allRanks = [
  "RA",
  "R2",
  "R3",
  "R4",
  "R5",
  "R6",
  "R7",
  "R8",
  "R9",
  "R10",
  "RJ",
  "RQ",
  "RK"
];

var allSuits = [
  "Spades",
  "Hearts",
  "Diamonds",
  "Clubs"
];

function equals(a, b) {
  if (a.suit === b.suit) {
    return a.rank === b.rank;
  } else {
    return false;
  }
}

function isRed(card) {
  if (card.suit === "Hearts") {
    return true;
  } else {
    return card.suit === "Diamonds";
  }
}

function isBlack(card) {
  if (card.suit === "Spades") {
    return true;
  } else {
    return card.suit === "Clubs";
  }
}

function rankIsBelow(a, b) {
  var match = a.rank;
  var match$1 = b.rank;
  switch (match) {
    case "RA" :
        if (match$1 === "R2") {
          return true;
        } else {
          return false;
        }
    case "R2" :
        if (match$1 === "R3") {
          return true;
        } else {
          return false;
        }
    case "R3" :
        if (match$1 === "R4") {
          return true;
        } else {
          return false;
        }
    case "R4" :
        if (match$1 === "R5") {
          return true;
        } else {
          return false;
        }
    case "R5" :
        if (match$1 === "R6") {
          return true;
        } else {
          return false;
        }
    case "R6" :
        if (match$1 === "R7") {
          return true;
        } else {
          return false;
        }
    case "R7" :
        if (match$1 === "R8") {
          return true;
        } else {
          return false;
        }
    case "R8" :
        if (match$1 === "R9") {
          return true;
        } else {
          return false;
        }
    case "R9" :
        if (match$1 === "R10") {
          return true;
        } else {
          return false;
        }
    case "R10" :
        if (match$1 === "RJ") {
          return true;
        } else {
          return false;
        }
    case "RJ" :
        if (match$1 === "RQ") {
          return true;
        } else {
          return false;
        }
    case "RQ" :
        if (match$1 === "RK") {
          return true;
        } else {
          return false;
        }
    case "RK" :
        return false;
    
  }
}

function rankIsAbove(a, b) {
  var match = a.rank;
  var match$1 = b.rank;
  switch (match) {
    case "RA" :
        return false;
    case "R2" :
        if (match$1 === "RA") {
          return true;
        } else {
          return false;
        }
    case "R3" :
        if (match$1 === "R2") {
          return true;
        } else {
          return false;
        }
    case "R4" :
        if (match$1 === "R3") {
          return true;
        } else {
          return false;
        }
    case "R5" :
        if (match$1 === "R4") {
          return true;
        } else {
          return false;
        }
    case "R6" :
        if (match$1 === "R5") {
          return true;
        } else {
          return false;
        }
    case "R7" :
        if (match$1 === "R6") {
          return true;
        } else {
          return false;
        }
    case "R8" :
        if (match$1 === "R7") {
          return true;
        } else {
          return false;
        }
    case "R9" :
        if (match$1 === "R8") {
          return true;
        } else {
          return false;
        }
    case "R10" :
        if (match$1 === "R9") {
          return true;
        } else {
          return false;
        }
    case "RJ" :
        if (match$1 === "R10") {
          return true;
        } else {
          return false;
        }
    case "RQ" :
        if (match$1 === "RJ") {
          return true;
        } else {
          return false;
        }
    case "RK" :
        if (match$1 === "RQ") {
          return true;
        } else {
          return false;
        }
    
  }
}

function rankString(card) {
  var match = card.rank;
  switch (match) {
    case "RA" :
        return "A";
    case "R2" :
        return "2";
    case "R3" :
        return "3";
    case "R4" :
        return "4";
    case "R5" :
        return "5";
    case "R6" :
        return "6";
    case "R7" :
        return "7";
    case "R8" :
        return "8";
    case "R9" :
        return "9";
    case "R10" :
        return "10";
    case "RJ" :
        return "J";
    case "RQ" :
        return "Q";
    case "RK" :
        return "K";
    
  }
}

function stringToRank(s) {
  switch (s) {
    case "10" :
        return "R10";
    case "2" :
        return "R2";
    case "3" :
        return "R3";
    case "4" :
        return "R4";
    case "5" :
        return "R5";
    case "6" :
        return "R6";
    case "7" :
        return "R7";
    case "8" :
        return "R8";
    case "9" :
        return "R9";
    case "J" :
        return "RJ";
    case "K" :
        return "RK";
    case "Q" :
        return "RQ";
    default:
      return "RA";
  }
}

function stringToSuit(s) {
  switch (s) {
    case "♣" :
        return "Clubs";
    case "♥" :
        return "Hearts";
    case "♦" :
        return "Diamonds";
    default:
      return "Spades";
  }
}

function suitString(card) {
  var match = card.suit;
  switch (match) {
    case "Spades" :
        return "♠";
    case "Hearts" :
        return "♥";
    case "Diamonds" :
        return "♦";
    case "Clubs" :
        return "♣";
    
  }
}

function color(card) {
  var match = card.suit;
  switch (match) {
    case "Hearts" :
    case "Diamonds" :
        return "hsl(0 100% 44.31%)";
    case "Spades" :
    case "Clubs" :
        return "hsl(0 0% 0%)";
    
  }
}

function isOppositeColor(a, b) {
  return isRed(a) !== isRed(b);
}

function rotation(card) {
  var suitJitter = allSuits.findIndex(function (s) {
        return s === card.suit;
      }) - 2 | 0;
  var rankJitter = allRanks.findIndex(function (r) {
        return r === card.rank;
      }) % 4 - 2 | 0;
  return "rotate(" + (suitJitter + rankJitter | 0).toString() + "deg)";
}

var Card = {
  suit_encode: suit_encode,
  suit_decode: suit_decode,
  rank_encode: rank_encode,
  rank_decode: rank_decode,
  card_encode: card_encode,
  card_decode: card_decode,
  allRanks: allRanks,
  allSuits: allSuits,
  equals: equals,
  isRed: isRed,
  isBlack: isBlack,
  rankIsBelow: rankIsBelow,
  rankIsAbove: rankIsAbove,
  rankString: rankString,
  stringToRank: stringToRank,
  stringToSuit: stringToSuit,
  suitString: suitString,
  color: color,
  isOppositeColor: isOppositeColor,
  rotation: rotation
};

function getShuffledDeck() {
  return Core__Array.toShuffled(Core__Array.reduce(allRanks, [], (function (a, rank) {
                    return Core__Array.reduce(allSuits, a, (function (a2, suit) {
                                  return a2.concat([{
                                                suit: suit,
                                                rank: rank
                                              }]);
                                }));
                  })));
}

var shuffledDeck = getShuffledDeck();

var cardsData = [
  shuffledDeck.slice(0, 1),
  shuffledDeck.slice(1, 3),
  shuffledDeck.slice(3, 6),
  shuffledDeck.slice(6, 10),
  shuffledDeck.slice(10, 15),
  shuffledDeck.slice(15, 21),
  shuffledDeck.slice(21, 28)
];

function space_encode(value) {
  switch (value.TAG) {
    case "Pile" :
        return [
                "Pile",
                Decco.intToJson(value._0)
              ];
    case "Foundation" :
        return [
                "Foundation",
                Decco.intToJson(value._0)
              ];
    case "Card" :
        return [
                "Card",
                card_encode(value._0)
              ];
    
  }
}

function space_decode(value) {
  var jsonArr = Js_json.classify(value);
  if (typeof jsonArr !== "object") {
    return Decco.error(undefined, "Not a variant", value);
  }
  if (jsonArr.TAG !== "JSONArray") {
    return Decco.error(undefined, "Not a variant", value);
  }
  var jsonArr$1 = jsonArr._0;
  if (jsonArr$1.length === 0) {
    return Decco.error(undefined, "Expected variant, found empty array", value);
  }
  var tagged = Js_array.map(Js_json.classify, jsonArr$1);
  var match = Belt_Array.getExn(tagged, 0);
  if (typeof match === "object" && match.TAG === "JSONString") {
    switch (match._0) {
      case "Card" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0 = card_decode(Belt_Array.getExn(jsonArr$1, 1));
          if (v0.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "Card",
                      _0: v0._0
                    }
                  };
          }
          var e = v0._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
      case "Foundation" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0$1 = Decco.intFromJson(Belt_Array.getExn(jsonArr$1, 1));
          if (v0$1.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "Foundation",
                      _0: v0$1._0
                    }
                  };
          }
          var e$1 = v0$1._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e$1.path,
                    message: e$1.message,
                    value: e$1.value
                  }
                };
      case "Pile" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0$2 = Decco.intFromJson(Belt_Array.getExn(jsonArr$1, 1));
          if (v0$2.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "Pile",
                      _0: v0$2._0
                    }
                  };
          }
          var e$2 = v0$2._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e$2.path,
                    message: e$2.message,
                    value: e$2.value
                  }
                };
      default:
        
    }
  }
  return Decco.error(undefined, "Invalid variant constructor", Belt_Array.getExn(jsonArr$1, 0));
}

function spaceToString(space) {
  return JSON.stringify(space_encode(space));
}

function spaceFromElement(element) {
  return Core__Option.flatMap(element.space, (function (s) {
                var d = space_decode(JSON.parse(s));
                if (d.TAG === "Ok") {
                  return d._0;
                }
                
              }));
}

function parentFromElement(element) {
  return Core__Option.flatMap(element.parentSpace, (function (s) {
                var d = space_decode(JSON.parse(s));
                if (d.TAG === "Ok") {
                  return d._0;
                }
                
              }));
}

function Klondike(props) {
  var refs = React.useRef([]);
  var setRef = function (space, parent) {
    return function (element) {
      if (element === null || element === undefined) {
        return ;
      }
      element.space = JSON.stringify(space_encode(space));
      Core__Option.mapOr(parent, undefined, (function (parent) {
              element.parentSpace = JSON.stringify(space_encode(parent));
            }));
      refs.current.push(element);
    };
  };
  var dragCard = React.useRef(undefined);
  var offset = React.useRef([
        0,
        0
      ]);
  var applyToChildren = function (element, f) {
    var elementSpace = spaceFromElement(element);
    refs.current.forEach(function (el) {
          var match = parentFromElement(el);
          if (elementSpace === undefined) {
            return ;
          }
          switch (elementSpace.TAG) {
            case "Pile" :
            case "Foundation" :
                return ;
            case "Card" :
                if (match === undefined) {
                  return ;
                }
                switch (match.TAG) {
                  case "Pile" :
                  case "Foundation" :
                      return ;
                  case "Card" :
                      if (equals(match._0, elementSpace._0)) {
                        return f(el);
                      } else {
                        return ;
                      }
                  
                }
            
          }
        });
  };
  var move = function (element, left, top, leftOffset, topOffset) {
    element.style.left = left.toString() + "px";
    element.style.top = top.toString() + "px";
    applyToChildren(element, (function (childEl) {
            move(childEl, left + leftOffset | 0, top + topOffset | 0, leftOffset, topOffset);
          }));
  };
  var liftUp = function (element, zIndex) {
    element.style["z-index"] = zIndex.toString();
    applyToChildren(element, (function (childEl) {
            liftUp(childEl, zIndex + 1 | 0);
          }));
  };
  React.useEffect((function () {
          window.addEventListener("mousemove", (function ($$event) {
                  Core__Option.mapOr(dragCard.current, undefined, (function (dragCard) {
                          var match = offset.current;
                          var leftMove = $$event.clientX - match[0] | 0;
                          var topMove = $$event.clientY - match[1] | 0;
                          move(dragCard, leftMove, topMove, 0, 20);
                        }));
                }));
          window.addEventListener("mouseup", (function ($$event) {
                  dragCard.current = undefined;
                }));
        }), []);
  return JsxRuntime.jsxs("div", {
              children: [
                [
                    [],
                    [],
                    [],
                    []
                  ].map(function (param, i) {
                      return JsxRuntime.jsx("div", {
                                  ref: Caml_option.some(setRef({
                                            TAG: "Foundation",
                                            _0: i
                                          }, undefined)),
                                  className: "absolute bg-purple-500 rounded w-14 h-20",
                                  style: {
                                    left: Math.imul(i, 70).toString() + "px",
                                    top: "0px"
                                  }
                                }, JSON.stringify(space_encode({
                                          TAG: "Foundation",
                                          _0: i
                                        })));
                    }),
                [
                    [],
                    [],
                    [],
                    []
                  ].map(function (param, i) {
                      return JsxRuntime.jsx("div", {
                                  ref: Caml_option.some(setRef({
                                            TAG: "Pile",
                                            _0: i
                                          }, undefined)),
                                  className: "absolute bg-red-500 rounded w-14 h-20",
                                  style: {
                                    left: Math.imul(i, 70).toString() + "px",
                                    top: "100px"
                                  }
                                }, JSON.stringify(space_encode({
                                          TAG: "Pile",
                                          _0: i
                                        })));
                    }),
                cardsData.map(function (cardPile, i) {
                      return cardPile.map(function (card, j) {
                                  var parent = j === 0 ? ({
                                        TAG: "Pile",
                                        _0: i
                                      }) : ({
                                        TAG: "Card",
                                        _0: cardsData[i][j - 1 | 0]
                                      });
                                  var match = card.rank;
                                  var tmp;
                                  tmp = match === "R10" ? "tracking-[-0.1rem] w-4" : "w-3.5";
                                  return JsxRuntime.jsx("div", {
                                              children: JsxRuntime.jsx("div", {
                                                    children: JsxRuntime.jsxs("span", {
                                                          children: [
                                                            JsxRuntime.jsxs("span", {
                                                                  children: [
                                                                    JsxRuntime.jsx("span", {
                                                                          children: rankString(card),
                                                                          className: [
                                                                              "font-medium ",
                                                                              tmp
                                                                            ].join(" ")
                                                                        }),
                                                                    JsxRuntime.jsx("span", {
                                                                          children: suitString(card),
                                                                          className: "w-3.5 flex flex-row justify-center"
                                                                        })
                                                                  ],
                                                                  className: "flex flex-row"
                                                                }),
                                                            JsxRuntime.jsx("span", {
                                                                  children: suitString(card),
                                                                  className: "w-3.5 flex flex-row mt-0.5 -ml-0.5"
                                                                })
                                                          ],
                                                          className: "flex flex-col"
                                                        }),
                                                    className: [" border border-gray-300 rounded w-14 h-20 bg-white shadow-sm px-1 leading-none py-0.5 cursor-default"].join(" "),
                                                    style: {
                                                      color: color(card)
                                                    }
                                                  }),
                                              ref: Caml_option.some(setRef({
                                                        TAG: "Card",
                                                        _0: card
                                                      }, parent)),
                                              className: "absolute bg-blue-500 rounded w-14 h-20 border",
                                              style: {
                                                left: Math.imul(i, 70).toString() + "px",
                                                top: (100 + Math.imul(j, 20) | 0).toString() + "px",
                                                zIndex: (j + 1 | 0).toString()
                                              },
                                              onMouseDown: (function ($$event) {
                                                  dragCard.current = Caml_option.some($$event.currentTarget);
                                                  Core__Option.mapOr(dragCard.current, undefined, (function (d) {
                                                          liftUp(d, 1000);
                                                        }));
                                                  var rect = $$event.currentTarget.getBoundingClientRect();
                                                  offset.current = [
                                                    $$event.clientX - (rect.left | 0) | 0,
                                                    $$event.clientY - (rect.top | 0) | 0
                                                  ];
                                                })
                                            }, JSON.stringify(space_encode({
                                                      TAG: "Card",
                                                      _0: card
                                                    })));
                                });
                    })
              ],
              className: "relative"
            });
}

var make = Klondike;

export {
  Card ,
  getShuffledDeck ,
  shuffledDeck ,
  cardsData ,
  space_encode ,
  space_decode ,
  spaceToString ,
  spaceFromElement ,
  parentFromElement ,
  make ,
}
/* shuffledDeck Not a pure module */
