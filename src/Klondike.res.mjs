// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "./Card.res.mjs";
import * as Decco from "@rescript-labs/decco/src/Decco.res.mjs";
import * as React from "react";
import * as Common from "./Common.res.mjs";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as GameBase from "./GameBase.res.mjs";
import * as Js_array from "rescript/lib/es6/js_array.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

var shuffledDeck = Card.getShuffledDeck();

function space_encode(value) {
  if (typeof value !== "object") {
    if (value === "Waste") {
      return ["Waste"];
    } else {
      return ["Stock"];
    }
  }
  switch (value.TAG) {
    case "Card" :
        return [
                "Card",
                Card.card_encode(value._0)
              ];
    case "Foundation" :
        return [
                "Foundation",
                Decco.intToJson(value._0)
              ];
    case "Pile" :
        return [
                "Pile",
                Decco.intToJson(value._0)
              ];
    
  }
}

function space_decode(value) {
  var jsonArr = Js_json.classify(value);
  if (typeof jsonArr !== "object") {
    return Decco.error(undefined, "Not a variant", value);
  }
  if (jsonArr.TAG !== "JSONArray") {
    return Decco.error(undefined, "Not a variant", value);
  }
  var jsonArr$1 = jsonArr._0;
  if (jsonArr$1.length === 0) {
    return Decco.error(undefined, "Expected variant, found empty array", value);
  }
  var tagged = Js_array.map(Js_json.classify, jsonArr$1);
  var match = Belt_Array.getExn(tagged, 0);
  if (typeof match === "object" && match.TAG === "JSONString") {
    switch (match._0) {
      case "Card" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0 = Card.card_decode(Belt_Array.getExn(jsonArr$1, 1));
          if (v0.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "Card",
                      _0: v0._0
                    }
                  };
          }
          var e = v0._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
      case "Foundation" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0$1 = Decco.intFromJson(Belt_Array.getExn(jsonArr$1, 1));
          if (v0$1.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "Foundation",
                      _0: v0$1._0
                    }
                  };
          }
          var e$1 = v0$1._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e$1.path,
                    message: e$1.message,
                    value: e$1.value
                  }
                };
      case "Pile" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0$2 = Decco.intFromJson(Belt_Array.getExn(jsonArr$1, 1));
          if (v0$2.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "Pile",
                      _0: v0$2._0
                    }
                  };
          }
          var e$2 = v0$2._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e$2.path,
                    message: e$2.message,
                    value: e$2.value
                  }
                };
      case "Stock" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "Stock"
                  };
          }
      case "Waste" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "Waste"
                  };
          }
      default:
        
    }
  }
  return Decco.error(undefined, "Invalid variant constructor", Belt_Array.getExn(jsonArr$1, 0));
}

function getSpace(element) {
  var d = space_decode(JSON.parse(element.id));
  if (d.TAG === "Ok") {
    return d._0;
  }
  
}

function spaceToString(space) {
  return JSON.stringify(space_encode(space));
}

function initiateGame() {
  return {
          piles: [
            shuffledDeck.slice(0, 1),
            shuffledDeck.slice(1, 3),
            shuffledDeck.slice(3, 6),
            shuffledDeck.slice(6, 10),
            shuffledDeck.slice(10, 15),
            shuffledDeck.slice(15, 21),
            shuffledDeck.slice(21, 28)
          ],
          foundations: [
            [],
            [],
            [],
            []
          ],
          stock: shuffledDeck.slice(28),
          waste: [],
          gameEnded: false
        };
}

function getSpaceLocs(game) {
  var cards = {
    contents: []
  };
  var addToCards = function (card) {
    cards.contents = cards.contents.concat([card]);
  };
  Common.ArrayAux.forEach2(game.piles, (function (param, card, i, j) {
          addToCards([
                {
                  TAG: "Card",
                  _0: card
                },
                {
                  TAG: "Pile",
                  _0: i
                },
                {
                  x: 0,
                  y: Math.imul(j, 20),
                  z: j + 1 | 0
                }
              ]);
        }));
  Common.ArrayAux.forEach2(game.foundations, (function (param, card, i, j) {
          addToCards([
                {
                  TAG: "Card",
                  _0: card
                },
                {
                  TAG: "Foundation",
                  _0: i
                },
                {
                  x: 0,
                  y: 0,
                  z: j + 1 | 0
                }
              ]);
        }));
  game.stock.forEach(function (card, i) {
        addToCards([
              {
                TAG: "Card",
                _0: card
              },
              "Stock",
              {
                x: 0,
                y: 0,
                z: i + 1 | 0
              }
            ]);
      });
  game.waste.forEach(function (card, i) {
        addToCards([
              {
                TAG: "Card",
                _0: card
              },
              "Waste",
              {
                x: Math.imul(20, i),
                y: 0,
                z: i + 1 | 0
              }
            ]);
      });
  return cards.contents;
}

function baseSpace(dropCard, game) {
  var base = {
    contents: undefined
  };
  Common.ArrayAux.forEach2(game.piles, (function (param, card, i, param$1) {
          if (Caml_obj.equal(card, dropCard)) {
            base.contents = {
              TAG: "Pile",
              _0: i
            };
            return ;
          }
          
        }));
  Common.ArrayAux.forEach2(game.foundations, (function (param, card, i, param$1) {
          if (Caml_obj.equal(card, dropCard)) {
            base.contents = {
              TAG: "Foundation",
              _0: i
            };
            return ;
          }
          
        }));
  game.waste.forEach(function (card) {
        if (Caml_obj.equal(card, dropCard)) {
          base.contents = "Waste";
          return ;
        }
        
      });
  game.stock.forEach(function (card) {
        if (Caml_obj.equal(card, dropCard)) {
          base.contents = "Stock";
          return ;
        }
        
      });
  return base.contents;
}

function buildDragPile(card, game) {
  var dragPile = {
    contents: []
  };
  Common.ArrayAux.forEach2(game.piles, (function (pile, pileCard, param, j) {
          if (Caml_obj.equal(pileCard, card)) {
            dragPile.contents = pile.slice(j);
            return ;
          }
          
        }));
  Common.ArrayAux.forEach2(game.foundations, (function (pile, pileCard, param, j) {
          if (Caml_obj.equal(pileCard, card)) {
            dragPile.contents = pile.slice(j);
            return ;
          }
          
        }));
  game.waste.forEach(function (wasteCard) {
        if (Caml_obj.equal(wasteCard, card)) {
          dragPile.contents = [card];
          return ;
        }
        
      });
  return dragPile.contents;
}

function canDrag(space, game) {
  if (typeof space !== "object") {
    return false;
  }
  if (space.TAG !== "Card") {
    return false;
  }
  var card = space._0;
  var dragPile = buildDragPile(card, game);
  var match = baseSpace(card, game);
  var onTopIfNeeded;
  if (match !== undefined) {
    if (typeof match !== "object") {
      onTopIfNeeded = match === "Waste" ? Core__Option.mapOr(Common.ArrayAux.getLast(game.waste), false, (function (top) {
                return Caml_obj.equal(top, card);
              })) : false;
    } else {
      switch (match.TAG) {
        case "Card" :
            onTopIfNeeded = false;
            break;
        case "Foundation" :
            onTopIfNeeded = Core__Option.mapOr(Core__Option.flatMap(game.foundations[match._0], (function (stack) {
                        return Common.ArrayAux.getLast(stack);
                      })), false, (function (top) {
                    return Caml_obj.equal(top, card);
                  }));
            break;
        case "Pile" :
            onTopIfNeeded = true;
            break;
        
      }
    }
  } else {
    onTopIfNeeded = false;
  }
  var match$1 = Core__Array.reduce(dragPile.toReversed(), [
        true,
        undefined
      ], (function (param, onBottom) {
          if (!param[0]) {
            return [
                    false,
                    undefined
                  ];
          }
          var onTop = param[1];
          if (onTop !== undefined) {
            return [
                    Card.rankIsBelow(onTop, onBottom) && Card.color(onTop) !== Card.color(onBottom),
                    onBottom
                  ];
          } else {
            return [
                    true,
                    onBottom
                  ];
          }
        }));
  if (onTopIfNeeded) {
    return match$1[0];
  } else {
    return false;
  }
}

function canDrop(dragSpace, dropSpace, game) {
  if (typeof dragSpace !== "object") {
    return false;
  }
  if (dragSpace.TAG !== "Card") {
    return false;
  }
  var dragCard = dragSpace._0;
  var dragPile = buildDragPile(dragCard, game);
  var notInDragPile = Core__Option.isNone(dragPile.find(function (pilePiece) {
            return Caml_obj.equal({
                        TAG: "Card",
                        _0: pilePiece
                      }, dropSpace);
          }));
  var dropHasNoChildren;
  if (typeof dropSpace !== "object") {
    dropHasNoChildren = false;
  } else {
    switch (dropSpace.TAG) {
      case "Card" :
          dropHasNoChildren = buildDragPile(dropSpace._0, game).length < 2;
          break;
      case "Foundation" :
          dropHasNoChildren = game.foundations[dropSpace._0].length === 0;
          break;
      case "Pile" :
          dropHasNoChildren = game.piles[dropSpace._0].length === 0;
          break;
      
    }
  }
  var canBeParent;
  if (typeof dropSpace !== "object") {
    canBeParent = false;
  } else {
    switch (dropSpace.TAG) {
      case "Card" :
          var dropCard = dropSpace._0;
          var match = baseSpace(dropCard, game);
          if (match !== undefined && typeof match === "object") {
            switch (match.TAG) {
              case "Foundation" :
                  canBeParent = Card.rankIsBelow(dropCard, dragCard) && dragCard.suit === dropCard.suit;
                  break;
              case "Pile" :
                  canBeParent = Card.rankIsAbove(dropCard, dragCard) && Card.color(dragCard) !== Card.color(dropCard);
                  break;
              default:
                canBeParent = false;
            }
          } else {
            canBeParent = false;
          }
          break;
      case "Foundation" :
          canBeParent = dragCard.rank === "RA";
          break;
      case "Pile" :
          canBeParent = dragCard.rank === "RK";
          break;
      
    }
  }
  if (notInDragPile && dropHasNoChildren) {
    return canBeParent;
  } else {
    return false;
  }
}

function onDrop(dropOnSpace, dragSpace, game, setGame) {
  if (typeof dragSpace !== "object") {
    return ;
  }
  if (dragSpace.TAG !== "Card") {
    return ;
  }
  var dragPile = buildDragPile(dragSpace._0, game);
  var removeDragPile = function (x) {
    return x.filter(function (sCard) {
                return !dragPile.some(function (dCard) {
                            return Caml_obj.equal(sCard, dCard);
                          });
              });
  };
  setGame(function (game) {
        return {
                piles: game.piles.map(removeDragPile),
                foundations: game.foundations.map(removeDragPile),
                stock: removeDragPile(game.stock),
                waste: removeDragPile(game.waste),
                gameEnded: game.gameEnded
              };
      });
  if (typeof dropOnSpace !== "object") {
    return ;
  }
  switch (dropOnSpace.TAG) {
    case "Card" :
        var card = dropOnSpace._0;
        return setGame(function (game) {
                    return {
                            piles: game.piles.map(function (stack) {
                                  return Common.ArrayAux.insertAfter(stack, card, dragPile);
                                }),
                            foundations: game.foundations.map(function (stack) {
                                  return Common.ArrayAux.insertAfter(stack, card, dragPile);
                                }),
                            stock: game.stock,
                            waste: game.waste,
                            gameEnded: game.gameEnded
                          };
                  });
    case "Foundation" :
        var i = dropOnSpace._0;
        return setGame(function (game) {
                    return {
                            piles: game.piles,
                            foundations: Common.ArrayAux.update(game.foundations, i, (function (param) {
                                    return dragPile;
                                  })),
                            stock: game.stock,
                            waste: game.waste,
                            gameEnded: game.gameEnded
                          };
                  });
    case "Pile" :
        var i$1 = dropOnSpace._0;
        return setGame(function (game) {
                    return {
                            piles: Common.ArrayAux.update(game.piles, i$1, (function (param) {
                                    return dragPile;
                                  })),
                            foundations: game.foundations,
                            stock: game.stock,
                            waste: game.waste,
                            gameEnded: game.gameEnded
                          };
                  });
    
  }
}

function applyMoveToOthers(space, game, move) {
  if (typeof space !== "object") {
    return ;
  }
  if (space.TAG !== "Card") {
    return ;
  }
  var card = space._0;
  Common.ArrayAux.forEach2(game.foundations, (function (stack, sCard, param, j) {
          if (Caml_obj.equal(card, sCard)) {
            return Core__Option.mapOr(stack[j + 1 | 0], undefined, (function (x) {
                          move({
                                TAG: "Card",
                                _0: x
                              });
                        }));
          }
          
        }));
  Common.ArrayAux.forEach2(game.piles, (function (stack, sCard, param, j) {
          if (Caml_obj.equal(card, sCard)) {
            return Core__Option.mapOr(stack[j + 1 | 0], undefined, (function (x) {
                          move({
                                TAG: "Card",
                                _0: x
                              });
                        }));
          }
          
        }));
}

function autoProgress(setGame) {
  var newGame = {
    contents: undefined
  };
  setGame(function (game) {
        game.foundations.forEach(function (foundation, i) {
              var canMove = function (c) {
                var foundationCard = Common.ArrayAux.getLast(foundation);
                if (foundationCard !== undefined) {
                  if (Card.rankIsBelow(foundationCard, c)) {
                    return foundationCard.suit === c.suit;
                  } else {
                    return false;
                  }
                } else {
                  return c.rank === "RA";
                }
              };
              Core__Option.mapOr(Common.ArrayAux.getLast(game.waste), undefined, (function (wasteCard) {
                      if (Core__Option.isNone(newGame.contents) && canMove(wasteCard)) {
                        newGame.contents = {
                          piles: game.piles,
                          foundations: Common.ArrayAux.update(game.foundations, i, (function (f) {
                                  return f.concat([wasteCard]);
                                })),
                          stock: game.stock,
                          waste: Common.ArrayAux.removeLast(game.waste),
                          gameEnded: game.gameEnded
                        };
                        return ;
                      }
                      
                    }));
              game.piles.forEach(function (pile, j) {
                    Core__Option.mapOr(Common.ArrayAux.getLast(pile), undefined, (function (pileCard) {
                            if (Core__Option.isNone(newGame.contents) && canMove(pileCard)) {
                              newGame.contents = {
                                piles: Common.ArrayAux.update(game.piles, j, (function (p) {
                                        return Common.ArrayAux.removeLast(p);
                                      })),
                                foundations: Common.ArrayAux.update(game.foundations, i, (function (f) {
                                        return f.concat([pileCard]);
                                      })),
                                stock: game.stock,
                                waste: game.waste,
                                gameEnded: game.gameEnded
                              };
                              return ;
                            }
                            
                          }));
                  });
            });
        return Core__Option.getOr(newGame.contents, game);
      });
  return Core__Option.isSome(newGame.contents);
}

async function dealToWaste(setGame, moveToState, autoProgress) {
  var f = function (param) {
    setGame(function (game) {
          return {
                  piles: game.piles,
                  foundations: game.foundations,
                  stock: game.stock.slice(0, game.stock.length - 1 | 0),
                  waste: game.waste.concat(game.stock.slice(game.stock.length - 1 | 0)),
                  gameEnded: game.gameEnded
                };
        });
    moveToState();
  };
  await Common.numInterval(f, 400, 3);
  return autoProgress();
}

function restock(setGame, moveToState) {
  setGame(function (game) {
        return {
                piles: game.piles,
                foundations: game.foundations,
                stock: game.waste,
                waste: game.stock,
                gameEnded: game.gameEnded
              };
      });
  return moveToState();
}

var Custom = {
  dealToWaste: dealToWaste,
  restock: restock
};

function Klondike$GameRules$Board(props) {
  var game = props.game;
  var autoProgress = props.autoProgress;
  var moveToState = props.moveToState;
  var setGame = props.setGame;
  var setRef = props.setRef;
  return JsxRuntime.jsxs(React.Fragment, {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              ref: Caml_option.some(setRef("Stock")),
                              className: " bg-blue-200 rounded w-14 h-20",
                              id: JSON.stringify(space_encode("Stock")),
                              style: {
                                zIndex: "53"
                              },
                              onClick: (function (param) {
                                  if (game.stock.length === 0) {
                                    return restock(setGame, moveToState);
                                  } else {
                                    dealToWaste(setGame, moveToState, autoProgress);
                                    return ;
                                  }
                                })
                            }, JSON.stringify(space_encode("Stock"))),
                        JsxRuntime.jsx("div", {
                              ref: Caml_option.some(setRef("Waste")),
                              className: " w-14 h-20",
                              id: JSON.stringify(space_encode("Waste"))
                            }, JSON.stringify(space_encode("Waste")))
                      ],
                      className: "flex flex-row gap-3"
                    }),
                JsxRuntime.jsx("div", {
                      children: [
                          [],
                          [],
                          [],
                          []
                        ].map(function (param, i) {
                            return JsxRuntime.jsx("div", {
                                        ref: Caml_option.some(setRef({
                                                  TAG: "Foundation",
                                                  _0: i
                                                })),
                                        className: " border border-slate-200 bg-slate-100 rounded w-14 h-20",
                                        id: JSON.stringify(space_encode({
                                                  TAG: "Foundation",
                                                  _0: i
                                                }))
                                      }, JSON.stringify(space_encode({
                                                TAG: "Foundation",
                                                _0: i
                                              })));
                          }),
                      className: "flex flex-row gap-3 mt-5"
                    }),
                JsxRuntime.jsx("div", {
                      children: [
                          [],
                          [],
                          [],
                          [],
                          [],
                          [],
                          []
                        ].map(function (param, i) {
                            return JsxRuntime.jsx("div", {
                                        ref: Caml_option.some(setRef({
                                                  TAG: "Pile",
                                                  _0: i
                                                })),
                                        className: " border border-slate-200 bg-slate-100  rounded w-14 h-20",
                                        id: JSON.stringify(space_encode({
                                                  TAG: "Pile",
                                                  _0: i
                                                }))
                                      }, JSON.stringify(space_encode({
                                                TAG: "Pile",
                                                _0: i
                                              })));
                          }),
                      className: "flex flex-row gap-3 mt-5"
                    })
              ]
            });
}

var Board = {
  make: Klondike$GameRules$Board
};

function Klondike$GameRules$AllCards(props) {
  var onMouseDown = props.onMouseDown;
  var setRef = props.setRef;
  return JsxRuntime.jsx(React.Fragment, {
              children: shuffledDeck.map(function (card) {
                    return JsxRuntime.jsx(Card.Display.make, {
                                card: card,
                                id: JSON.stringify(space_encode({
                                          TAG: "Card",
                                          _0: card
                                        })),
                                cardRef: setRef({
                                      TAG: "Card",
                                      _0: card
                                    }),
                                onMouseDown: onMouseDown
                              }, JSON.stringify(space_encode({
                                        TAG: "Card",
                                        _0: card
                                      })));
                  })
            });
}

var AllCards = {
  make: Klondike$GameRules$AllCards
};

var GameRules = {
  shuffledDeck: shuffledDeck,
  space_encode: space_encode,
  space_decode: space_decode,
  getSpace: getSpace,
  spaceToString: spaceToString,
  initiateGame: initiateGame,
  getSpaceLocs: getSpaceLocs,
  baseSpace: baseSpace,
  buildDragPile: buildDragPile,
  canDrag: canDrag,
  canDrop: canDrop,
  onDrop: onDrop,
  applyMoveToOthers: applyMoveToOthers,
  autoProgress: autoProgress,
  Custom: Custom,
  Board: Board,
  AllCards: AllCards
};

var Game = GameBase.GameBase({
      getSpace: getSpace,
      spaceToString: spaceToString,
      initiateGame: initiateGame,
      getSpaceLocs: getSpaceLocs,
      applyMoveToOthers: applyMoveToOthers,
      canDrag: canDrag,
      canDrop: canDrop,
      onDrop: onDrop,
      autoProgress: autoProgress,
      Board: Board,
      AllCards: AllCards
    });

export {
  GameRules ,
  Game ,
}
/* shuffledDeck Not a pure module */
