// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

var allRanks = [
  "RA",
  "R2",
  "R3",
  "R4",
  "R5",
  "R6",
  "R7",
  "R8",
  "R9",
  "R10",
  "RJ",
  "RQ",
  "RK"
];

var allSuits = [
  "Spades",
  "Hearts",
  "Diamonds",
  "Clubs"
];

function equals(a, b) {
  if (a.suit === b.suit) {
    return a.rank === b.rank;
  } else {
    return false;
  }
}

function isRed(card) {
  if (card.suit === "Hearts") {
    return true;
  } else {
    return card.suit === "Diamonds";
  }
}

function isBlack(card) {
  if (card.suit === "Spades") {
    return true;
  } else {
    return card.suit === "Clubs";
  }
}

function rankIsBelow(a, b) {
  var match = a.rank;
  var match$1 = b.rank;
  switch (match) {
    case "RA" :
        if (match$1 === "R2") {
          return true;
        } else {
          return false;
        }
    case "R2" :
        if (match$1 === "R3") {
          return true;
        } else {
          return false;
        }
    case "R3" :
        if (match$1 === "R4") {
          return true;
        } else {
          return false;
        }
    case "R4" :
        if (match$1 === "R5") {
          return true;
        } else {
          return false;
        }
    case "R5" :
        if (match$1 === "R6") {
          return true;
        } else {
          return false;
        }
    case "R6" :
        if (match$1 === "R7") {
          return true;
        } else {
          return false;
        }
    case "R7" :
        if (match$1 === "R8") {
          return true;
        } else {
          return false;
        }
    case "R8" :
        if (match$1 === "R9") {
          return true;
        } else {
          return false;
        }
    case "R9" :
        if (match$1 === "R10") {
          return true;
        } else {
          return false;
        }
    case "R10" :
        if (match$1 === "RJ") {
          return true;
        } else {
          return false;
        }
    case "RJ" :
        if (match$1 === "RQ") {
          return true;
        } else {
          return false;
        }
    case "RQ" :
        if (match$1 === "RK") {
          return true;
        } else {
          return false;
        }
    case "RK" :
        return false;
    
  }
}

function rankIsAbove(a, b) {
  var match = a.rank;
  var match$1 = b.rank;
  switch (match) {
    case "RA" :
        return false;
    case "R2" :
        if (match$1 === "RA") {
          return true;
        } else {
          return false;
        }
    case "R3" :
        if (match$1 === "R2") {
          return true;
        } else {
          return false;
        }
    case "R4" :
        if (match$1 === "R3") {
          return true;
        } else {
          return false;
        }
    case "R5" :
        if (match$1 === "R4") {
          return true;
        } else {
          return false;
        }
    case "R6" :
        if (match$1 === "R5") {
          return true;
        } else {
          return false;
        }
    case "R7" :
        if (match$1 === "R6") {
          return true;
        } else {
          return false;
        }
    case "R8" :
        if (match$1 === "R7") {
          return true;
        } else {
          return false;
        }
    case "R9" :
        if (match$1 === "R8") {
          return true;
        } else {
          return false;
        }
    case "R10" :
        if (match$1 === "R9") {
          return true;
        } else {
          return false;
        }
    case "RJ" :
        if (match$1 === "R10") {
          return true;
        } else {
          return false;
        }
    case "RQ" :
        if (match$1 === "RJ") {
          return true;
        } else {
          return false;
        }
    case "RK" :
        if (match$1 === "RQ") {
          return true;
        } else {
          return false;
        }
    
  }
}

function rankString(card) {
  var match = card.rank;
  switch (match) {
    case "RA" :
        return "A";
    case "R2" :
        return "2";
    case "R3" :
        return "3";
    case "R4" :
        return "4";
    case "R5" :
        return "5";
    case "R6" :
        return "6";
    case "R7" :
        return "7";
    case "R8" :
        return "8";
    case "R9" :
        return "9";
    case "R10" :
        return "10";
    case "RJ" :
        return "J";
    case "RQ" :
        return "Q";
    case "RK" :
        return "K";
    
  }
}

function stringToRank(s) {
  switch (s) {
    case "10" :
        return "R10";
    case "2" :
        return "R2";
    case "3" :
        return "R3";
    case "4" :
        return "R4";
    case "5" :
        return "R5";
    case "6" :
        return "R6";
    case "7" :
        return "R7";
    case "8" :
        return "R8";
    case "9" :
        return "R9";
    case "J" :
        return "RJ";
    case "K" :
        return "RK";
    case "Q" :
        return "RQ";
    default:
      return "RA";
  }
}

function stringToSuit(s) {
  switch (s) {
    case "♣" :
        return "Clubs";
    case "♥" :
        return "Hearts";
    case "♦" :
        return "Diamonds";
    default:
      return "Spades";
  }
}

function suitString(card) {
  var match = card.suit;
  switch (match) {
    case "Spades" :
        return "♠";
    case "Hearts" :
        return "♥";
    case "Diamonds" :
        return "♦";
    case "Clubs" :
        return "♣";
    
  }
}

function display(card) {
  var match = card.rank;
  var tmp;
  tmp = match === "R10" ? "tracking-[-0.1rem] w-4" : "w-3.5";
  return JsxRuntime.jsxs("span", {
              children: [
                JsxRuntime.jsxs("span", {
                      children: [
                        JsxRuntime.jsx("span", {
                              children: rankString(card),
                              className: [
                                  "font-medium ",
                                  tmp
                                ].join(" ")
                            }),
                        JsxRuntime.jsx("span", {
                              children: suitString(card),
                              className: "w-3.5 flex flex-row justify-center"
                            })
                      ],
                      className: "flex flex-row"
                    }),
                JsxRuntime.jsx("span", {
                      children: suitString(card),
                      className: "w-3.5 flex flex-row mt-0.5 -ml-0.5"
                    })
              ],
              className: "flex flex-col"
            });
}

function color(card) {
  var match = card.suit;
  switch (match) {
    case "Hearts" :
    case "Diamonds" :
        return "hsl(0 100% 44.31%)";
    case "Spades" :
    case "Clubs" :
        return "hsl(0 0% 0%)";
    
  }
}

function id(card) {
  return rankString(card) + "-" + suitString(card);
}

function fromId(id) {
  return {
          suit: stringToSuit(id.split("-")[1]),
          rank: stringToRank(id.split("-")[0])
        };
}

function isOppositeColor(a, b) {
  return isRed(a) !== isRed(b);
}

function rotation(card) {
  var suitJitter = allSuits.findIndex(function (s) {
        return s === card.suit;
      }) - 2 | 0;
  var rankJitter = allRanks.findIndex(function (r) {
        return r === card.rank;
      }) % 4 - 2 | 0;
  return "rotate(" + (suitJitter + rankJitter | 0).toString() + "deg)";
}

var Card = {
  allRanks: allRanks,
  allSuits: allSuits,
  equals: equals,
  isRed: isRed,
  isBlack: isBlack,
  rankIsBelow: rankIsBelow,
  rankIsAbove: rankIsAbove,
  rankString: rankString,
  stringToRank: stringToRank,
  stringToSuit: stringToSuit,
  suitString: suitString,
  display: display,
  color: color,
  id: id,
  fromId: fromId,
  isOppositeColor: isOppositeColor,
  rotation: rotation
};

function getShuffledDeck() {
  return Core__Array.toShuffled(Core__Array.reduce(allRanks, [], (function (a, rank) {
                    return Core__Array.reduce(allSuits, a, (function (a2, suit) {
                                  return a2.concat([{
                                                suit: suit,
                                                rank: rank
                                              }]);
                                }));
                  })));
}

var shuffledDeck = getShuffledDeck();

var cardsData = [
  shuffledDeck.slice(0, 1),
  shuffledDeck.slice(1, 3),
  shuffledDeck.slice(3, 6),
  shuffledDeck.slice(6, 10),
  shuffledDeck.slice(10, 15),
  shuffledDeck.slice(15, 21),
  shuffledDeck.slice(21, 28)
];

function Klondike(props) {
  var refs = React.useRef([]);
  var setRef = function (element) {
    refs.current.push(element);
  };
  return JsxRuntime.jsxs("div", {
              children: [
                [
                    [],
                    [],
                    [],
                    []
                  ].map(function (param, i) {
                      return JsxRuntime.jsx("div", {
                                  children: "F",
                                  ref: Caml_option.some(setRef),
                                  className: "absolute bg-purple-500 rounded w-14 h-20",
                                  style: {
                                    left: Math.imul(i, 70).toString() + "px",
                                    top: "0px"
                                  }
                                });
                    }),
                [
                    [],
                    [],
                    [],
                    []
                  ].map(function (param, i) {
                      return JsxRuntime.jsx("div", {
                                  children: "P",
                                  ref: Caml_option.some(setRef),
                                  className: "absolute bg-red-500 rounded w-14 h-20",
                                  style: {
                                    left: Math.imul(i, 70).toString() + "px",
                                    top: "100px"
                                  }
                                });
                    }),
                cardsData.map(function (cardPile, i) {
                      return cardPile.map(function (card, j) {
                                  var match = card.rank;
                                  var tmp;
                                  tmp = match === "R10" ? "tracking-[-0.1rem] w-4" : "w-3.5";
                                  return JsxRuntime.jsx("div", {
                                              children: JsxRuntime.jsx("div", {
                                                    children: JsxRuntime.jsxs("span", {
                                                          children: [
                                                            JsxRuntime.jsxs("span", {
                                                                  children: [
                                                                    JsxRuntime.jsx("span", {
                                                                          children: rankString(card),
                                                                          className: [
                                                                              "font-medium ",
                                                                              tmp
                                                                            ].join(" ")
                                                                        }),
                                                                    JsxRuntime.jsx("span", {
                                                                          children: suitString(card),
                                                                          className: "w-3.5 flex flex-row justify-center"
                                                                        })
                                                                  ],
                                                                  className: "flex flex-row"
                                                                }),
                                                            JsxRuntime.jsx("span", {
                                                                  children: suitString(card),
                                                                  className: "w-3.5 flex flex-row mt-0.5 -ml-0.5"
                                                                })
                                                          ],
                                                          className: "flex flex-col"
                                                        }),
                                                    className: [" border border-gray-300 rounded w-14 h-20 bg-white shadow-sm px-1 leading-none py-0.5 cursor-default"].join(" "),
                                                    style: {
                                                      color: color(card)
                                                    }
                                                  }),
                                              ref: Caml_option.some(setRef),
                                              className: "absolute bg-blue-500 rounded w-14 h-20 border",
                                              style: {
                                                left: Math.imul(i, 70).toString() + "px",
                                                top: (100 + Math.imul(j, 20) | 0).toString() + "px"
                                              }
                                            });
                                });
                    })
              ],
              className: "relative p-5"
            });
}

var make = Klondike;

export {
  Card ,
  getShuffledDeck ,
  shuffledDeck ,
  cardsData ,
  make ,
}
/* shuffledDeck Not a pure module */
