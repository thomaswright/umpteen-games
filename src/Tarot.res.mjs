// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Decco from "@rescript-labs/decco/src/Decco.res.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Js_array from "rescript/lib/es6/js_array.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function rank_encode(value) {
  switch (value) {
    case "R0" :
        return ["R0"];
    case "R1" :
        return ["R1"];
    case "R2" :
        return ["R2"];
    case "R3" :
        return ["R3"];
    case "R4" :
        return ["R4"];
    case "R5" :
        return ["R5"];
    case "R6" :
        return ["R6"];
    case "R7" :
        return ["R7"];
    case "R8" :
        return ["R8"];
    case "R9" :
        return ["R9"];
    case "R10" :
        return ["R10"];
    case "R11" :
        return ["R11"];
    case "R12" :
        return ["R12"];
    case "R13" :
        return ["R13"];
    case "R14" :
        return ["R14"];
    case "R15" :
        return ["R15"];
    case "R16" :
        return ["R16"];
    case "R17" :
        return ["R17"];
    case "R18" :
        return ["R18"];
    case "R19" :
        return ["R19"];
    case "R20" :
        return ["R20"];
    case "R21" :
        return ["R21"];
    
  }
}

function rank_decode(value) {
  var jsonArr = Js_json.classify(value);
  if (typeof jsonArr !== "object") {
    return Decco.error(undefined, "Not a variant", value);
  }
  if (jsonArr.TAG !== "JSONArray") {
    return Decco.error(undefined, "Not a variant", value);
  }
  var jsonArr$1 = jsonArr._0;
  if (jsonArr$1.length === 0) {
    return Decco.error(undefined, "Expected variant, found empty array", value);
  }
  var tagged = Js_array.map(Js_json.classify, jsonArr$1);
  var match = Belt_Array.getExn(tagged, 0);
  if (typeof match === "object" && match.TAG === "JSONString") {
    switch (match._0) {
      case "R0" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R0"
                  };
          }
      case "R1" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R1"
                  };
          }
      case "R10" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R10"
                  };
          }
      case "R11" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R11"
                  };
          }
      case "R12" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R12"
                  };
          }
      case "R13" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R13"
                  };
          }
      case "R14" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R14"
                  };
          }
      case "R15" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R15"
                  };
          }
      case "R16" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R16"
                  };
          }
      case "R17" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R17"
                  };
          }
      case "R18" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R18"
                  };
          }
      case "R19" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R19"
                  };
          }
      case "R2" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R2"
                  };
          }
      case "R20" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R20"
                  };
          }
      case "R21" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R21"
                  };
          }
      case "R3" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R3"
                  };
          }
      case "R4" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R4"
                  };
          }
      case "R5" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R5"
                  };
          }
      case "R6" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R6"
                  };
          }
      case "R7" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R7"
                  };
          }
      case "R8" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R8"
                  };
          }
      case "R9" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "R9"
                  };
          }
      default:
        
    }
  }
  return Decco.error(undefined, "Invalid variant constructor", Belt_Array.getExn(jsonArr$1, 0));
}

function card_encode(value) {
  return Js_dict.fromArray([
              [
                "rank",
                rank_encode(value.rank)
              ],
              [
                "deck",
                Decco.intToJson(value.deck)
              ]
            ]);
}

function card_decode(value) {
  var dict = Js_json.classify(value);
  if (typeof dict !== "object") {
    return Decco.error(undefined, "Not an object", value);
  }
  if (dict.TAG !== "JSONObject") {
    return Decco.error(undefined, "Not an object", value);
  }
  var dict$1 = dict._0;
  var rank = rank_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rank"), null));
  if (rank.TAG === "Ok") {
    var deck = Decco.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "deck"), null));
    if (deck.TAG === "Ok") {
      return {
              TAG: "Ok",
              _0: Decco.unsafeAddFieldToObject("rank", rank._0, Decco.unsafeAddFieldToObject("deck", deck._0, {}))
            };
    }
    var e = deck._0;
    return {
            TAG: "Error",
            _0: {
              path: ".deck" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = rank._0;
  return {
          TAG: "Error",
          _0: {
            path: ".rank" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

var allRanks = [
  "R0",
  "R1",
  "R2",
  "R3",
  "R4",
  "R5",
  "R6",
  "R7",
  "R8",
  "R9",
  "R10",
  "R11",
  "R12",
  "R13",
  "R14",
  "R15",
  "R16",
  "R17",
  "R18",
  "R19",
  "R20",
  "R21"
];

function equals(a, b) {
  return a.rank === b.rank;
}

function rankIsBelow(a, b) {
  return allRanks.findIndex(function (x) {
              return x === a.rank;
            }) === (allRanks.findIndex(function (x) {
                return x === b.rank;
              }) - 1 | 0);
}

function rankIsAbove(a, b) {
  return allRanks.findIndex(function (x) {
              return x === a.rank;
            }) === (allRanks.findIndex(function (x) {
                return x === b.rank;
              }) + 1 | 0);
}

function rankIsAdjacent(a, b) {
  if (rankIsBelow(a, b)) {
    return true;
  } else {
    return rankIsAbove(a, b);
  }
}

function rankString(card) {
  return card.rank;
}

function stringToRank(s) {
  return s;
}

function toString(card) {
  return JSON.stringify(card_encode(card));
}

function displayRank(card) {
  var match = card.rank;
  switch (match) {
    case "R0" :
        return "0";
    case "R1" :
        return "1";
    case "R2" :
        return "2";
    case "R3" :
        return "3";
    case "R4" :
        return "4";
    case "R5" :
        return "5";
    case "R6" :
        return "6";
    case "R7" :
        return "7";
    case "R8" :
        return "8";
    case "R9" :
        return "9";
    case "R10" :
        return "10";
    case "R11" :
        return "11";
    case "R12" :
        return "12";
    case "R13" :
        return "13";
    case "R14" :
        return "14";
    case "R15" :
        return "15";
    case "R16" :
        return "16";
    case "R17" :
        return "17";
    case "R18" :
        return "18";
    case "R19" :
        return "19";
    case "R20" :
        return "20";
    case "R21" :
        return "21";
    
  }
}

function rotation(card) {
  var rankJitter = allRanks.findIndex(function (r) {
        return r === card.rank;
      }) % 4 - 2 | 0;
  return "rotate(" + rankJitter.toString() + "deg)";
}

function Tarot$Display(props) {
  var card = props.card;
  var match = card.rank;
  var tmp;
  tmp = match === "R10" ? "tracking-[-0.1rem] w-4" : "w-3.5";
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx("div", {
                    children: JsxRuntime.jsx("span", {
                          children: JsxRuntime.jsx("span", {
                                children: JsxRuntime.jsx("span", {
                                      children: displayRank(card),
                                      className: [
                                          "font-medium ",
                                          tmp
                                        ].join(" ")
                                    }),
                                className: "flex flex-row"
                              }),
                          className: "flex flex-col"
                        }),
                    className: [" border border-gray-300 rounded w-14 h-20 bg-black shadow-sm px-1 leading-none py-0.5 cursor-default"].join(" "),
                    style: {
                      color: "white"
                    }
                  }),
              ref: Caml_option.some(props.cardRef),
              className: "absolute w-14 h-20 select-none",
              id: props.id,
              onMouseDown: props.onMouseDown
            });
}

var Display = {
  make: Tarot$Display
};

function getDeck(deck) {
  return Core__Array.reduce(allRanks, [], (function (a, rank) {
                return a.concat([{
                              rank: rank,
                              deck: deck
                            }]);
              }));
}

export {
  rank_encode ,
  rank_decode ,
  card_encode ,
  card_decode ,
  allRanks ,
  equals ,
  rankIsBelow ,
  rankIsAbove ,
  rankIsAdjacent ,
  rankString ,
  stringToRank ,
  toString ,
  displayRank ,
  rotation ,
  Display ,
  getDeck ,
}
/* react/jsx-runtime Not a pure module */
