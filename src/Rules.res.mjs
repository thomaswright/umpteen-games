// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "./Card.res.mjs";
import * as Common from "./Common.res.mjs";
import * as GameCommons from "./GameCommons.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";

function freeBaseRules(i) {
  return {
          droppedUpon: (function (game, dragPile) {
              var noChildren = Core__Option.isNone(game.free[i]);
              if (noChildren && dragPile.length === 1) {
                return {
                        tableau: game.tableau,
                        foundations: game.foundations,
                        foundations2: game.foundations2,
                        stock: game.stock,
                        waste: game.waste,
                        free: Common.ArrayAux.update(game.free, i, (function (param) {
                                return dragPile[0];
                              }))
                      };
              }
              
            }),
          autoProgress: "DoNothing",
          onClick: (function (param) {
              
            })
        };
}

function freeRules(card, i) {
  return {
          locationAdjustment: {
            x: 0,
            y: 0,
            z: 1
          },
          baseSpace: {
            TAG: "Free",
            _0: i
          },
          dragPile: (function () {
              return [card];
            }),
          autoProgress: (function () {
              return {
                      TAG: "Send",
                      _0: [card]
                    };
            }),
          droppedUpon: (function (_game, _dragPile) {
              
            }),
          onStateChange: (function (element) {
              Card.showOrHide(card, element);
            }),
          onClick: (function (param) {
              
            })
        };
}

var FreeCell = {
  freeBaseRules: freeBaseRules,
  freeRules: freeRules
};

function stockRules(_game, _card, i, j) {
  return {
          locationAdjustment: {
            x: Math.imul(i, 20),
            y: 0,
            z: (Math.imul(i, 10) + j | 0) + 1 | 0
          },
          baseSpace: "Stock",
          dragPile: (function () {
              
            }),
          autoProgress: (function () {
              return "DoNothing";
            }),
          droppedUpon: (function (_game, _dragPile) {
              
            }),
          onStateChange: (function (element) {
              Card.hide(element);
            }),
          onClick: (function (game) {
              return Core__Option.map(Common.ArrayAux.getLast(game.stock), (function (stockGroup) {
                            return {
                                    tableau: GameCommons.flipLastUp(game.tableau.map(function (pile, i) {
                                              return Core__Option.mapOr(stockGroup[i], pile, (function (v) {
                                                            return pile.concat([v]);
                                                          }));
                                            })),
                                    foundations: game.foundations,
                                    foundations2: game.foundations2,
                                    stock: game.stock.slice(0, game.stock.length - 1 | 0),
                                    waste: game.waste,
                                    free: game.free
                                  };
                          }));
            })
        };
}

var DealAll = {
  stockRules: stockRules
};

function stackedWasteRules(game, card, i) {
  return {
          locationAdjustment: {
            x: 0,
            y: 0,
            z: i + 1 | 0
          },
          baseSpace: "Waste",
          dragPile: (function () {
              if (i === (game.waste.length - 1 | 0)) {
                return [card];
              }
              
            }),
          autoProgress: (function () {
              return "DoNothing";
            }),
          droppedUpon: (function (param, param$1) {
              
            }),
          onStateChange: (function (element) {
              Card.showOrHide(card, element);
            }),
          onClick: (function (param) {
              
            })
        };
}

function fannedWasteRules(game, card, i) {
  return {
          locationAdjustment: {
            x: Math.imul(20, i),
            y: 0,
            z: i + 1 | 0
          },
          baseSpace: "Waste",
          dragPile: (function () {
              if (i === (game.waste.length - 1 | 0)) {
                return [card];
              }
              
            }),
          autoProgress: (function () {
              return "DoNothing";
            }),
          droppedUpon: (function (param, param$1) {
              
            }),
          onStateChange: (function (element) {
              Card.showOrHide(card, element);
            }),
          onClick: (function (param) {
              
            })
        };
}

function stockRules$1(_game, card, _i, j) {
  return {
          locationAdjustment: {
            x: 0,
            y: 0,
            z: j + 1 | 0
          },
          baseSpace: "Stock",
          dragPile: (function () {
              
            }),
          autoProgress: (function () {
              return "DoNothing";
            }),
          droppedUpon: (function (param, param$1) {
              
            }),
          onStateChange: (function (element) {
              Card.showOrHide(card, element);
            }),
          onClick: (function (game) {
              var realStock = game.stock[0];
              return {
                      tableau: game.tableau,
                      foundations: game.foundations,
                      foundations2: game.foundations2,
                      stock: Common.ArrayAux.update(game.stock, 0, (function (v) {
                              return v.slice(0, realStock.length - 1 | 0);
                            })),
                      waste: game.waste.concat(Card.showAfter(realStock.slice(realStock.length - 1 | 0), 0)),
                      free: game.free
                    };
            })
        };
}

function stockBaseRules() {
  return {
          droppedUpon: (function (_game, _dragPile) {
              
            }),
          autoProgress: "DoNothing",
          onClick: (function (game) {
              return {
                      tableau: game.tableau,
                      foundations: game.foundations,
                      foundations2: game.foundations2,
                      stock: [Card.hideAfter(game.waste.toReversed(), 0)],
                      waste: [],
                      free: game.free
                    };
            })
        };
}

var WasteRotation = {
  stackedWasteRules: stackedWasteRules,
  fannedWasteRules: fannedWasteRules,
  stockRules: stockRules$1,
  stockBaseRules: stockBaseRules
};

function foundationBaseRules(param) {
  return {
          droppedUpon: (function (_game, _dragPile) {
              
            }),
          autoProgress: "DoNothing",
          onClick: (function (param) {
              
            })
        };
}

function foundationRules(_game, _pile, card, i, j) {
  return {
          locationAdjustment: {
            x: 0,
            y: 0,
            z: j + 1 | 0
          },
          baseSpace: {
            TAG: "Foundation",
            _0: i
          },
          dragPile: (function () {
              
            }),
          autoProgress: (function () {
              return "DoNothing";
            }),
          droppedUpon: (function (_game, _dragPile) {
              
            }),
          onStateChange: (function (element) {
              Card.showOrHide(card, element);
            }),
          onClick: (function (param) {
              
            })
        };
}

var Neutral = {
  foundationBaseRules: foundationBaseRules,
  foundationRules: foundationRules
};

export {
  FreeCell ,
  DealAll ,
  WasteRotation ,
  Neutral ,
}
/* Card Not a pure module */
