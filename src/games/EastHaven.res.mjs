// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../Card.res.mjs";
import * as React from "react";
import * as Common from "../Common.res.mjs";
import * as Packer from "./Packer.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

var Base = Packer.Make({
      spec: {
        drop: "AltSuit",
        drag: "AltSuit",
        size: "AnySize",
        depot: "AnyDepot",
        foundation: "ByOne"
      }
    });

function flipLastUp(piles) {
  return piles.map(function (pile) {
              return Common.ArrayAux.updateLast(pile, (function (v) {
                            return {
                                    card: v.card,
                                    hidden: false
                                  };
                          }));
            });
}

var spaceToString = Base.spaceToString;

function winCheck(game) {
  if (game.piles.every(function (pile) {
          return pile.length === 0;
        })) {
    return game.stock.every(function (stockGroup) {
                return stockGroup.length === 0;
              });
  } else {
    return false;
  }
}

function stockRules(_game, card, i, j) {
  return {
          locationAdjustment: {
            x: Math.imul(i, 20),
            y: 0,
            z: (Math.imul(i, 10) + j | 0) + 1 | 0
          },
          baseSpace: "Stock",
          dragPile: (function () {
              
            }),
          autoProgress: (function () {
              return "DoNothing";
            }),
          droppedUpon: (function (_game, _dragPile) {
              
            }),
          onStateChange: (function (element) {
              Card.showOrHide(card, element);
            }),
          onClick: (function (game) {
              return Core__Option.map(Common.ArrayAux.getLast(game.stock), (function (stockGroup) {
                            return {
                                    piles: flipLastUp(game.piles.map(function (pile, i) {
                                              return Core__Option.mapOr(stockGroup[i], pile, (function (v) {
                                                            return pile.concat([v]);
                                                          }));
                                            })),
                                    foundations: game.foundations,
                                    stock: game.stock.slice(0, game.stock.length - 1 | 0),
                                    waste: game.waste,
                                    free: game.free
                                  };
                          }));
            })
        };
}

var forEachSpace = Base.makeForEachSpace(undefined, undefined, undefined, undefined, undefined, undefined, stockRules, undefined, undefined);

function initiateGame() {
  var shuffledDeck = Core__Array.toShuffled(Card.getDeck(0, true));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: flipLastUp([
                  Common.ArrayAux.popN(deckToDeal, 3),
                  Common.ArrayAux.popN(deckToDeal, 3),
                  Common.ArrayAux.popN(deckToDeal, 3),
                  Common.ArrayAux.popN(deckToDeal, 3),
                  Common.ArrayAux.popN(deckToDeal, 3),
                  Common.ArrayAux.popN(deckToDeal, 3),
                  Common.ArrayAux.popN(deckToDeal, 3)
                ]),
            foundations: [
              [],
              [],
              [],
              []
            ],
            stock: [
              Common.ArrayAux.popN(deckToDeal, 3),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7)
            ],
            waste: [],
            free: []
          }
        ];
}

function EastHaven$EastHavenRules$StandardBoard(props) {
  var setRef = props.setRef;
  return JsxRuntime.jsxs(React.Fragment, {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              ref: Caml_option.some(setRef("Stock")),
                              className: " bg-white opacity-10  rounded w-14 h-20 mr-20"
                            }, spaceToString("Stock")),
                        JsxRuntime.jsx("div", {
                              children: [
                                  [],
                                  [],
                                  [],
                                  []
                                ].map(function (param, i) {
                                    return JsxRuntime.jsx("div", {
                                                ref: Caml_option.some(setRef({
                                                          TAG: "Foundation",
                                                          _0: i
                                                        })),
                                                className: " bg-white opacity-10  rounded w-14 h-20"
                                              }, spaceToString({
                                                    TAG: "Foundation",
                                                    _0: i
                                                  }));
                                  }),
                              className: "flex flex-row gap-3 ml-10"
                            })
                      ],
                      className: "flex flex-row"
                    }),
                JsxRuntime.jsx("div", {}),
                JsxRuntime.jsx("div", {
                      children: [
                          [],
                          [],
                          [],
                          [],
                          [],
                          [],
                          []
                        ].map(function (param, i) {
                            return JsxRuntime.jsx("div", {
                                        ref: Caml_option.some(setRef({
                                                  TAG: "Pile",
                                                  _0: i
                                                })),
                                        className: " bg-black opacity-20   rounded w-14 h-20"
                                      }, spaceToString({
                                            TAG: "Pile",
                                            _0: i
                                          }));
                          }),
                      className: "flex flex-row gap-3 mt-5"
                    })
              ]
            });
}

var StandardBoard = {
  make: EastHaven$EastHavenRules$StandardBoard
};

var EastHavenRules_space_encode = Base.space_encode;

var EastHavenRules_space_decode = Base.space_decode;

var EastHavenRules_getSpace = Base.getSpace;

var EastHavenRules_deck_encode = Base.deck_encode;

var EastHavenRules_deck_decode = Base.deck_decode;

var EastHavenRules_game_encode = Base.game_encode;

var EastHavenRules_game_decode = Base.game_decode;

var EastHavenRules_dropCheck = Base.dropCheck;

var EastHavenRules_dragCheck = Base.dragCheck;

var EastHavenRules_dragSizeCheck = Base.dragSizeCheck;

var EastHavenRules_pileBaseCheck = Base.pileBaseCheck;

var EastHavenRules_foundationBaseCheck = Base.foundationBaseCheck;

var EastHavenRules_foundationCheck = Base.foundationCheck;

var EastHavenRules_applyLiftToDragPile = Base.applyLiftToDragPile;

var EastHavenRules_applyMoveToDragPile = Base.applyMoveToDragPile;

var EastHavenRules_removeDragFromGame = Base.removeDragFromGame;

var EastHavenRules_pileBaseRules = Base.pileBaseRules;

var EastHavenRules_pileRules = Base.pileRules;

var EastHavenRules_foundationBaseRules = Base.foundationBaseRules;

var EastHavenRules_foundationRules = Base.foundationRules;

var EastHavenRules_wasteRules = Base.wasteRules;

var EastHavenRules_stockBaseRules = Base.stockBaseRules;

var EastHavenRules_freeRules = Base.freeRules;

var EastHavenRules_freeBaseRules = Base.freeBaseRules;

var EastHavenRules_makeForEachSpace = Base.makeForEachSpace;

var EastHavenRules_AllCards = Base.AllCards;

var EastHavenRules = {
  space_encode: EastHavenRules_space_encode,
  space_decode: EastHavenRules_space_decode,
  getSpace: EastHavenRules_getSpace,
  spaceToString: spaceToString,
  deck_encode: EastHavenRules_deck_encode,
  deck_decode: EastHavenRules_deck_decode,
  game_encode: EastHavenRules_game_encode,
  game_decode: EastHavenRules_game_decode,
  dropCheck: EastHavenRules_dropCheck,
  dragCheck: EastHavenRules_dragCheck,
  dragSizeCheck: EastHavenRules_dragSizeCheck,
  pileBaseCheck: EastHavenRules_pileBaseCheck,
  foundationBaseCheck: EastHavenRules_foundationBaseCheck,
  foundationCheck: EastHavenRules_foundationCheck,
  applyLiftToDragPile: EastHavenRules_applyLiftToDragPile,
  applyMoveToDragPile: EastHavenRules_applyMoveToDragPile,
  removeDragFromGame: EastHavenRules_removeDragFromGame,
  pileBaseRules: EastHavenRules_pileBaseRules,
  pileRules: EastHavenRules_pileRules,
  foundationBaseRules: EastHavenRules_foundationBaseRules,
  foundationRules: EastHavenRules_foundationRules,
  wasteRules: EastHavenRules_wasteRules,
  stockBaseRules: EastHavenRules_stockBaseRules,
  freeRules: EastHavenRules_freeRules,
  freeBaseRules: EastHavenRules_freeBaseRules,
  makeForEachSpace: EastHavenRules_makeForEachSpace,
  AllCards: EastHavenRules_AllCards,
  winCheck: winCheck,
  stockRules: stockRules,
  forEachSpace: forEachSpace,
  initiateGame: initiateGame,
  StandardBoard: StandardBoard,
  Board: undefined
};

export {
  Base ,
  flipLastUp ,
  EastHavenRules ,
}
/* Base Not a pure module */
