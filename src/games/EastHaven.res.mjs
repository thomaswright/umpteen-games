// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../Card.res.mjs";
import * as Common from "../Common.res.mjs";
import * as Packer from "./Packer.res.mjs";
import * as Spider from "./Spider.res.mjs";
import * as GameBase from "../GameBase.res.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";

var Base = Packer.Make({
      spec: {
        drop: "AltSuit",
        drag: "AltSuit",
        size: "AnySize",
        depot: "AnyDepot",
        foundation: "ByOne"
      }
    });

function flipLastUp(piles) {
  return piles.map(function (pile) {
              return Common.ArrayAux.updateLast(pile, (function (v) {
                            return {
                                    card: v.card,
                                    hidden: false
                                  };
                          }));
            });
}

var winCheck = Spider.SpiderRules.winCheck;

var stockRules = Spider.SpiderRules.stockRules;

var forEachSpace = Base.makeForEachSpace(undefined, undefined, undefined, undefined, undefined, undefined, stockRules, undefined, undefined);

function initiateGame() {
  var shuffledDeck = Core__Array.toShuffled(Card.getDeck(0, true));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: flipLastUp([
                  Common.ArrayAux.popN(deckToDeal, 3),
                  Common.ArrayAux.popN(deckToDeal, 3),
                  Common.ArrayAux.popN(deckToDeal, 3),
                  Common.ArrayAux.popN(deckToDeal, 3),
                  Common.ArrayAux.popN(deckToDeal, 3),
                  Common.ArrayAux.popN(deckToDeal, 3),
                  Common.ArrayAux.popN(deckToDeal, 3)
                ]),
            foundations: [
              [],
              [],
              [],
              []
            ],
            stock: [
              Common.ArrayAux.popN(deckToDeal, 3),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7)
            ],
            waste: [],
            free: []
          }
        ];
}

var Game = GameBase.Create({
      game_encode: Base.game_encode,
      game_decode: Base.game_decode,
      deck_encode: Base.deck_encode,
      deck_decode: Base.deck_decode,
      getSpace: Base.getSpace,
      spaceToString: Base.spaceToString,
      initiateGame: initiateGame,
      forEachSpace: forEachSpace,
      removeDragFromGame: Base.removeDragFromGame,
      winCheck: winCheck,
      applyLiftToDragPile: Base.applyLiftToDragPile,
      applyMoveToDragPile: Base.applyMoveToDragPile,
      Board: Spider.SpiderRules.StandardBoard,
      AllCards: Base.AllCards
    });

export {
  Base ,
  flipLastUp ,
  Game ,
}
/* Base Not a pure module */
