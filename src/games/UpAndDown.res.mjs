// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../Card.res.mjs";
import * as Decco from "@rescript-labs/decco/src/Decco.res.mjs";
import * as Tarot from "../Tarot.res.mjs";
import * as React from "react";
import * as Common from "../Common.res.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as GameBase from "../GameBase.res.mjs";
import * as Js_array from "rescript/lib/es6/js_array.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function item_encode(value) {
  if (value.TAG === "Card") {
    return [
            "Card",
            Card.sides_encode(value._0)
          ];
  } else {
    return [
            "Tarot",
            Tarot.sides_encode(value._0)
          ];
  }
}

function item_decode(value) {
  var jsonArr = Js_json.classify(value);
  if (typeof jsonArr !== "object") {
    return Decco.error(undefined, "Not a variant", value);
  }
  if (jsonArr.TAG !== "JSONArray") {
    return Decco.error(undefined, "Not a variant", value);
  }
  var jsonArr$1 = jsonArr._0;
  if (jsonArr$1.length === 0) {
    return Decco.error(undefined, "Expected variant, found empty array", value);
  }
  var tagged = Js_array.map(Js_json.classify, jsonArr$1);
  var match = Belt_Array.getExn(tagged, 0);
  if (typeof match === "object" && match.TAG === "JSONString") {
    switch (match._0) {
      case "Card" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0 = Card.sides_decode(Belt_Array.getExn(jsonArr$1, 1));
          if (v0.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "Card",
                      _0: v0._0
                    }
                  };
          }
          var e = v0._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
      case "Tarot" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0$1 = Tarot.sides_decode(Belt_Array.getExn(jsonArr$1, 1));
          if (v0$1.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "Tarot",
                      _0: v0$1._0
                    }
                  };
          }
          var e$1 = v0$1._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e$1.path,
                    message: e$1.message,
                    value: e$1.value
                  }
                };
      default:
        
    }
  }
  return Decco.error(undefined, "Invalid variant constructor", Belt_Array.getExn(jsonArr$1, 0));
}

function spaceItem_encode(value) {
  if (value.TAG === "SpaceCard") {
    return [
            "SpaceCard",
            Card.card_encode(value._0)
          ];
  } else {
    return [
            "SpaceTarot",
            Tarot.card_encode(value._0)
          ];
  }
}

function spaceItem_decode(value) {
  var jsonArr = Js_json.classify(value);
  if (typeof jsonArr !== "object") {
    return Decco.error(undefined, "Not a variant", value);
  }
  if (jsonArr.TAG !== "JSONArray") {
    return Decco.error(undefined, "Not a variant", value);
  }
  var jsonArr$1 = jsonArr._0;
  if (jsonArr$1.length === 0) {
    return Decco.error(undefined, "Expected variant, found empty array", value);
  }
  var tagged = Js_array.map(Js_json.classify, jsonArr$1);
  var match = Belt_Array.getExn(tagged, 0);
  if (typeof match === "object" && match.TAG === "JSONString") {
    switch (match._0) {
      case "SpaceCard" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0 = Card.card_decode(Belt_Array.getExn(jsonArr$1, 1));
          if (v0.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "SpaceCard",
                      _0: v0._0
                    }
                  };
          }
          var e = v0._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
      case "SpaceTarot" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0$1 = Tarot.card_decode(Belt_Array.getExn(jsonArr$1, 1));
          if (v0$1.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "SpaceTarot",
                      _0: v0$1._0
                    }
                  };
          }
          var e$1 = v0$1._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e$1.path,
                    message: e$1.message,
                    value: e$1.value
                  }
                };
      default:
        
    }
  }
  return Decco.error(undefined, "Invalid variant constructor", Belt_Array.getExn(jsonArr$1, 0));
}

function space_encode(value) {
  if (typeof value !== "object") {
    switch (value) {
      case "TarotUp" :
          return ["TarotUp"];
      case "TarotDown" :
          return ["TarotDown"];
      case "Free" :
          return ["Free"];
      
    }
  } else {
    switch (value.TAG) {
      case "Item" :
          return [
                  "Item",
                  spaceItem_encode(value._0)
                ];
      case "Foundation" :
          return [
                  "Foundation",
                  Decco.intToJson(value._0)
                ];
      case "Pile" :
          return [
                  "Pile",
                  Decco.intToJson(value._0)
                ];
      
    }
  }
}

function space_decode(value) {
  var jsonArr = Js_json.classify(value);
  if (typeof jsonArr !== "object") {
    return Decco.error(undefined, "Not a variant", value);
  }
  if (jsonArr.TAG !== "JSONArray") {
    return Decco.error(undefined, "Not a variant", value);
  }
  var jsonArr$1 = jsonArr._0;
  if (jsonArr$1.length === 0) {
    return Decco.error(undefined, "Expected variant, found empty array", value);
  }
  var tagged = Js_array.map(Js_json.classify, jsonArr$1);
  var match = Belt_Array.getExn(tagged, 0);
  if (typeof match === "object" && match.TAG === "JSONString") {
    switch (match._0) {
      case "Foundation" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0 = Decco.intFromJson(Belt_Array.getExn(jsonArr$1, 1));
          if (v0.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "Foundation",
                      _0: v0._0
                    }
                  };
          }
          var e = v0._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
      case "Free" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "Free"
                  };
          }
      case "Item" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0$1 = spaceItem_decode(Belt_Array.getExn(jsonArr$1, 1));
          if (v0$1.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "Item",
                      _0: v0$1._0
                    }
                  };
          }
          var e$1 = v0$1._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e$1.path,
                    message: e$1.message,
                    value: e$1.value
                  }
                };
      case "Pile" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0$2 = Decco.intFromJson(Belt_Array.getExn(jsonArr$1, 1));
          if (v0$2.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "Pile",
                      _0: v0$2._0
                    }
                  };
          }
          var e$2 = v0$2._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e$2.path,
                    message: e$2.message,
                    value: e$2.value
                  }
                };
      case "TarotDown" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "TarotDown"
                  };
          }
      case "TarotUp" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "TarotUp"
                  };
          }
      default:
        
    }
  }
  return Decco.error(undefined, "Invalid variant constructor", Belt_Array.getExn(jsonArr$1, 0));
}

function itemToSpaceItem(space) {
  if (space.TAG === "Card") {
    return {
            TAG: "SpaceCard",
            _0: space._0.card
          };
  } else {
    return {
            TAG: "SpaceTarot",
            _0: space._0.card
          };
  }
}

function getSpace(element) {
  var d = space_decode(JSON.parse(element.id));
  if (d.TAG === "Ok") {
    return d._0;
  }
  
}

function spaceToString(space) {
  return JSON.stringify(space_encode(space));
}

function deck_encode(value) {
  return Decco.arrayToJson(item_encode, value);
}

function deck_decode(value) {
  return Decco.arrayFromJson(item_decode, value);
}

function game_encode(value) {
  return Js_dict.fromArray([
              [
                "piles",
                (function (extra) {
                      return Decco.arrayToJson((function (extra) {
                                    return Decco.arrayToJson(item_encode, extra);
                                  }), extra);
                    })(value.piles)
              ],
              [
                "foundations",
                (function (extra) {
                      return Decco.arrayToJson((function (extra) {
                                    return Decco.arrayToJson(Card.sides_encode, extra);
                                  }), extra);
                    })(value.foundations)
              ],
              [
                "tarotUp",
                (function (extra) {
                      return Decco.arrayToJson(Tarot.sides_encode, extra);
                    })(value.tarotUp)
              ],
              [
                "tarotDown",
                (function (extra) {
                      return Decco.arrayToJson(Tarot.sides_encode, extra);
                    })(value.tarotDown)
              ],
              [
                "free",
                (function (extra) {
                      return Decco.optionToJson(item_encode, extra);
                    })(value.free)
              ]
            ]);
}

function game_decode(value) {
  var dict = Js_json.classify(value);
  if (typeof dict !== "object") {
    return Decco.error(undefined, "Not an object", value);
  }
  if (dict.TAG !== "JSONObject") {
    return Decco.error(undefined, "Not an object", value);
  }
  var dict$1 = dict._0;
  var extra = Belt_Option.getWithDefault(Js_dict.get(dict$1, "piles"), null);
  var piles = Decco.arrayFromJson((function (extra) {
          return Decco.arrayFromJson(item_decode, extra);
        }), extra);
  if (piles.TAG === "Ok") {
    var extra$1 = Belt_Option.getWithDefault(Js_dict.get(dict$1, "foundations"), null);
    var foundations = Decco.arrayFromJson((function (extra) {
            return Decco.arrayFromJson(Card.sides_decode, extra);
          }), extra$1);
    if (foundations.TAG === "Ok") {
      var extra$2 = Belt_Option.getWithDefault(Js_dict.get(dict$1, "tarotUp"), null);
      var tarotUp = Decco.arrayFromJson(Tarot.sides_decode, extra$2);
      if (tarotUp.TAG === "Ok") {
        var extra$3 = Belt_Option.getWithDefault(Js_dict.get(dict$1, "tarotDown"), null);
        var tarotDown = Decco.arrayFromJson(Tarot.sides_decode, extra$3);
        if (tarotDown.TAG === "Ok") {
          var free = Decco.optionFromJson(item_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "free"), null));
          if (free.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: Decco.unsafeAddFieldToObject("piles", piles._0, Decco.unsafeAddFieldToObject("foundations", foundations._0, Decco.unsafeAddFieldToObject("tarotUp", tarotUp._0, Decco.unsafeAddFieldToObject("tarotDown", tarotDown._0, Decco.unsafeAddFieldToObject("free", free._0, {})))))
                  };
          }
          var e = free._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: ".free" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
        }
        var e$1 = tarotDown._0;
        return {
                TAG: "Error",
                _0: {
                  path: ".tarotDown" + e$1.path,
                  message: e$1.message,
                  value: e$1.value
                }
              };
      }
      var e$2 = tarotUp._0;
      return {
              TAG: "Error",
              _0: {
                path: ".tarotUp" + e$2.path,
                message: e$2.message,
                value: e$2.value
              }
            };
    }
    var e$3 = foundations._0;
    return {
            TAG: "Error",
            _0: {
              path: ".foundations" + e$3.path,
              message: e$3.message,
              value: e$3.value
            }
          };
  }
  var e$4 = piles._0;
  return {
          TAG: "Error",
          _0: {
            path: ".piles" + e$4.path,
            message: e$4.message,
            value: e$4.value
          }
        };
}

function initiateGame() {
  var fullDeck = Core__Array.toShuffled(Core__Array.toShuffled(Card.getDeck(0, false)).map(function (v) {
              return {
                      TAG: "Card",
                      _0: v
                    };
            }).concat(Core__Array.toShuffled(Tarot.getDeck(0, false)).map(function (v) {
                return {
                        TAG: "Tarot",
                        _0: v
                      };
              })));
  var deckWithoutAces = fullDeck.filter(function (card) {
        if (card.TAG === "Card") {
          return card._0.card.rank !== "RA";
        } else {
          return true;
        }
      });
  var deckToDeal = {
    contents: deckWithoutAces
  };
  return [
          fullDeck,
          {
            piles: [
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7),
              [],
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7)
            ],
            foundations: [
              [{
                  card: {
                    suit: "Clubs",
                    rank: "RA",
                    deck: 0
                  },
                  hidden: false
                }],
              [{
                  card: {
                    suit: "Diamonds",
                    rank: "RA",
                    deck: 0
                  },
                  hidden: false
                }],
              [{
                  card: {
                    suit: "Hearts",
                    rank: "RA",
                    deck: 0
                  },
                  hidden: false
                }],
              [{
                  card: {
                    suit: "Spades",
                    rank: "RA",
                    deck: 0
                  },
                  hidden: false
                }]
            ],
            tarotUp: [],
            tarotDown: [],
            free: undefined
          }
        ];
}

function winCheck(game) {
  if (game.piles.every(function (pile) {
          return pile.length === 0;
        })) {
    return Core__Option.isNone(game.free);
  } else {
    return false;
  }
}

function removeDragFromGame(game, dragPile) {
  return {
          piles: game.piles.map(function (x) {
                return x.filter(function (sCard) {
                            return Caml_obj.notequal(sCard, dragPile);
                          });
              }),
          foundations: game.foundations.map(function (x) {
                return x.filter(function (sCard) {
                            return Caml_obj.notequal({
                                        TAG: "Card",
                                        _0: sCard
                                      }, dragPile);
                          });
              }),
          tarotUp: game.tarotUp,
          tarotDown: game.tarotDown,
          free: Core__Option.flatMap(game.free, (function (card) {
                  if (Caml_obj.notequal(card, dragPile)) {
                    return card;
                  }
                  
                }))
        };
}

function applyLiftToDragPile(dragPile, lift) {
  return lift({
              TAG: "Item",
              _0: itemToSpaceItem(dragPile)
            }, 0);
}

function applyMoveToDragPile(dragPile, move) {
  return move({
              TAG: "Item",
              _0: itemToSpaceItem(dragPile)
            }, 0, 0);
}

function pileBaseRules(game, i) {
  return {
          droppedUpon: (function (gameRemoved, dragPile) {
              var noChildren = game.piles[i].length === 0;
              if (noChildren) {
                return {
                        piles: Common.ArrayAux.update(gameRemoved.piles, i, (function (param) {
                                return [dragPile];
                              })),
                        foundations: gameRemoved.foundations,
                        tarotUp: gameRemoved.tarotUp,
                        tarotDown: gameRemoved.tarotDown,
                        free: gameRemoved.free
                      };
              }
              
            }),
          autoProgress: "DoNothing",
          onClick: (function (param) {
              
            })
        };
}

function pileRules(pile, item, i, j) {
  var isLast = j === (pile.length - 1 | 0);
  return {
          locationAdjustment: {
            x: 0,
            y: Math.imul(j, 20),
            z: j + 1 | 0
          },
          baseSpace: {
            TAG: "Pile",
            _0: i
          },
          dragPile: (function () {
              if (isLast) {
                return item;
              }
              
            }),
          autoProgress: (function () {
              if (isLast) {
                return {
                        TAG: "SendOrAccept",
                        _0: item
                      };
              } else {
                return "DoNothing";
              }
            }),
          droppedUpon: (function (game, dragPile) {
              if (dragPile.TAG !== "Card") {
                if (item.TAG === "Card" || !(isLast && Tarot.rankIsAdjacent(item._0, dragPile._0))) {
                  return ;
                } else {
                  return {
                          piles: game.piles.map(function (stack) {
                                return Common.ArrayAux.insertAfter(stack, item, [dragPile]);
                              }),
                          foundations: game.foundations,
                          tarotUp: game.tarotUp,
                          tarotDown: game.tarotDown,
                          free: game.free
                        };
                }
              }
              var dragCard = dragPile._0;
              if (item.TAG !== "Card") {
                return ;
              }
              var card = item._0;
              if (isLast && Card.rankIsAdjacent(card, dragCard) && dragCard.card.suit === card.card.suit) {
                return {
                        piles: game.piles.map(function (stack) {
                              return Common.ArrayAux.insertAfter(stack, item, [dragPile]);
                            }),
                        foundations: game.foundations,
                        tarotUp: game.tarotUp,
                        tarotDown: game.tarotDown,
                        free: game.free
                      };
              }
              
            }),
          onStateChange: (function (param) {
              
            }),
          onClick: (function (param) {
              
            })
        };
}

function foundationBaseRules(i) {
  return {
          droppedUpon: (function (game, dragPile) {
              var noChildren = game.foundations[i].length === 0;
              if (dragPile.TAG !== "Card") {
                return ;
              }
              var card = dragPile._0;
              if (noChildren && card.card.rank === "RA") {
                return {
                        piles: game.piles,
                        foundations: Common.ArrayAux.update(game.foundations, i, (function (param) {
                                return [card];
                              })),
                        tarotUp: game.tarotUp,
                        tarotDown: game.tarotDown,
                        free: game.free
                      };
              }
              
            }),
          autoProgress: "Seek",
          onClick: (function (param) {
              
            })
        };
}

function foundationRules(card, i, j) {
  return {
          locationAdjustment: {
            x: 0,
            y: 0,
            z: j + 1 | 0
          },
          baseSpace: {
            TAG: "Foundation",
            _0: i
          },
          dragPile: (function () {
              
            }),
          autoProgress: (function () {
              return "Seek";
            }),
          droppedUpon: (function (game, dragPile) {
              if (dragPile.TAG !== "Card") {
                return ;
              }
              var dragCard = dragPile._0;
              if (dragCard.card.suit === card.card.suit && Card.rankIsBelow(card, dragCard)) {
                return {
                        piles: game.piles,
                        foundations: game.foundations.map(function (stack) {
                              return Common.ArrayAux.insertAfter(stack, card, [dragCard]);
                            }),
                        tarotUp: game.tarotUp,
                        tarotDown: game.tarotDown,
                        free: game.free
                      };
              }
              
            }),
          onStateChange: (function (param) {
              
            }),
          onClick: (function (param) {
              
            })
        };
}

function tarotUpBaseRules() {
  return {
          droppedUpon: (function (game, dragPile) {
              var noChildren = game.tarotUp.length === 0;
              if (dragPile.TAG === "Card") {
                return ;
              }
              var tarot = dragPile._0;
              if (noChildren && tarot.card.rank === "R0") {
                return {
                        piles: game.piles,
                        foundations: game.foundations,
                        tarotUp: [tarot],
                        tarotDown: game.tarotDown,
                        free: game.free
                      };
              }
              
            }),
          autoProgress: "Seek",
          onClick: (function (param) {
              
            })
        };
}

function tarotUpRules(tarot, j) {
  return {
          locationAdjustment: {
            x: Math.imul(10, j),
            y: 0,
            z: j
          },
          baseSpace: "TarotUp",
          dragPile: (function () {
              
            }),
          autoProgress: (function () {
              return "Seek";
            }),
          droppedUpon: (function (game, dragPile) {
              if (dragPile.TAG === "Card") {
                return ;
              }
              var dragTarot = dragPile._0;
              if (Tarot.rankIsBelow(tarot, dragTarot)) {
                return {
                        piles: game.piles,
                        foundations: game.foundations,
                        tarotUp: game.tarotUp.concat([dragTarot]),
                        tarotDown: game.tarotDown,
                        free: game.free
                      };
              }
              
            }),
          onStateChange: (function (param) {
              
            }),
          onClick: (function (param) {
              
            })
        };
}

function tarotDownBaseRules() {
  return {
          droppedUpon: (function (game, dragPile) {
              var noChildren = game.tarotDown.length === 0;
              if (dragPile.TAG === "Card") {
                return ;
              }
              var tarot = dragPile._0;
              if (noChildren && tarot.card.rank === "R21") {
                return {
                        piles: game.piles,
                        foundations: game.foundations,
                        tarotUp: game.tarotUp,
                        tarotDown: [tarot],
                        free: game.free
                      };
              }
              
            }),
          autoProgress: "Seek",
          onClick: (function (param) {
              
            })
        };
}

function tarotDownRules(tarot, j) {
  return {
          locationAdjustment: {
            x: Math.imul(-10, j),
            y: 0,
            z: j
          },
          baseSpace: "TarotDown",
          dragPile: (function () {
              
            }),
          autoProgress: (function () {
              return "Seek";
            }),
          droppedUpon: (function (game, dragPile) {
              if (dragPile.TAG === "Card") {
                return ;
              }
              var dragTarot = dragPile._0;
              if (Tarot.rankIsAbove(tarot, dragTarot)) {
                return {
                        piles: game.piles,
                        foundations: game.foundations,
                        tarotUp: game.tarotUp,
                        tarotDown: game.tarotDown.concat([dragTarot]),
                        free: game.free
                      };
              }
              
            }),
          onStateChange: (function (param) {
              
            }),
          onClick: (function (param) {
              
            })
        };
}

function freeBaseRules() {
  return {
          droppedUpon: (function (game, dragPile) {
              var match = game.free;
              if (match !== undefined) {
                return ;
              } else {
                return {
                        piles: game.piles,
                        foundations: game.foundations,
                        tarotUp: game.tarotUp,
                        tarotDown: game.tarotDown,
                        free: dragPile
                      };
              }
            }),
          autoProgress: "DoNothing",
          onClick: (function (param) {
              
            })
        };
}

function freeRules(card) {
  return {
          locationAdjustment: {
            x: 0,
            y: 0,
            z: 1
          },
          baseSpace: "Free",
          dragPile: (function () {
              return card;
            }),
          autoProgress: (function () {
              return {
                      TAG: "Send",
                      _0: card
                    };
            }),
          droppedUpon: (function (_game, _dragPile) {
              
            }),
          onStateChange: (function (param) {
              
            }),
          onClick: (function (param) {
              
            })
        };
}

function forEachSpace(game, f) {
  game.piles.forEach(function (pile, i) {
        f({
              TAG: "Pile",
              _0: i
            }, {
              TAG: "Static",
              _0: pileBaseRules(game, i)
            });
        pile.forEach(function (card, j) {
              f({
                    TAG: "Item",
                    _0: itemToSpaceItem(card)
                  }, {
                    TAG: "Movable",
                    _0: pileRules(pile, card, i, j)
                  });
            });
      });
  game.foundations.forEach(function (foundation, i) {
        f({
              TAG: "Foundation",
              _0: i
            }, {
              TAG: "Static",
              _0: foundationBaseRules(i)
            });
        foundation.forEach(function (card, j) {
              f({
                    TAG: "Item",
                    _0: {
                      TAG: "SpaceCard",
                      _0: card.card
                    }
                  }, {
                    TAG: "Movable",
                    _0: foundationRules(card, i, j)
                  });
            });
      });
  f("TarotUp", {
        TAG: "Static",
        _0: tarotUpBaseRules()
      });
  game.tarotUp.forEach(function (card, i) {
        f({
              TAG: "Item",
              _0: {
                TAG: "SpaceTarot",
                _0: card.card
              }
            }, {
              TAG: "Movable",
              _0: tarotUpRules(card, i)
            });
      });
  f("TarotDown", {
        TAG: "Static",
        _0: tarotDownBaseRules()
      });
  game.tarotDown.forEach(function (card, i) {
        f({
              TAG: "Item",
              _0: {
                TAG: "SpaceTarot",
                _0: card.card
              }
            }, {
              TAG: "Movable",
              _0: tarotDownRules(card, i)
            });
      });
  f("Free", {
        TAG: "Static",
        _0: freeBaseRules()
      });
  var free = game.free;
  if (free !== undefined) {
    return f({
                TAG: "Item",
                _0: itemToSpaceItem(free)
              }, {
                TAG: "Movable",
                _0: freeRules(free)
              });
  }
  
}

function UpAndDown$GameRules$Board(props) {
  var setRef = props.setRef;
  return JsxRuntime.jsxs(React.Fragment, {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("div", {
                                      children: "0",
                                      ref: Caml_option.some(setRef("TarotUp")),
                                      className: " bg-white opacity-10 rounded w-14 h-20 flex \n              flex-row items-center justify-center text-xl font-bold text-black"
                                    }, JSON.stringify(space_encode("TarotUp"))),
                                JsxRuntime.jsx("div", {
                                      children: "21",
                                      ref: Caml_option.some(setRef("TarotDown")),
                                      className: " bg-white opacity-10  rounded w-14 h-20 flex \n              flex-row items-center justify-center text-xl font-bold text-black"
                                    }, JSON.stringify(space_encode("TarotDown")))
                              ],
                              className: "flex flex-row justify-between",
                              style: {
                                width: "290px"
                              }
                            }),
                        JsxRuntime.jsx("div", {
                              ref: Caml_option.some(setRef("Free")),
                              className: "outline outline-4 outline-black bg-black bg-opacity-20 rounded w-14 h-20 mx-10"
                            }, JSON.stringify(space_encode("Free"))),
                        JsxRuntime.jsx("div", {
                              children: [
                                  [],
                                  [],
                                  [],
                                  []
                                ].map(function (param, i) {
                                    return JsxRuntime.jsx("div", {
                                                ref: Caml_option.some(setRef({
                                                          TAG: "Foundation",
                                                          _0: i
                                                        })),
                                                className: "  bg-white opacity-10 rounded w-14 h-20"
                                              }, JSON.stringify(space_encode({
                                                        TAG: "Foundation",
                                                        _0: i
                                                      })));
                                  }),
                              className: "flex flex-row gap-3"
                            })
                      ],
                      className: "flex flex-row  "
                    }),
                JsxRuntime.jsx("div", {
                      children: [
                          [],
                          [],
                          [],
                          [],
                          [],
                          [],
                          [],
                          [],
                          [],
                          [],
                          []
                        ].map(function (param, i) {
                            return JsxRuntime.jsx("div", {
                                        ref: Caml_option.some(setRef({
                                                  TAG: "Pile",
                                                  _0: i
                                                })),
                                        className: " bg-black opacity-20   rounded w-14 h-20"
                                      }, JSON.stringify(space_encode({
                                                TAG: "Pile",
                                                _0: i
                                              })));
                          }),
                      className: "flex flex-row gap-3 mt-5"
                    })
              ]
            });
}

var Board = {
  make: UpAndDown$GameRules$Board
};

function UpAndDown$GameRules$AllCards(props) {
  var onMouseDown = props.onMouseDown;
  var setRef = props.setRef;
  return JsxRuntime.jsx(React.Fragment, {
              children: props.deck.map(function (item) {
                    if (item.TAG === "Card") {
                      var space = {
                        TAG: "Item",
                        _0: itemToSpaceItem(item)
                      };
                      var space$1 = {
                        TAG: "Item",
                        _0: itemToSpaceItem(item)
                      };
                      return JsxRuntime.jsx(Card.Display.make, {
                                  card: item._0,
                                  id: JSON.stringify(space_encode(space)),
                                  cardRef: setRef({
                                        TAG: "Item",
                                        _0: itemToSpaceItem(item)
                                      }),
                                  onMouseDown: onMouseDown,
                                  multiColor: true
                                }, JSON.stringify(space_encode(space$1)));
                    }
                    var space$2 = {
                      TAG: "Item",
                      _0: itemToSpaceItem(item)
                    };
                    var space$3 = {
                      TAG: "Item",
                      _0: itemToSpaceItem(item)
                    };
                    return JsxRuntime.jsx(Tarot.Display.make, {
                                card: item._0,
                                id: JSON.stringify(space_encode(space$2)),
                                cardRef: setRef({
                                      TAG: "Item",
                                      _0: itemToSpaceItem(item)
                                    }),
                                onMouseDown: onMouseDown
                              }, JSON.stringify(space_encode(space$3)));
                  })
            });
}

var AllCards = {
  make: UpAndDown$GameRules$AllCards
};

var GameRules = {
  game_encode: game_encode,
  game_decode: game_decode,
  deck_encode: deck_encode,
  deck_decode: deck_decode,
  getSpace: getSpace,
  spaceToString: spaceToString,
  initiateGame: initiateGame,
  forEachSpace: forEachSpace,
  removeDragFromGame: removeDragFromGame,
  winCheck: winCheck,
  applyLiftToDragPile: applyLiftToDragPile,
  applyMoveToDragPile: applyMoveToDragPile,
  Board: Board,
  AllCards: AllCards
};

var Game = GameBase.Create(GameRules);

export {
  GameRules ,
  Game ,
}
/* Game Not a pure module */
