// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../Card.res.mjs";
import * as Bases from "../Bases.res.mjs";
import * as Rules from "../Rules.res.mjs";
import * as Boards from "../Boards.res.mjs";
import * as Common from "../Common.res.mjs";
import * as GameBase from "../GameBase.res.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";

function initiateGame() {
  var shuffledDeck = Core__Array.toShuffled([].concat(Card.getDeck(0, false), Card.getDeck(1, false)));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            tableau: [
              Common.ArrayAux.popN(deckToDeal, 4),
              Common.ArrayAux.popN(deckToDeal, 4),
              Common.ArrayAux.popN(deckToDeal, 4),
              Common.ArrayAux.popN(deckToDeal, 4),
              Common.ArrayAux.popN(deckToDeal, 4),
              Common.ArrayAux.popN(deckToDeal, 4),
              Common.ArrayAux.popN(deckToDeal, 4),
              Common.ArrayAux.popN(deckToDeal, 4)
            ],
            foundations: [
              [],
              [],
              [],
              [],
              [],
              [],
              [],
              []
            ],
            stock: [Card.hideAfter(deckToDeal.contents, 0)],
            waste: [],
            free: []
          }
        ];
}

var forEachSpace = Bases.Diplomat.makeForEachSpace(undefined, undefined, undefined, undefined, Rules.WasteRotation.wasteRules, Rules.WasteRotation.stockBaseRules, Rules.WasteRotation.stockRules, undefined, undefined);

var Game = GameBase.Create({
      game_encode: Bases.Diplomat.game_encode,
      game_decode: Bases.Diplomat.game_decode,
      deck_encode: Bases.Diplomat.deck_encode,
      deck_decode: Bases.Diplomat.deck_decode,
      getSpace: Bases.Diplomat.getSpace,
      spaceToString: Bases.Diplomat.spaceToString,
      initiateGame: initiateGame,
      forEachSpace: forEachSpace,
      removeDragFromGame: Bases.Diplomat.removeDragFromGame,
      winCheck: Bases.Diplomat.winCheck,
      applyLiftToDragPile: Bases.Diplomat.applyLiftToDragPile,
      applyMoveToDragPile: Bases.Diplomat.applyMoveToDragPile,
      Board: Boards.SWFT,
      AllCards: Bases.Diplomat.AllCards
    });

export {
  Game ,
}
/* Game Not a pure module */
