// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../Card.res.mjs";
import * as React from "react";
import * as Common from "../Common.res.mjs";
import * as Packer from "./Packer.res.mjs";
import * as GameBase from "../GameBase.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function flipLastUp(piles) {
  return piles.map(function (pile) {
              return Common.ArrayAux.updateLast(pile, (function (v) {
                            return {
                                    card: v.card,
                                    hidden: false
                                  };
                          }));
            });
}

var SpiderBase = Packer.Make({
      spec: {
        drop: "AnySuit",
        drag: "OneSuit",
        size: "AnySize",
        depot: "AnyDepot",
        foundation: "ByAll"
      }
    });

var game_encode = SpiderBase.game_encode;

var game_decode = SpiderBase.game_decode;

var getSpace = SpiderBase.getSpace;

var spaceToString = SpiderBase.spaceToString;

var deck_encode = SpiderBase.deck_encode;

var deck_decode = SpiderBase.deck_decode;

var dropCheck = SpiderBase.dropCheck;

var dragCheck = SpiderBase.dragCheck;

var dragSizeCheck = SpiderBase.dragSizeCheck;

var pileBaseCheck = SpiderBase.pileBaseCheck;

var foundationBaseCheck = SpiderBase.foundationBaseCheck;

var foundationCheck = SpiderBase.foundationCheck;

var applyLiftToDragPile = SpiderBase.applyLiftToDragPile;

var applyMoveToDragPile = SpiderBase.applyMoveToDragPile;

var removeDragFromGame = SpiderBase.removeDragFromGame;

var pileBaseRules = SpiderBase.pileBaseRules;

var pileRules = SpiderBase.pileRules;

var foundationBaseRules = SpiderBase.foundationBaseRules;

var foundationRules = SpiderBase.foundationRules;

var wasteRules = SpiderBase.wasteRules;

var stockBaseRules = SpiderBase.stockBaseRules;

var freeRules = SpiderBase.freeRules;

var freeBaseRules = SpiderBase.freeBaseRules;

var makeForEachSpace = SpiderBase.makeForEachSpace;

var AllCards = SpiderBase.AllCards;

function winCheck(game) {
  if (game.piles.every(function (pile) {
          return pile.length === 0;
        })) {
    return game.stock.every(function (stockGroup) {
                return stockGroup.length === 0;
              });
  } else {
    return false;
  }
}

function stockRules(_game, _card, i, j) {
  return {
          locationAdjustment: {
            x: Math.imul(i, 20),
            y: 0,
            z: (Math.imul(i, 10) + j | 0) + 1 | 0
          },
          baseSpace: "Stock",
          dragPile: (function () {
              
            }),
          autoProgress: (function () {
              return "DoNothing";
            }),
          droppedUpon: (function (_game, _dragPile) {
              
            }),
          onStateChange: (function (element) {
              Card.hide(element);
            }),
          onClick: (function (game) {
              return Core__Option.map(Common.ArrayAux.getLast(game.stock), (function (stockGroup) {
                            return {
                                    piles: flipLastUp(game.piles.map(function (pile, i) {
                                              return Core__Option.mapOr(stockGroup[i], pile, (function (v) {
                                                            return pile.concat([v]);
                                                          }));
                                            })),
                                    foundations: game.foundations,
                                    stock: game.stock.slice(0, game.stock.length - 1 | 0),
                                    waste: game.waste,
                                    free: game.free
                                  };
                          }));
            })
        };
}

var forEachSpace = SpiderBase.makeForEachSpace(undefined, undefined, undefined, undefined, undefined, undefined, stockRules, undefined, undefined);

function Spider$SpiderRules$StandardBoard(props) {
  var initialGame = props.initialGame;
  var setRef = props.setRef;
  return JsxRuntime.jsxs(React.Fragment, {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              ref: Caml_option.some(setRef("Stock")),
                              className: " bg-white opacity-10  rounded w-14 h-20 mr-20"
                            }, spaceToString("Stock")),
                        JsxRuntime.jsx("div", {
                              children: Core__Array.make(initialGame.foundations.length, []).map(function (param, i) {
                                    return JsxRuntime.jsx("div", {
                                                ref: Caml_option.some(setRef({
                                                          TAG: "Foundation",
                                                          _0: i
                                                        })),
                                                className: " bg-white opacity-10  rounded w-14 h-20"
                                              }, spaceToString({
                                                    TAG: "Foundation",
                                                    _0: i
                                                  }));
                                  }),
                              className: "flex flex-row gap-3 ml-10"
                            })
                      ],
                      className: "flex flex-row"
                    }),
                JsxRuntime.jsx("div", {}),
                JsxRuntime.jsx("div", {
                      children: Core__Array.make(initialGame.piles.length, []).map(function (param, i) {
                            return JsxRuntime.jsx("div", {
                                        ref: Caml_option.some(setRef({
                                                  TAG: "Pile",
                                                  _0: i
                                                })),
                                        className: " bg-black opacity-20   rounded w-14 h-20"
                                      }, spaceToString({
                                            TAG: "Pile",
                                            _0: i
                                          }));
                          }),
                      className: "flex flex-row gap-3 mt-5"
                    })
              ]
            });
}

var StandardBoard = {
  make: Spider$SpiderRules$StandardBoard
};

var SpiderRules = {
  game_encode: game_encode,
  game_decode: game_decode,
  getSpace: getSpace,
  spaceToString: spaceToString,
  deck_encode: deck_encode,
  deck_decode: deck_decode,
  dropCheck: dropCheck,
  dragCheck: dragCheck,
  dragSizeCheck: dragSizeCheck,
  pileBaseCheck: pileBaseCheck,
  foundationBaseCheck: foundationBaseCheck,
  foundationCheck: foundationCheck,
  applyLiftToDragPile: applyLiftToDragPile,
  applyMoveToDragPile: applyMoveToDragPile,
  removeDragFromGame: removeDragFromGame,
  pileBaseRules: pileBaseRules,
  pileRules: pileRules,
  foundationBaseRules: foundationBaseRules,
  foundationRules: foundationRules,
  wasteRules: wasteRules,
  stockBaseRules: stockBaseRules,
  freeRules: freeRules,
  freeBaseRules: freeBaseRules,
  makeForEachSpace: makeForEachSpace,
  AllCards: AllCards,
  winCheck: winCheck,
  stockRules: stockRules,
  forEachSpace: forEachSpace,
  StandardBoard: StandardBoard
};

function initiateGame() {
  var shuffledDeck = Core__Array.toShuffled([].concat(Card.getOneSuitDeck(0, "Spades", true), Card.getOneSuitDeck(1, "Spades", true), Card.getOneSuitDeck(2, "Spades", true), Card.getOneSuitDeck(3, "Spades", true), Card.getOneSuitDeck(4, "Spades", true), Card.getOneSuitDeck(5, "Spades", true), Card.getOneSuitDeck(6, "Spades", true), Card.getOneSuitDeck(7, "Spades", true)));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: flipLastUp([
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5)
                ]),
            foundations: [
              [],
              [],
              [],
              [],
              [],
              [],
              [],
              []
            ],
            stock: [
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10)
            ],
            waste: [],
            free: []
          }
        ];
}

var OneSuit = GameBase.Create({
      game_encode: game_encode,
      game_decode: game_decode,
      deck_encode: deck_encode,
      deck_decode: deck_decode,
      getSpace: getSpace,
      spaceToString: spaceToString,
      initiateGame: initiateGame,
      forEachSpace: forEachSpace,
      removeDragFromGame: removeDragFromGame,
      winCheck: winCheck,
      applyLiftToDragPile: applyLiftToDragPile,
      applyMoveToDragPile: applyMoveToDragPile,
      Board: StandardBoard,
      AllCards: AllCards
    });

function initiateGame$1() {
  var shuffledDeck = Core__Array.toShuffled([].concat(Card.getOneSuitDeck(0, "Spades", true), Card.getOneSuitDeck(1, "Spades", true), Card.getOneSuitDeck(2, "Spades", true), Card.getOneSuitDeck(3, "Spades", true), Card.getOneSuitDeck(4, "Hearts", true), Card.getOneSuitDeck(5, "Hearts", true), Card.getOneSuitDeck(6, "Hearts", true), Card.getOneSuitDeck(7, "Hearts", true)));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: flipLastUp([
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5)
                ]),
            foundations: [
              [],
              [],
              [],
              [],
              [],
              [],
              [],
              []
            ],
            stock: [
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10)
            ],
            waste: [],
            free: []
          }
        ];
}

var TwoSuit = GameBase.Create({
      game_encode: game_encode,
      game_decode: game_decode,
      deck_encode: deck_encode,
      deck_decode: deck_decode,
      getSpace: getSpace,
      spaceToString: spaceToString,
      initiateGame: initiateGame$1,
      forEachSpace: forEachSpace,
      removeDragFromGame: removeDragFromGame,
      winCheck: winCheck,
      applyLiftToDragPile: applyLiftToDragPile,
      applyMoveToDragPile: applyMoveToDragPile,
      Board: StandardBoard,
      AllCards: AllCards
    });

function initiateGame$2() {
  var shuffledDeck = Core__Array.toShuffled([].concat(Card.getDeck(0, true), Card.getDeck(1, true)));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: flipLastUp([
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5)
                ]),
            foundations: [
              [],
              [],
              [],
              [],
              [],
              [],
              [],
              []
            ],
            stock: [
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10)
            ],
            waste: [],
            free: []
          }
        ];
}

var FourSuit = GameBase.Create({
      game_encode: game_encode,
      game_decode: game_decode,
      deck_encode: deck_encode,
      deck_decode: deck_decode,
      getSpace: getSpace,
      spaceToString: spaceToString,
      initiateGame: initiateGame$2,
      forEachSpace: forEachSpace,
      removeDragFromGame: removeDragFromGame,
      winCheck: winCheck,
      applyLiftToDragPile: applyLiftToDragPile,
      applyMoveToDragPile: applyMoveToDragPile,
      Board: StandardBoard,
      AllCards: AllCards
    });

function initiateGame$3() {
  var shuffledDeck = Core__Array.toShuffled(Card.getDeck(0, false));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: [
              Common.ArrayAux.popN(deckToDeal, 8),
              Common.ArrayAux.popN(deckToDeal, 8),
              Common.ArrayAux.popN(deckToDeal, 8),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 6),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 4),
              Common.ArrayAux.popN(deckToDeal, 3),
              Common.ArrayAux.popN(deckToDeal, 2),
              Common.ArrayAux.popN(deckToDeal, 1)
            ],
            foundations: [
              [],
              [],
              [],
              []
            ],
            stock: [],
            waste: [],
            free: []
          }
        ];
}

function Spider$SimpleSimonRules$Board(props) {
  var initialGame = props.initialGame;
  var setRef = props.setRef;
  return JsxRuntime.jsxs(React.Fragment, {
              children: [
                JsxRuntime.jsx("div", {
                      children: Core__Array.make(initialGame.foundations.length, []).map(function (param, i) {
                            return JsxRuntime.jsx("div", {
                                        ref: Caml_option.some(setRef({
                                                  TAG: "Foundation",
                                                  _0: i
                                                })),
                                        className: " bg-white opacity-10 rounded w-14 h-20",
                                        id: spaceToString({
                                              TAG: "Foundation",
                                              _0: i
                                            })
                                      }, spaceToString({
                                            TAG: "Foundation",
                                            _0: i
                                          }));
                          }),
                      className: "flex flex-row gap-3 mt-5"
                    }),
                JsxRuntime.jsx("div", {
                      children: Core__Array.make(initialGame.piles.length, []).map(function (param, i) {
                            return JsxRuntime.jsx("div", {
                                        ref: Caml_option.some(setRef({
                                                  TAG: "Pile",
                                                  _0: i
                                                })),
                                        className: " bg-black opacity-20  rounded w-14 h-20",
                                        id: spaceToString({
                                              TAG: "Pile",
                                              _0: i
                                            })
                                      }, spaceToString({
                                            TAG: "Pile",
                                            _0: i
                                          }));
                          }),
                      className: "flex flex-row gap-3 mt-5"
                    })
              ]
            });
}

var Board = {
  make: Spider$SimpleSimonRules$Board
};

var SimpleSimonRules = {
  game_encode: game_encode,
  game_decode: game_decode,
  getSpace: getSpace,
  spaceToString: spaceToString,
  deck_encode: deck_encode,
  deck_decode: deck_decode,
  dropCheck: dropCheck,
  dragCheck: dragCheck,
  dragSizeCheck: dragSizeCheck,
  pileBaseCheck: pileBaseCheck,
  foundationBaseCheck: foundationBaseCheck,
  foundationCheck: foundationCheck,
  applyLiftToDragPile: applyLiftToDragPile,
  applyMoveToDragPile: applyMoveToDragPile,
  removeDragFromGame: removeDragFromGame,
  pileBaseRules: pileBaseRules,
  pileRules: pileRules,
  foundationBaseRules: foundationBaseRules,
  foundationRules: foundationRules,
  wasteRules: wasteRules,
  stockBaseRules: stockBaseRules,
  freeRules: freeRules,
  freeBaseRules: freeBaseRules,
  makeForEachSpace: makeForEachSpace,
  AllCards: AllCards,
  winCheck: winCheck,
  stockRules: stockRules,
  forEachSpace: forEachSpace,
  StandardBoard: StandardBoard,
  initiateGame: initiateGame$3,
  Board: Board
};

var SimpleSimon = GameBase.Create({
      game_encode: game_encode,
      game_decode: game_decode,
      deck_encode: deck_encode,
      deck_decode: deck_decode,
      getSpace: getSpace,
      spaceToString: spaceToString,
      initiateGame: initiateGame$3,
      forEachSpace: forEachSpace,
      removeDragFromGame: removeDragFromGame,
      winCheck: winCheck,
      applyLiftToDragPile: applyLiftToDragPile,
      applyMoveToDragPile: applyMoveToDragPile,
      Board: Board,
      AllCards: AllCards
    });

function initiateGame$4() {
  var shuffledDeck = Core__Array.toShuffled([].concat(Card.getDeck(0, false), Card.getDeck(1, false)));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: flipLastUp([
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8)
                ]),
            foundations: [
              [],
              [],
              [],
              [],
              [],
              [],
              [],
              []
            ],
            stock: [],
            waste: [],
            free: []
          }
        ];
}

var MrsMop = GameBase.Create({
      game_encode: game_encode,
      game_decode: game_decode,
      deck_encode: deck_encode,
      deck_decode: deck_decode,
      getSpace: getSpace,
      spaceToString: spaceToString,
      initiateGame: initiateGame$4,
      forEachSpace: forEachSpace,
      removeDragFromGame: removeDragFromGame,
      winCheck: winCheck,
      applyLiftToDragPile: applyLiftToDragPile,
      applyMoveToDragPile: applyMoveToDragPile,
      Board: Board,
      AllCards: AllCards
    });

var ScorpionBase = Packer.Make({
      spec: {
        drop: "OneSuit",
        drag: "AnySuit",
        size: "AnySize",
        depot: {
          TAG: "SpecificDepot",
          _0: "RK"
        },
        foundation: "ByAll"
      }
    });

var game_encode$1 = ScorpionBase.game_encode;

var game_decode$1 = ScorpionBase.game_decode;

var getSpace$1 = ScorpionBase.getSpace;

var spaceToString$1 = ScorpionBase.spaceToString;

var deck_encode$1 = ScorpionBase.deck_encode;

var deck_decode$1 = ScorpionBase.deck_decode;

var applyLiftToDragPile$1 = ScorpionBase.applyLiftToDragPile;

var applyMoveToDragPile$1 = ScorpionBase.applyMoveToDragPile;

var removeDragFromGame$1 = ScorpionBase.removeDragFromGame;

var AllCards$1 = ScorpionBase.AllCards;

function initiateGame$5() {
  var shuffledDeck = Core__Array.toShuffled(Card.getDeck(0, true));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: flipLastUp([
                  Card.showAfter(Common.ArrayAux.popN(deckToDeal, 7), 3),
                  Card.showAfter(Common.ArrayAux.popN(deckToDeal, 7), 3),
                  Card.showAfter(Common.ArrayAux.popN(deckToDeal, 7), 3),
                  Card.showAfter(Common.ArrayAux.popN(deckToDeal, 7), 0),
                  Card.showAfter(Common.ArrayAux.popN(deckToDeal, 7), 0),
                  Card.showAfter(Common.ArrayAux.popN(deckToDeal, 7), 0),
                  Card.showAfter(Common.ArrayAux.popN(deckToDeal, 7), 0)
                ]),
            foundations: [
              [],
              [],
              [],
              []
            ],
            stock: [Common.ArrayAux.popN(deckToDeal, 3)],
            waste: [],
            free: []
          }
        ];
}

var forEachSpace$1 = ScorpionBase.makeForEachSpace(undefined, undefined, undefined, undefined, undefined, undefined, stockRules, undefined, undefined);

var ScorpionRules_dropCheck = ScorpionBase.dropCheck;

var ScorpionRules_dragCheck = ScorpionBase.dragCheck;

var ScorpionRules_dragSizeCheck = ScorpionBase.dragSizeCheck;

var ScorpionRules_pileBaseCheck = ScorpionBase.pileBaseCheck;

var ScorpionRules_foundationBaseCheck = ScorpionBase.foundationBaseCheck;

var ScorpionRules_foundationCheck = ScorpionBase.foundationCheck;

var ScorpionRules_pileBaseRules = ScorpionBase.pileBaseRules;

var ScorpionRules_pileRules = ScorpionBase.pileRules;

var ScorpionRules_foundationBaseRules = ScorpionBase.foundationBaseRules;

var ScorpionRules_foundationRules = ScorpionBase.foundationRules;

var ScorpionRules_wasteRules = ScorpionBase.wasteRules;

var ScorpionRules_stockBaseRules = ScorpionBase.stockBaseRules;

var ScorpionRules_freeRules = ScorpionBase.freeRules;

var ScorpionRules_freeBaseRules = ScorpionBase.freeBaseRules;

var ScorpionRules_makeForEachSpace = ScorpionBase.makeForEachSpace;

var ScorpionRules = {
  game_encode: game_encode$1,
  game_decode: game_decode$1,
  getSpace: getSpace$1,
  spaceToString: spaceToString$1,
  deck_encode: deck_encode$1,
  deck_decode: deck_decode$1,
  dropCheck: ScorpionRules_dropCheck,
  dragCheck: ScorpionRules_dragCheck,
  dragSizeCheck: ScorpionRules_dragSizeCheck,
  pileBaseCheck: ScorpionRules_pileBaseCheck,
  foundationBaseCheck: ScorpionRules_foundationBaseCheck,
  foundationCheck: ScorpionRules_foundationCheck,
  applyLiftToDragPile: applyLiftToDragPile$1,
  applyMoveToDragPile: applyMoveToDragPile$1,
  removeDragFromGame: removeDragFromGame$1,
  pileBaseRules: ScorpionRules_pileBaseRules,
  pileRules: ScorpionRules_pileRules,
  foundationBaseRules: ScorpionRules_foundationBaseRules,
  foundationRules: ScorpionRules_foundationRules,
  wasteRules: ScorpionRules_wasteRules,
  stockBaseRules: ScorpionRules_stockBaseRules,
  freeRules: ScorpionRules_freeRules,
  freeBaseRules: ScorpionRules_freeBaseRules,
  makeForEachSpace: ScorpionRules_makeForEachSpace,
  AllCards: AllCards$1,
  initiateGame: initiateGame$5,
  winCheck: winCheck,
  stockRules: stockRules,
  forEachSpace: forEachSpace$1,
  Board: undefined
};

var Scorpion = GameBase.Create({
      game_encode: game_encode$1,
      game_decode: game_decode$1,
      deck_encode: deck_encode$1,
      deck_decode: deck_decode$1,
      getSpace: getSpace$1,
      spaceToString: spaceToString$1,
      initiateGame: initiateGame$5,
      forEachSpace: forEachSpace$1,
      removeDragFromGame: removeDragFromGame$1,
      winCheck: winCheck,
      applyLiftToDragPile: applyLiftToDragPile$1,
      applyMoveToDragPile: applyMoveToDragPile$1,
      Board: StandardBoard,
      AllCards: AllCards$1
    });

export {
  flipLastUp ,
  SpiderBase ,
  SpiderRules ,
  OneSuit ,
  TwoSuit ,
  FourSuit ,
  SimpleSimonRules ,
  SimpleSimon ,
  MrsMop ,
  ScorpionBase ,
  ScorpionRules ,
  Scorpion ,
}
/* SpiderBase Not a pure module */
