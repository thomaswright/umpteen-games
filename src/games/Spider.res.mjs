// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../Card.res.mjs";
import * as Bases from "./Bases.res.mjs";
import * as Boards from "./Boards.res.mjs";
import * as Common from "../Common.res.mjs";
import * as GameBase from "../GameBase.res.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as GameCommons from "./GameCommons.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";

function stockRules(_game, _card, i, j) {
  return {
          locationAdjustment: {
            x: Math.imul(i, 20),
            y: 0,
            z: (Math.imul(i, 10) + j | 0) + 1 | 0
          },
          baseSpace: "Stock",
          dragPile: (function () {
              
            }),
          autoProgress: (function () {
              return "DoNothing";
            }),
          droppedUpon: (function (_game, _dragPile) {
              
            }),
          onStateChange: (function (element) {
              Card.hide(element);
            }),
          onClick: (function (game) {
              return Core__Option.map(Common.ArrayAux.getLast(game.stock), (function (stockGroup) {
                            return {
                                    piles: GameCommons.flipLastUp(game.piles.map(function (pile, i) {
                                              return Core__Option.mapOr(stockGroup[i], pile, (function (v) {
                                                            return pile.concat([v]);
                                                          }));
                                            })),
                                    foundations: game.foundations,
                                    stock: game.stock.slice(0, game.stock.length - 1 | 0),
                                    waste: game.waste,
                                    free: game.free
                                  };
                          }));
            })
        };
}

var SpiderRules = {
  stockRules: stockRules
};

var forEachSpace = Bases.Spider.makeForEachSpace(undefined, undefined, undefined, undefined, undefined, undefined, stockRules, undefined, undefined);

function initiateGame() {
  var shuffledDeck = Core__Array.toShuffled([].concat(Card.getOneSuitDeck(0, "Spades", true), Card.getOneSuitDeck(1, "Spades", true), Card.getOneSuitDeck(2, "Spades", true), Card.getOneSuitDeck(3, "Spades", true), Card.getOneSuitDeck(4, "Spades", true), Card.getOneSuitDeck(5, "Spades", true), Card.getOneSuitDeck(6, "Spades", true), Card.getOneSuitDeck(7, "Spades", true)));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: GameCommons.flipLastUp([
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5)
                ]),
            foundations: [
              [],
              [],
              [],
              [],
              [],
              [],
              [],
              []
            ],
            stock: [
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10)
            ],
            waste: [],
            free: []
          }
        ];
}

var OneSuit = GameBase.Create({
      game_encode: Bases.Spider.game_encode,
      game_decode: Bases.Spider.game_decode,
      deck_encode: Bases.Spider.deck_encode,
      deck_decode: Bases.Spider.deck_decode,
      getSpace: Bases.Spider.getSpace,
      spaceToString: Bases.Spider.spaceToString,
      initiateGame: initiateGame,
      forEachSpace: forEachSpace,
      removeDragFromGame: Bases.Spider.removeDragFromGame,
      winCheck: Bases.Spider.winCheck,
      applyLiftToDragPile: Bases.Spider.applyLiftToDragPile,
      applyMoveToDragPile: Bases.Spider.applyMoveToDragPile,
      Board: Boards.Spider,
      AllCards: Bases.Spider.AllCards
    });

var forEachSpace$1 = Bases.Spider.makeForEachSpace(undefined, undefined, undefined, undefined, undefined, undefined, stockRules, undefined, undefined);

function initiateGame$1() {
  var shuffledDeck = Core__Array.toShuffled([].concat(Card.getOneSuitDeck(0, "Spades", true), Card.getOneSuitDeck(1, "Spades", true), Card.getOneSuitDeck(2, "Spades", true), Card.getOneSuitDeck(3, "Spades", true), Card.getOneSuitDeck(4, "Hearts", true), Card.getOneSuitDeck(5, "Hearts", true), Card.getOneSuitDeck(6, "Hearts", true), Card.getOneSuitDeck(7, "Hearts", true)));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: GameCommons.flipLastUp([
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5)
                ]),
            foundations: [
              [],
              [],
              [],
              [],
              [],
              [],
              [],
              []
            ],
            stock: [
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10)
            ],
            waste: [],
            free: []
          }
        ];
}

var TwoSuit = GameBase.Create({
      game_encode: Bases.Spider.game_encode,
      game_decode: Bases.Spider.game_decode,
      deck_encode: Bases.Spider.deck_encode,
      deck_decode: Bases.Spider.deck_decode,
      getSpace: Bases.Spider.getSpace,
      spaceToString: Bases.Spider.spaceToString,
      initiateGame: initiateGame$1,
      forEachSpace: forEachSpace$1,
      removeDragFromGame: Bases.Spider.removeDragFromGame,
      winCheck: Bases.Spider.winCheck,
      applyLiftToDragPile: Bases.Spider.applyLiftToDragPile,
      applyMoveToDragPile: Bases.Spider.applyMoveToDragPile,
      Board: Boards.Spider,
      AllCards: Bases.Spider.AllCards
    });

var forEachSpace$2 = Bases.Spider.makeForEachSpace(undefined, undefined, undefined, undefined, undefined, undefined, stockRules, undefined, undefined);

function initiateGame$2() {
  var shuffledDeck = Core__Array.toShuffled([].concat(Card.getDeck(0, true), Card.getDeck(1, true)));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: GameCommons.flipLastUp([
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5)
                ]),
            foundations: [
              [],
              [],
              [],
              [],
              [],
              [],
              [],
              []
            ],
            stock: [
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10)
            ],
            waste: [],
            free: []
          }
        ];
}

var FourSuit = GameBase.Create({
      game_encode: Bases.Spider.game_encode,
      game_decode: Bases.Spider.game_decode,
      deck_encode: Bases.Spider.deck_encode,
      deck_decode: Bases.Spider.deck_decode,
      getSpace: Bases.Spider.getSpace,
      spaceToString: Bases.Spider.spaceToString,
      initiateGame: initiateGame$2,
      forEachSpace: forEachSpace$2,
      removeDragFromGame: Bases.Spider.removeDragFromGame,
      winCheck: Bases.Spider.winCheck,
      applyLiftToDragPile: Bases.Spider.applyLiftToDragPile,
      applyMoveToDragPile: Bases.Spider.applyMoveToDragPile,
      Board: Boards.Spider,
      AllCards: Bases.Spider.AllCards
    });

var forEachSpace$3 = Bases.Spider.makeForEachSpace(undefined, undefined, undefined, undefined, undefined, undefined, stockRules, undefined, undefined);

function initiateGame$3() {
  var shuffledDeck = Core__Array.toShuffled(Card.getDeck(0, false));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: [
              Common.ArrayAux.popN(deckToDeal, 8),
              Common.ArrayAux.popN(deckToDeal, 8),
              Common.ArrayAux.popN(deckToDeal, 8),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 6),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 4),
              Common.ArrayAux.popN(deckToDeal, 3),
              Common.ArrayAux.popN(deckToDeal, 2),
              Common.ArrayAux.popN(deckToDeal, 1)
            ],
            foundations: [
              [],
              [],
              [],
              []
            ],
            stock: [],
            waste: [],
            free: []
          }
        ];
}

var SimpleSimon = GameBase.Create({
      game_encode: Bases.Spider.game_encode,
      game_decode: Bases.Spider.game_decode,
      deck_encode: Bases.Spider.deck_encode,
      deck_decode: Bases.Spider.deck_decode,
      getSpace: Bases.Spider.getSpace,
      spaceToString: Bases.Spider.spaceToString,
      initiateGame: initiateGame$3,
      forEachSpace: forEachSpace$3,
      removeDragFromGame: Bases.Spider.removeDragFromGame,
      winCheck: Bases.Spider.winCheck,
      applyLiftToDragPile: Bases.Spider.applyLiftToDragPile,
      applyMoveToDragPile: Bases.Spider.applyMoveToDragPile,
      Board: Boards.SimpleSimon,
      AllCards: Bases.Spider.AllCards
    });

var forEachSpace$4 = Bases.Spider.makeForEachSpace(undefined, undefined, undefined, undefined, undefined, undefined, stockRules, undefined, undefined);

function initiateGame$4() {
  var shuffledDeck = Core__Array.toShuffled([].concat(Card.getDeck(0, false), Card.getDeck(1, false)));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: GameCommons.flipLastUp([
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8),
                  Common.ArrayAux.popN(deckToDeal, 8)
                ]),
            foundations: [
              [],
              [],
              [],
              [],
              [],
              [],
              [],
              []
            ],
            stock: [],
            waste: [],
            free: []
          }
        ];
}

var MrsMop = GameBase.Create({
      game_encode: Bases.Spider.game_encode,
      game_decode: Bases.Spider.game_decode,
      deck_encode: Bases.Spider.deck_encode,
      deck_decode: Bases.Spider.deck_decode,
      getSpace: Bases.Spider.getSpace,
      spaceToString: Bases.Spider.spaceToString,
      initiateGame: initiateGame$4,
      forEachSpace: forEachSpace$4,
      removeDragFromGame: Bases.Spider.removeDragFromGame,
      winCheck: Bases.Spider.winCheck,
      applyLiftToDragPile: Bases.Spider.applyLiftToDragPile,
      applyMoveToDragPile: Bases.Spider.applyMoveToDragPile,
      Board: Boards.SimpleSimon,
      AllCards: Bases.Spider.AllCards
    });

var forEachSpace$5 = Bases.Scorpion.makeForEachSpace(undefined, undefined, undefined, undefined, undefined, undefined, stockRules, undefined, undefined);

function initiateGame$5() {
  var shuffledDeck = Core__Array.toShuffled(Card.getDeck(0, true));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: GameCommons.flipLastUp([
                  Card.showAfter(Common.ArrayAux.popN(deckToDeal, 7), 3),
                  Card.showAfter(Common.ArrayAux.popN(deckToDeal, 7), 3),
                  Card.showAfter(Common.ArrayAux.popN(deckToDeal, 7), 3),
                  Card.showAfter(Common.ArrayAux.popN(deckToDeal, 7), 0),
                  Card.showAfter(Common.ArrayAux.popN(deckToDeal, 7), 0),
                  Card.showAfter(Common.ArrayAux.popN(deckToDeal, 7), 0),
                  Card.showAfter(Common.ArrayAux.popN(deckToDeal, 7), 0)
                ]),
            foundations: [
              [],
              [],
              [],
              []
            ],
            stock: [Common.ArrayAux.popN(deckToDeal, 3)],
            waste: [],
            free: []
          }
        ];
}

var Scorpion = GameBase.Create({
      game_encode: Bases.Scorpion.game_encode,
      game_decode: Bases.Scorpion.game_decode,
      deck_encode: Bases.Scorpion.deck_encode,
      deck_decode: Bases.Scorpion.deck_decode,
      getSpace: Bases.Scorpion.getSpace,
      spaceToString: Bases.Scorpion.spaceToString,
      initiateGame: initiateGame$5,
      forEachSpace: forEachSpace$5,
      removeDragFromGame: Bases.Scorpion.removeDragFromGame,
      winCheck: Bases.Scorpion.winCheck,
      applyLiftToDragPile: Bases.Scorpion.applyLiftToDragPile,
      applyMoveToDragPile: Bases.Scorpion.applyMoveToDragPile,
      Board: Boards.Spider,
      AllCards: Bases.Scorpion.AllCards
    });

export {
  SpiderRules ,
  OneSuit ,
  TwoSuit ,
  FourSuit ,
  SimpleSimon ,
  MrsMop ,
  Scorpion ,
}
/* OneSuit Not a pure module */
