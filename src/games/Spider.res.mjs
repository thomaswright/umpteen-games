// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../Card.res.mjs";
import * as Bases from "../Bases.res.mjs";
import * as Rules from "../Rules.res.mjs";
import * as Boards from "../Boards.res.mjs";
import * as Common from "../Common.res.mjs";
import * as GameBase from "../GameBase.res.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as GameCommons from "../GameCommons.res.mjs";

var forEachSpace = Bases.Spider.makeForEachSpace(undefined, undefined, undefined, undefined, undefined, undefined, Rules.DealAll.stockRules, undefined, undefined);

function initiateGame() {
  var shuffledDeck = Core__Array.toShuffled([].concat(Card.getOneSuitDeck(0, "Spades", true), Card.getOneSuitDeck(1, "Spades", true), Card.getOneSuitDeck(2, "Spades", true), Card.getOneSuitDeck(3, "Spades", true), Card.getOneSuitDeck(4, "Spades", true), Card.getOneSuitDeck(5, "Spades", true), Card.getOneSuitDeck(6, "Spades", true), Card.getOneSuitDeck(7, "Spades", true)));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            tableau: GameCommons.flipLastUp([
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5)
                ]),
            foundations: [
              [],
              [],
              [],
              [],
              [],
              [],
              [],
              []
            ],
            stock: [
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10)
            ],
            waste: [],
            free: []
          }
        ];
}

var OneSuit = GameBase.Create({
      game_encode: Bases.Spider.game_encode,
      game_decode: Bases.Spider.game_decode,
      deck_encode: Bases.Spider.deck_encode,
      deck_decode: Bases.Spider.deck_decode,
      getSpace: Bases.Spider.getSpace,
      spaceToString: Bases.Spider.spaceToString,
      initiateGame: initiateGame,
      forEachSpace: forEachSpace,
      removeDragFromGame: Bases.Spider.removeDragFromGame,
      winCheck: Bases.Spider.winCheck,
      applyLiftToDragPile: Bases.Spider.applyLiftToDragPile,
      applyMoveToDragPile: Bases.Spider.applyMoveToDragPile,
      Board: Boards.SFT,
      AllCards: Bases.Spider.AllCards
    });

var forEachSpace$1 = Bases.Spider.makeForEachSpace(undefined, undefined, undefined, undefined, undefined, undefined, Rules.DealAll.stockRules, undefined, undefined);

function initiateGame$1() {
  var shuffledDeck = Core__Array.toShuffled([].concat(Card.getOneSuitDeck(0, "Spades", true), Card.getOneSuitDeck(1, "Spades", true), Card.getOneSuitDeck(2, "Spades", true), Card.getOneSuitDeck(3, "Spades", true), Card.getOneSuitDeck(4, "Hearts", true), Card.getOneSuitDeck(5, "Hearts", true), Card.getOneSuitDeck(6, "Hearts", true), Card.getOneSuitDeck(7, "Hearts", true)));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            tableau: GameCommons.flipLastUp([
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5)
                ]),
            foundations: [
              [],
              [],
              [],
              [],
              [],
              [],
              [],
              []
            ],
            stock: [
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10)
            ],
            waste: [],
            free: []
          }
        ];
}

var TwoSuit = GameBase.Create({
      game_encode: Bases.Spider.game_encode,
      game_decode: Bases.Spider.game_decode,
      deck_encode: Bases.Spider.deck_encode,
      deck_decode: Bases.Spider.deck_decode,
      getSpace: Bases.Spider.getSpace,
      spaceToString: Bases.Spider.spaceToString,
      initiateGame: initiateGame$1,
      forEachSpace: forEachSpace$1,
      removeDragFromGame: Bases.Spider.removeDragFromGame,
      winCheck: Bases.Spider.winCheck,
      applyLiftToDragPile: Bases.Spider.applyLiftToDragPile,
      applyMoveToDragPile: Bases.Spider.applyMoveToDragPile,
      Board: Boards.SFT,
      AllCards: Bases.Spider.AllCards
    });

var forEachSpace$2 = Bases.Spider.makeForEachSpace(undefined, undefined, undefined, undefined, undefined, undefined, Rules.DealAll.stockRules, undefined, undefined);

function initiateGame$2() {
  var shuffledDeck = Core__Array.toShuffled([].concat(Card.getDeck(0, true), Card.getDeck(1, true)));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            tableau: GameCommons.flipLastUp([
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5)
                ]),
            foundations: [
              [],
              [],
              [],
              [],
              [],
              [],
              [],
              []
            ],
            stock: [
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10)
            ],
            waste: [],
            free: []
          }
        ];
}

var FourSuit = GameBase.Create({
      game_encode: Bases.Spider.game_encode,
      game_decode: Bases.Spider.game_decode,
      deck_encode: Bases.Spider.deck_encode,
      deck_decode: Bases.Spider.deck_decode,
      getSpace: Bases.Spider.getSpace,
      spaceToString: Bases.Spider.spaceToString,
      initiateGame: initiateGame$2,
      forEachSpace: forEachSpace$2,
      removeDragFromGame: Bases.Spider.removeDragFromGame,
      winCheck: Bases.Spider.winCheck,
      applyLiftToDragPile: Bases.Spider.applyLiftToDragPile,
      applyMoveToDragPile: Bases.Spider.applyMoveToDragPile,
      Board: Boards.SFT,
      AllCards: Bases.Spider.AllCards
    });

export {
  OneSuit ,
  TwoSuit ,
  FourSuit ,
}
/* OneSuit Not a pure module */
