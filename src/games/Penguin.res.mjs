// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../Card.res.mjs";
import * as Bases from "../Bases.res.mjs";
import * as Rules from "../Rules.res.mjs";
import * as Boards from "../Boards.res.mjs";
import * as Common from "../Common.res.mjs";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as GameBase from "../GameBase.res.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as GameCommons from "../GameCommons.res.mjs";

function initiateGame() {
  var shuffledDeck = Core__Array.toShuffled(Card.getDeck(0, false));
  var deckToDeal = {
    contents: shuffledDeck
  };
  var beak = deckToDeal.contents[0];
  var otherBeaks = [];
  deckToDeal.contents = Core__Array.filterMap(deckToDeal.contents, (function (v) {
          if (v.card.rank === beak.card.rank && Caml_obj.notequal(v, beak)) {
            otherBeaks.push(v);
            return ;
          } else {
            return v;
          }
        }));
  return [
          shuffledDeck,
          {
            tableau: [
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7)
            ],
            foundations: [
              [],
              [otherBeaks[0]],
              [otherBeaks[1]],
              [otherBeaks[2]]
            ],
            foundations2: [],
            stock: [],
            waste: [],
            free: [
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined
            ]
          }
        ];
}

function foundationBaseRules(i) {
  return {
          droppedUpon: (function (game, dragPile) {
              var justOne = dragPile.length === 1;
              var dragPileBase = dragPile[0];
              var noChildren = game.tableau[i].length === 0;
              var second = game.foundations[1][0];
              if (noChildren && justOne && dragPileBase.card.rank === second.card.rank) {
                return {
                        tableau: GameCommons.flipLastUp(game.tableau),
                        foundations: Common.ArrayAux.update(game.foundations, i, (function (param) {
                                return dragPile;
                              })),
                        foundations2: game.foundations2,
                        stock: game.stock,
                        waste: game.waste,
                        free: game.free
                      };
              }
              
            }),
          autoProgress: "Seek",
          onClick: (function (param) {
              
            })
        };
}

function tableauBaseRules(game, i) {
  return {
          droppedUpon: (function (gameRemoved, dragPile) {
              var dragPileBase = dragPile[0];
              var noChildren = game.tableau[i].length === 0;
              var second = game.foundations[1][0];
              if (noChildren && Card.rankIsAboveCyclic(second, dragPileBase)) {
                return {
                        tableau: GameCommons.flipLastUp(Common.ArrayAux.update(gameRemoved.tableau, i, (function (param) {
                                    return dragPile;
                                  }))),
                        foundations: gameRemoved.foundations,
                        foundations2: gameRemoved.foundations2,
                        stock: gameRemoved.stock,
                        waste: gameRemoved.waste,
                        free: gameRemoved.free
                      };
              }
              
            }),
          autoProgress: "Accept",
          onClick: (function (param) {
              
            })
        };
}

var forEachSpace = Bases.Penguin.makeForEachSpace(tableauBaseRules, undefined, foundationBaseRules, undefined, undefined, undefined, undefined, undefined, undefined, Rules.FreeCell.freeBaseRules, Rules.FreeCell.freeRules);

var Game = GameBase.Create({
      game_encode: Bases.Penguin.game_encode,
      game_decode: Bases.Penguin.game_decode,
      deck_encode: Bases.Penguin.deck_encode,
      deck_decode: Bases.Penguin.deck_decode,
      getSpace: Bases.Penguin.getSpace,
      spaceToString: Bases.Penguin.spaceToString,
      initiateGame: initiateGame,
      forEachSpace: forEachSpace,
      removeDragFromGame: Bases.Penguin.removeDragFromGame,
      winCheck: Bases.Penguin.winCheck,
      applyLiftToDragPile: Bases.Penguin.applyLiftToDragPile,
      applyMoveToDragPile: Bases.Penguin.applyMoveToDragPile,
      Board: Boards.FRT3,
      AllCards: Bases.Penguin.AllCards
    });

export {
  Game ,
}
/* Game Not a pure module */
