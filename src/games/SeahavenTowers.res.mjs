// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../Card.res.mjs";
import * as Bases from "../Bases.res.mjs";
import * as Rules from "../Rules.res.mjs";
import * as Boards from "../Boards.res.mjs";
import * as Common from "../Common.res.mjs";
import * as GameBase from "../GameBase.res.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";

function initiateGame() {
  var shuffledDeck = Core__Array.toShuffled(Card.getDeck(0, false));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            tableau: [
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5)
            ],
            foundations: [
              [],
              [],
              [],
              []
            ],
            stock: [],
            waste: [],
            free: [
              Common.ArrayAux.popN(deckToDeal, 1)[0],
              Common.ArrayAux.popN(deckToDeal, 1)[0],
              undefined,
              undefined
            ]
          }
        ];
}

var forEachSpace = Bases.SeahavenTowers.makeForEachSpace(undefined, undefined, undefined, undefined, undefined, undefined, undefined, Rules.FreeCell.freeBaseRules, Rules.FreeCell.freeRules);

var Game = GameBase.Create({
      game_encode: Bases.SeahavenTowers.game_encode,
      game_decode: Bases.SeahavenTowers.game_decode,
      deck_encode: Bases.SeahavenTowers.deck_encode,
      deck_decode: Bases.SeahavenTowers.deck_decode,
      getSpace: Bases.SeahavenTowers.getSpace,
      spaceToString: Bases.SeahavenTowers.spaceToString,
      initiateGame: initiateGame,
      forEachSpace: forEachSpace,
      removeDragFromGame: Bases.SeahavenTowers.removeDragFromGame,
      winCheck: Bases.SeahavenTowers.winCheck,
      applyLiftToDragPile: Bases.SeahavenTowers.applyLiftToDragPile,
      applyMoveToDragPile: Bases.SeahavenTowers.applyMoveToDragPile,
      Board: Boards.FRT,
      AllCards: Bases.SeahavenTowers.AllCards
    });

export {
  Game ,
}
/* Game Not a pure module */
