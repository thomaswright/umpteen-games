// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../Card.res.mjs";
import * as Bases from "./Bases.res.mjs";
import * as Boards from "./Boards.res.mjs";
import * as Common from "../Common.res.mjs";
import * as GameBase from "../GameBase.res.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";

function initiateGame() {
  var shuffledDeck = Core__Array.toShuffled(Card.getDeck(0, false));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: [
              Common.ArrayAux.popN(deckToDeal, 1),
              Common.ArrayAux.popN(deckToDeal, 2),
              Common.ArrayAux.popN(deckToDeal, 3),
              Common.ArrayAux.popN(deckToDeal, 4),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 6),
              Common.ArrayAux.popN(deckToDeal, 7)
            ],
            foundations: [
              [],
              [],
              [],
              []
            ],
            stock: [Card.hideAfter(deckToDeal.contents, 0)],
            waste: [],
            free: []
          }
        ];
}

function wasteRules(game, card, i) {
  return {
          locationAdjustment: {
            x: Math.imul(20, i),
            y: 0,
            z: i + 1 | 0
          },
          baseSpace: "Waste",
          dragPile: (function () {
              if (i === (game.waste.length - 1 | 0)) {
                return [card];
              }
              
            }),
          autoProgress: (function () {
              return "DoNothing";
            }),
          droppedUpon: (function (param, param$1) {
              
            }),
          onStateChange: (function (element) {
              Card.showOrHide(card, element);
            }),
          onClick: (function (param) {
              
            })
        };
}

function stockRules(_game, card, _i, j) {
  return {
          locationAdjustment: {
            x: 0,
            y: 0,
            z: j + 1 | 0
          },
          baseSpace: "Stock",
          dragPile: (function () {
              
            }),
          autoProgress: (function () {
              return "DoNothing";
            }),
          droppedUpon: (function (param, param$1) {
              
            }),
          onStateChange: (function (element) {
              Card.showOrHide(card, element);
            }),
          onClick: (function (game) {
              var realStock = game.stock[0];
              return {
                      piles: game.piles,
                      foundations: game.foundations,
                      stock: Common.ArrayAux.update(game.stock, 0, (function (v) {
                              return v.slice(0, realStock.length - 1 | 0);
                            })),
                      waste: game.waste.concat(Card.showAfter(realStock.slice(realStock.length - 1 | 0), 0)),
                      free: game.free
                    };
            })
        };
}

function stockBaseRules() {
  return {
          droppedUpon: (function (_game, _dragPile) {
              
            }),
          autoProgress: "DoNothing",
          onClick: (function (game) {
              return {
                      piles: game.piles,
                      foundations: game.foundations,
                      stock: [Card.hideAfter(game.waste.toReversed(), 0)],
                      waste: [],
                      free: game.free
                    };
            })
        };
}

var forEachSpace = Bases.Klondike.makeForEachSpace(undefined, undefined, undefined, undefined, wasteRules, stockBaseRules, stockRules, undefined, undefined);

var Game = GameBase.Create({
      game_encode: Bases.Klondike.game_encode,
      game_decode: Bases.Klondike.game_decode,
      deck_encode: Bases.Klondike.deck_encode,
      deck_decode: Bases.Klondike.deck_decode,
      getSpace: Bases.Klondike.getSpace,
      spaceToString: Bases.Klondike.spaceToString,
      initiateGame: initiateGame,
      forEachSpace: forEachSpace,
      removeDragFromGame: Bases.Klondike.removeDragFromGame,
      winCheck: Bases.Klondike.winCheck,
      applyLiftToDragPile: Bases.Klondike.applyLiftToDragPile,
      applyMoveToDragPile: Bases.Klondike.applyMoveToDragPile,
      Board: Boards.SWFT,
      AllCards: Bases.Klondike.AllCards
    });

export {
  Game ,
}
/* Game Not a pure module */
