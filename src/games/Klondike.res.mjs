// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../Card.res.mjs";
import * as Decco from "@rescript-labs/decco/src/Decco.res.mjs";
import * as React from "react";
import * as Common from "../Common.res.mjs";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as GameBase from "../GameBase.res.mjs";
import * as Js_array from "rescript/lib/es6/js_array.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

var shuffledDeck = Card.getShuffledDeck();

function space_encode(value) {
  if (typeof value !== "object") {
    if (value === "Waste") {
      return ["Waste"];
    } else {
      return ["Stock"];
    }
  }
  switch (value.TAG) {
    case "Card" :
        return [
                "Card",
                Card.card_encode(value._0)
              ];
    case "Foundation" :
        return [
                "Foundation",
                Decco.intToJson(value._0)
              ];
    case "Pile" :
        return [
                "Pile",
                Decco.intToJson(value._0)
              ];
    
  }
}

function space_decode(value) {
  var jsonArr = Js_json.classify(value);
  if (typeof jsonArr !== "object") {
    return Decco.error(undefined, "Not a variant", value);
  }
  if (jsonArr.TAG !== "JSONArray") {
    return Decco.error(undefined, "Not a variant", value);
  }
  var jsonArr$1 = jsonArr._0;
  if (jsonArr$1.length === 0) {
    return Decco.error(undefined, "Expected variant, found empty array", value);
  }
  var tagged = Js_array.map(Js_json.classify, jsonArr$1);
  var match = Belt_Array.getExn(tagged, 0);
  if (typeof match === "object" && match.TAG === "JSONString") {
    switch (match._0) {
      case "Card" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0 = Card.card_decode(Belt_Array.getExn(jsonArr$1, 1));
          if (v0.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "Card",
                      _0: v0._0
                    }
                  };
          }
          var e = v0._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
      case "Foundation" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0$1 = Decco.intFromJson(Belt_Array.getExn(jsonArr$1, 1));
          if (v0$1.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "Foundation",
                      _0: v0$1._0
                    }
                  };
          }
          var e$1 = v0$1._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e$1.path,
                    message: e$1.message,
                    value: e$1.value
                  }
                };
      case "Pile" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0$2 = Decco.intFromJson(Belt_Array.getExn(jsonArr$1, 1));
          if (v0$2.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "Pile",
                      _0: v0$2._0
                    }
                  };
          }
          var e$2 = v0$2._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e$2.path,
                    message: e$2.message,
                    value: e$2.value
                  }
                };
      case "Stock" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "Stock"
                  };
          }
      case "Waste" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          } else {
            return {
                    TAG: "Ok",
                    _0: "Waste"
                  };
          }
      default:
        
    }
  }
  return Decco.error(undefined, "Invalid variant constructor", Belt_Array.getExn(jsonArr$1, 0));
}

function getSpace(element) {
  var d = space_decode(JSON.parse(element.id));
  if (d.TAG === "Ok") {
    return d._0;
  }
  
}

function spaceToString(space) {
  return JSON.stringify(space_encode(space));
}

function dragPileValidation(dragPile) {
  return Core__Array.reduce(dragPile.toReversed(), [
                true,
                undefined
              ], (function (param, onBottom) {
                  if (!param[0]) {
                    return [
                            false,
                            undefined
                          ];
                  }
                  var onTop = param[1];
                  if (onTop !== undefined) {
                    return [
                            Card.rankIsBelow(onTop, onBottom) && Card.color(onTop) !== Card.color(onBottom),
                            onBottom
                          ];
                  } else {
                    return [
                            true,
                            onBottom
                          ];
                  }
                }))[0];
}

function initiateGame() {
  return {
          piles: [
            shuffledDeck.slice(0, 1),
            shuffledDeck.slice(1, 3),
            shuffledDeck.slice(3, 6),
            shuffledDeck.slice(6, 10),
            shuffledDeck.slice(10, 15),
            shuffledDeck.slice(15, 21),
            shuffledDeck.slice(21, 28)
          ],
          foundations: [
            [],
            [],
            [],
            []
          ],
          stock: shuffledDeck.slice(28),
          waste: []
        };
}

function winCheck(game) {
  if (game.piles.every(function (pile) {
          return pile.length === 0;
        }) && game.stock.length === 0) {
    return game.waste.length === 0;
  } else {
    return false;
  }
}

function removeDragFromGame(game, dragPile) {
  var removeDragPile = function (x) {
    return x.filter(function (sCard) {
                return !dragPile.some(function (dCard) {
                            return Caml_obj.equal(sCard, dCard);
                          });
              });
  };
  return {
          piles: game.piles.map(removeDragPile),
          foundations: game.foundations.map(removeDragPile),
          stock: removeDragPile(game.stock),
          waste: removeDragPile(game.waste)
        };
}

function pileBaseRules(i) {
  return {
          droppedUpon: (function (game, dragPile) {
              var dragPileBase = dragPile[0];
              var noChildren = game.piles[i].length === 0;
              if (noChildren && dragPileBase.rank === "RK") {
                return {
                        piles: Common.ArrayAux.update(game.piles, i, (function (param) {
                                return dragPile;
                              })),
                        foundations: game.foundations,
                        stock: game.stock,
                        waste: game.waste
                      };
              }
              
            }),
          autoProgress: false
        };
}

function pileRules(pile, card, i, j) {
  var isLast = j === (pile.length - 1 | 0);
  return {
          locationAdjustment: {
            x: 0,
            y: Math.imul(j, 20),
            z: j + 1 | 0
          },
          baseSpace: {
            TAG: "Pile",
            _0: i
          },
          dragPile: (function () {
              var dragPile = pile.slice(j);
              if (dragPileValidation(dragPile)) {
                return dragPile;
              }
              
            }),
          autoProgress: (function () {
              if (isLast) {
                return {
                        TAG: "Send",
                        _0: [card]
                      };
              } else {
                return "DoNothing";
              }
            }),
          droppedUpon: (function (game, dragPile) {
              var dragPileBase = dragPile[0];
              if (isLast && Card.rankIsAbove(card, dragPileBase) && Card.color(dragPileBase) !== Card.color(card)) {
                return {
                        piles: game.piles.map(function (stack) {
                              return Common.ArrayAux.insertAfter(stack, card, dragPile);
                            }),
                        foundations: game.foundations,
                        stock: game.stock,
                        waste: game.waste
                      };
              }
              
            }),
          applyMoveToOthers: (function (move) {
              Core__Option.mapOr(pile[j + 1 | 0], undefined, (function (x) {
                      move({
                            TAG: "Card",
                            _0: x
                          });
                    }));
            })
        };
}

function foundationBaseRules(i) {
  return {
          droppedUpon: (function (game, dragPile) {
              var justOne = dragPile.length === 1;
              var dragPileBase = dragPile[0];
              var noChildren = game.foundations[i].length === 0;
              if (noChildren && justOne && dragPileBase.rank === "RA") {
                return {
                        piles: game.piles,
                        foundations: Common.ArrayAux.update(game.foundations, i, (function (param) {
                                return dragPile;
                              })),
                        stock: game.stock,
                        waste: game.waste
                      };
              }
              
            }),
          autoProgress: true
        };
}

function foundationRules(game, card, i, j) {
  return {
          locationAdjustment: {
            x: 0,
            y: 0,
            z: j + 1 | 0
          },
          baseSpace: {
            TAG: "Foundation",
            _0: i
          },
          dragPile: (function () {
              if (j === (game.foundations.length - 1 | 0)) {
                return [card];
              }
              
            }),
          autoProgress: (function () {
              return "Seek";
            }),
          droppedUpon: (function (game, dragPile) {
              var justOne = dragPile.length === 1;
              var dragPileBase = dragPile[0];
              if (justOne && dragPileBase.suit === card.suit && Card.rankIsBelow(card, dragPileBase)) {
                return {
                        piles: game.piles,
                        foundations: game.foundations.map(function (stack) {
                              return Common.ArrayAux.insertAfter(stack, card, dragPile);
                            }),
                        stock: game.stock,
                        waste: game.waste
                      };
              }
              
            }),
          applyMoveToOthers: (function (param) {
              
            })
        };
}

function wasteRules(game, card, i) {
  return {
          locationAdjustment: {
            x: Math.imul(20, i),
            y: 0,
            z: i + 1 | 0
          },
          baseSpace: "Waste",
          dragPile: (function () {
              if (i === (game.waste.length - 1 | 0)) {
                return [card];
              }
              
            }),
          autoProgress: (function () {
              return "DoNothing";
            }),
          droppedUpon: (function (param, param$1) {
              
            }),
          applyMoveToOthers: (function (param) {
              
            })
        };
}

function stockRules(i) {
  return {
          locationAdjustment: {
            x: 0,
            y: 0,
            z: i + 1 | 0
          },
          baseSpace: "Stock",
          dragPile: (function () {
              
            }),
          autoProgress: (function () {
              return "DoNothing";
            }),
          droppedUpon: (function (param, param$1) {
              
            }),
          applyMoveToOthers: (function (param) {
              
            })
        };
}

function getRule(game, match) {
  var result = {
    contents: undefined
  };
  game.piles.forEach(function (pile, i) {
        if (Caml_obj.equal({
                TAG: "Pile",
                _0: i
              }, match)) {
          result.contents = {
            TAG: "Static",
            _0: pileBaseRules(i)
          };
        }
        pile.forEach(function (card, j) {
              if (Caml_obj.equal({
                      TAG: "Card",
                      _0: card
                    }, match)) {
                result.contents = {
                  TAG: "Movable",
                  _0: pileRules(pile, card, i, j)
                };
                return ;
              }
              
            });
      });
  game.foundations.forEach(function (foundation, i) {
        if (Caml_obj.equal({
                TAG: "Foundation",
                _0: i
              }, match)) {
          result.contents = {
            TAG: "Static",
            _0: foundationBaseRules(i)
          };
        }
        foundation.forEach(function (card, j) {
              if (Caml_obj.equal({
                      TAG: "Card",
                      _0: card
                    }, match)) {
                result.contents = {
                  TAG: "Movable",
                  _0: foundationRules(game, card, i, j)
                };
                return ;
              }
              
            });
      });
  game.waste.forEach(function (card, i) {
        if (Caml_obj.equal({
                TAG: "Card",
                _0: card
              }, match)) {
          result.contents = {
            TAG: "Movable",
            _0: wasteRules(game, card, i)
          };
          return ;
        }
        
      });
  game.stock.forEach(function (card, i) {
        if (Caml_obj.equal({
                TAG: "Card",
                _0: card
              }, match)) {
          result.contents = {
            TAG: "Movable",
            _0: stockRules(i)
          };
          return ;
        }
        
      });
  return result.contents;
}

async function dealToWaste(setGame, moveToState, autoProgress) {
  var f = function (param) {
    setGame(function (game) {
          return {
                  piles: game.piles,
                  foundations: game.foundations,
                  stock: game.stock.slice(0, game.stock.length - 1 | 0),
                  waste: game.waste.concat(game.stock.slice(game.stock.length - 1 | 0))
                };
        });
    moveToState();
  };
  await Common.numInterval(f, 400, 3);
  return autoProgress();
}

function Klondike$GameRules$Board(props) {
  var game = props.game;
  var autoProgress = props.autoProgress;
  var moveToState = props.moveToState;
  var setGame = props.setGame;
  var setRef = props.setRef;
  return JsxRuntime.jsxs(React.Fragment, {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              ref: Caml_option.some(setRef("Stock")),
                              className: " bg-blue-200 rounded w-14 h-20",
                              id: JSON.stringify(space_encode("Stock")),
                              style: {
                                zIndex: "53"
                              },
                              onClick: (function (param) {
                                  if (game.stock.length === 0) {
                                    setGame(function (game) {
                                          return {
                                                  piles: game.piles,
                                                  foundations: game.foundations,
                                                  stock: game.waste.toReversed(),
                                                  waste: []
                                                };
                                        });
                                    return moveToState();
                                  } else {
                                    dealToWaste(setGame, moveToState, autoProgress);
                                    return ;
                                  }
                                })
                            }, JSON.stringify(space_encode("Stock"))),
                        JsxRuntime.jsx("div", {
                              ref: Caml_option.some(setRef("Waste")),
                              className: " w-14 h-20",
                              id: JSON.stringify(space_encode("Waste"))
                            }, JSON.stringify(space_encode("Waste")))
                      ],
                      className: "flex flex-row gap-3"
                    }),
                JsxRuntime.jsx("div", {
                      children: [
                          [],
                          [],
                          [],
                          []
                        ].map(function (param, i) {
                            return JsxRuntime.jsx("div", {
                                        ref: Caml_option.some(setRef({
                                                  TAG: "Foundation",
                                                  _0: i
                                                })),
                                        className: " border border-slate-200 bg-slate-100 rounded w-14 h-20",
                                        id: JSON.stringify(space_encode({
                                                  TAG: "Foundation",
                                                  _0: i
                                                }))
                                      }, JSON.stringify(space_encode({
                                                TAG: "Foundation",
                                                _0: i
                                              })));
                          }),
                      className: "flex flex-row gap-3 mt-5"
                    }),
                JsxRuntime.jsx("div", {
                      children: [
                          [],
                          [],
                          [],
                          [],
                          [],
                          [],
                          []
                        ].map(function (param, i) {
                            return JsxRuntime.jsx("div", {
                                        ref: Caml_option.some(setRef({
                                                  TAG: "Pile",
                                                  _0: i
                                                })),
                                        className: " border border-slate-200 bg-slate-100  rounded w-14 h-20",
                                        id: JSON.stringify(space_encode({
                                                  TAG: "Pile",
                                                  _0: i
                                                }))
                                      }, JSON.stringify(space_encode({
                                                TAG: "Pile",
                                                _0: i
                                              })));
                          }),
                      className: "flex flex-row gap-3 mt-5"
                    })
              ]
            });
}

var Board = {
  make: Klondike$GameRules$Board
};

function Klondike$GameRules$AllCards(props) {
  var onMouseDown = props.onMouseDown;
  var setRef = props.setRef;
  return JsxRuntime.jsx(React.Fragment, {
              children: shuffledDeck.map(function (card) {
                    return JsxRuntime.jsx(Card.Display.make, {
                                card: card,
                                id: JSON.stringify(space_encode({
                                          TAG: "Card",
                                          _0: card
                                        })),
                                cardRef: setRef({
                                      TAG: "Card",
                                      _0: card
                                    }),
                                onMouseDown: onMouseDown
                              }, JSON.stringify(space_encode({
                                        TAG: "Card",
                                        _0: card
                                      })));
                  })
            });
}

var AllCards = {
  make: Klondike$GameRules$AllCards
};

var GameRules = {
  getSpace: getSpace,
  spaceToString: spaceToString,
  initiateGame: initiateGame,
  getRule: getRule,
  removeDragFromGame: removeDragFromGame,
  winCheck: winCheck,
  Board: Board,
  AllCards: AllCards
};

var Game = GameBase.Create(GameRules);

export {
  GameRules ,
  Game ,
}
/* shuffledDeck Not a pure module */
