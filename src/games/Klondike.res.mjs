// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../Card.res.mjs";
import * as React from "react";
import * as Common from "../Common.res.mjs";
import * as Packer from "./Packer.res.mjs";
import * as GameBase from "../GameBase.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

var KlondikeBase = Packer.Make({
      spec: {
        drop: "AltSuit",
        drag: "AltSuit",
        size: "AnySize",
        depot: "KingDepot",
        foundation: "ByOne"
      }
    });

var spaceToString = KlondikeBase.spaceToString;

function initiateGame() {
  var shuffledDeck = Core__Array.toShuffled(Card.getDeck(0, false));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: [
              Common.ArrayAux.popN(deckToDeal, 1),
              Common.ArrayAux.popN(deckToDeal, 2),
              Common.ArrayAux.popN(deckToDeal, 3),
              Common.ArrayAux.popN(deckToDeal, 4),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 6),
              Common.ArrayAux.popN(deckToDeal, 7)
            ],
            foundations: [
              [],
              [],
              [],
              []
            ],
            stock: [deckToDeal.contents],
            waste: [],
            free: []
          }
        ];
}

function winCheck(game) {
  if (game.piles.every(function (pile) {
          return pile.length === 0;
        }) && game.stock.length === 0) {
    return game.waste.length === 0;
  } else {
    return false;
  }
}

function wasteRules(game, card, i) {
  return {
          locationAdjustment: {
            x: Math.imul(20, i),
            y: 0,
            z: i + 1 | 0
          },
          baseSpace: "Waste",
          dragPile: (function () {
              if (i === (game.waste.length - 1 | 0)) {
                return [card];
              }
              
            }),
          autoProgress: (function () {
              return "DoNothing";
            }),
          droppedUpon: (function (param, param$1) {
              
            }),
          onStateChange: (function (element) {
              Card.showOrHide(card, element);
            }),
          onClick: (function (param) {
              
            })
        };
}

function stockRules(card, i) {
  return {
          locationAdjustment: {
            x: 0,
            y: 0,
            z: i + 1 | 0
          },
          baseSpace: "Stock",
          dragPile: (function () {
              
            }),
          autoProgress: (function () {
              return "DoNothing";
            }),
          droppedUpon: (function (param, param$1) {
              
            }),
          onStateChange: (function (element) {
              Card.showOrHide(card, element);
            }),
          onClick: (function (game) {
              var realStock = game.stock[0];
              return {
                      piles: game.piles,
                      foundations: game.foundations,
                      stock: Common.ArrayAux.update(game.stock, 0, (function (v) {
                              return v.slice(0, realStock.length - 1 | 0);
                            })),
                      waste: game.waste.concat(realStock.slice(realStock.length - 1 | 0)),
                      free: game.free
                    };
            })
        };
}

function stockBaseRules() {
  return {
          droppedUpon: (function (_game, _dragPile) {
              
            }),
          autoProgress: "DoNothing",
          onClick: (function (game) {
              return {
                      piles: game.piles,
                      foundations: game.foundations,
                      stock: [game.waste.toReversed()],
                      waste: [],
                      free: game.free
                    };
            })
        };
}

var forEachSpace = KlondikeBase.makeForEachSpace(undefined, undefined, undefined, undefined, wasteRules, stockBaseRules, stockRules, undefined, undefined);

function Klondike$GameRules$Board(props) {
  var setRef = props.setRef;
  return JsxRuntime.jsxs(React.Fragment, {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              ref: Caml_option.some(setRef("Stock")),
                              className: " bg-black opacity-20 rounded w-14 h-20",
                              id: spaceToString("Stock")
                            }, spaceToString("Stock")),
                        JsxRuntime.jsx("div", {
                              ref: Caml_option.some(setRef("Waste")),
                              className: " w-14 h-20",
                              id: spaceToString("Waste")
                            }, spaceToString("Waste"))
                      ],
                      className: "flex flex-row gap-3"
                    }),
                JsxRuntime.jsx("div", {
                      children: [
                          [],
                          [],
                          [],
                          []
                        ].map(function (param, i) {
                            return JsxRuntime.jsx("div", {
                                        ref: Caml_option.some(setRef({
                                                  TAG: "Foundation",
                                                  _0: i
                                                })),
                                        className: " bg-white opacity-10 rounded w-14 h-20",
                                        id: spaceToString({
                                              TAG: "Foundation",
                                              _0: i
                                            })
                                      }, spaceToString({
                                            TAG: "Foundation",
                                            _0: i
                                          }));
                          }),
                      className: "flex flex-row gap-3 mt-5"
                    }),
                JsxRuntime.jsx("div", {
                      children: [
                          [],
                          [],
                          [],
                          [],
                          [],
                          [],
                          []
                        ].map(function (param, i) {
                            return JsxRuntime.jsx("div", {
                                        ref: Caml_option.some(setRef({
                                                  TAG: "Pile",
                                                  _0: i
                                                })),
                                        className: " bg-black opacity-20  rounded w-14 h-20",
                                        id: spaceToString({
                                              TAG: "Pile",
                                              _0: i
                                            })
                                      }, spaceToString({
                                            TAG: "Pile",
                                            _0: i
                                          }));
                          }),
                      className: "flex flex-row gap-3 mt-5"
                    })
              ]
            });
}

var Board = {
  make: Klondike$GameRules$Board
};

var GameRules_game_encode = KlondikeBase.game_encode;

var GameRules_game_decode = KlondikeBase.game_decode;

var GameRules_deck_encode = KlondikeBase.deck_encode;

var GameRules_deck_decode = KlondikeBase.deck_decode;

var GameRules_getSpace = KlondikeBase.getSpace;

var GameRules_removeDragFromGame = KlondikeBase.removeDragFromGame;

var GameRules_applyLiftToDragPile = KlondikeBase.applyLiftToDragPile;

var GameRules_applyMoveToDragPile = KlondikeBase.applyMoveToDragPile;

var GameRules_AllCards = KlondikeBase.AllCards;

var GameRules = {
  game_encode: GameRules_game_encode,
  game_decode: GameRules_game_decode,
  deck_encode: GameRules_deck_encode,
  deck_decode: GameRules_deck_decode,
  getSpace: GameRules_getSpace,
  spaceToString: spaceToString,
  initiateGame: initiateGame,
  forEachSpace: forEachSpace,
  removeDragFromGame: GameRules_removeDragFromGame,
  winCheck: winCheck,
  applyLiftToDragPile: GameRules_applyLiftToDragPile,
  applyMoveToDragPile: GameRules_applyMoveToDragPile,
  Board: Board,
  AllCards: GameRules_AllCards
};

var Game = GameBase.Create(GameRules);

export {
  KlondikeBase ,
  GameRules ,
  Game ,
}
/* KlondikeBase Not a pure module */
