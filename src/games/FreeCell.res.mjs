// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../Card.res.mjs";
import * as React from "react";
import * as Common from "../Common.res.mjs";
import * as Packer from "./Packer.res.mjs";
import * as GameBase from "../GameBase.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

var FreeCellBase = Packer.Make({
      spec: {
        drop: "AltSuit",
        drag: "AltSuit",
        size: "FreeSize",
        depot: "AnyDepot",
        foundation: "ByOne"
      }
    });

var game_encode = FreeCellBase.game_encode;

var game_decode = FreeCellBase.game_decode;

var getSpace = FreeCellBase.getSpace;

var spaceToString = FreeCellBase.spaceToString;

var deck_encode = FreeCellBase.deck_encode;

var deck_decode = FreeCellBase.deck_decode;

var applyLiftToDragPile = FreeCellBase.applyLiftToDragPile;

var applyMoveToDragPile = FreeCellBase.applyMoveToDragPile;

var removeDragFromGame = FreeCellBase.removeDragFromGame;

var AllCards = FreeCellBase.AllCards;

function winCheck(game) {
  if (game.piles.every(function (pile) {
          return pile.length === 0;
        })) {
    return game.free.every(Core__Option.isNone);
  } else {
    return false;
  }
}

function freeBaseRules(i) {
  return {
          droppedUpon: (function (game, dragPile) {
              var noChildren = Core__Option.isNone(game.free[i]);
              if (noChildren && dragPile.length === 1) {
                return {
                        piles: game.piles,
                        foundations: game.foundations,
                        stock: game.stock,
                        waste: game.waste,
                        free: Common.ArrayAux.update(game.free, i, (function (param) {
                                return dragPile[0];
                              }))
                      };
              }
              
            }),
          autoProgress: "DoNothing",
          onClick: (function (param) {
              
            })
        };
}

function freeRules(card, i) {
  return {
          locationAdjustment: {
            x: 0,
            y: 0,
            z: 1
          },
          baseSpace: {
            TAG: "Free",
            _0: i
          },
          dragPile: (function () {
              return [card];
            }),
          autoProgress: (function () {
              return {
                      TAG: "Send",
                      _0: [card]
                    };
            }),
          droppedUpon: (function (_game, _dragPile) {
              
            }),
          onStateChange: (function (param) {
              
            }),
          onClick: (function (param) {
              
            })
        };
}

var forEachSpace = FreeCellBase.makeForEachSpace(undefined, undefined, undefined, undefined, undefined, undefined, undefined, freeBaseRules, freeRules);

function FreeCell$FreeCellRules$StandardBoard(props) {
  var setRef = props.setRef;
  return JsxRuntime.jsxs(React.Fragment, {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              children: [
                                  [],
                                  [],
                                  [],
                                  []
                                ].map(function (param, i) {
                                    return JsxRuntime.jsx("div", {
                                                ref: Caml_option.some(setRef({
                                                          TAG: "Free",
                                                          _0: i
                                                        })),
                                                className: " bg-black opacity-20   rounded w-14 h-20"
                                              }, spaceToString({
                                                    TAG: "Free",
                                                    _0: i
                                                  }));
                                  }),
                              className: "flex flex-row gap-3"
                            }),
                        JsxRuntime.jsx("div", {
                              children: [
                                  [],
                                  [],
                                  [],
                                  []
                                ].map(function (param, i) {
                                    return JsxRuntime.jsx("div", {
                                                ref: Caml_option.some(setRef({
                                                          TAG: "Foundation",
                                                          _0: i
                                                        })),
                                                className: " bg-white opacity-10  rounded w-14 h-20"
                                              }, spaceToString({
                                                    TAG: "Foundation",
                                                    _0: i
                                                  }));
                                  }),
                              className: "flex flex-row gap-3 ml-10"
                            })
                      ],
                      className: "flex flex-row"
                    }),
                JsxRuntime.jsx("div", {}),
                JsxRuntime.jsx("div", {
                      children: [
                          [],
                          [],
                          [],
                          [],
                          [],
                          [],
                          [],
                          []
                        ].map(function (param, i) {
                            return JsxRuntime.jsx("div", {
                                        ref: Caml_option.some(setRef({
                                                  TAG: "Pile",
                                                  _0: i
                                                })),
                                        className: " bg-black opacity-20   rounded w-14 h-20"
                                      }, spaceToString({
                                            TAG: "Pile",
                                            _0: i
                                          }));
                          }),
                      className: "flex flex-row gap-3 mt-5"
                    })
              ]
            });
}

var StandardBoard = {
  make: FreeCell$FreeCellRules$StandardBoard
};

var FreeCellRules_dropCheck = FreeCellBase.dropCheck;

var FreeCellRules_dragCheck = FreeCellBase.dragCheck;

var FreeCellRules_dragSizeCheck = FreeCellBase.dragSizeCheck;

var FreeCellRules_pileBaseCheck = FreeCellBase.pileBaseCheck;

var FreeCellRules_foundationBaseCheck = FreeCellBase.foundationBaseCheck;

var FreeCellRules_foundationCheck = FreeCellBase.foundationCheck;

var FreeCellRules_pileBaseRules = FreeCellBase.pileBaseRules;

var FreeCellRules_pileRules = FreeCellBase.pileRules;

var FreeCellRules_foundationBaseRules = FreeCellBase.foundationBaseRules;

var FreeCellRules_foundationRules = FreeCellBase.foundationRules;

var FreeCellRules_wasteRules = FreeCellBase.wasteRules;

var FreeCellRules_stockRules = FreeCellBase.stockRules;

var FreeCellRules_stockBaseRules = FreeCellBase.stockBaseRules;

var FreeCellRules_makeForEachSpace = FreeCellBase.makeForEachSpace;

var FreeCellRules = {
  game_encode: game_encode,
  game_decode: game_decode,
  getSpace: getSpace,
  spaceToString: spaceToString,
  deck_encode: deck_encode,
  deck_decode: deck_decode,
  dropCheck: FreeCellRules_dropCheck,
  dragCheck: FreeCellRules_dragCheck,
  dragSizeCheck: FreeCellRules_dragSizeCheck,
  pileBaseCheck: FreeCellRules_pileBaseCheck,
  foundationBaseCheck: FreeCellRules_foundationBaseCheck,
  foundationCheck: FreeCellRules_foundationCheck,
  applyLiftToDragPile: applyLiftToDragPile,
  applyMoveToDragPile: applyMoveToDragPile,
  removeDragFromGame: removeDragFromGame,
  pileBaseRules: FreeCellRules_pileBaseRules,
  pileRules: FreeCellRules_pileRules,
  foundationBaseRules: FreeCellRules_foundationBaseRules,
  foundationRules: FreeCellRules_foundationRules,
  wasteRules: FreeCellRules_wasteRules,
  stockRules: FreeCellRules_stockRules,
  stockBaseRules: FreeCellRules_stockBaseRules,
  makeForEachSpace: FreeCellRules_makeForEachSpace,
  AllCards: AllCards,
  winCheck: winCheck,
  freeBaseRules: freeBaseRules,
  freeRules: freeRules,
  forEachSpace: forEachSpace,
  StandardBoard: StandardBoard
};

function initiateGame() {
  var shuffledDeck = Core__Array.toShuffled(Card.getDeck(0, false));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: [
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 6),
              Common.ArrayAux.popN(deckToDeal, 6),
              Common.ArrayAux.popN(deckToDeal, 6),
              Common.ArrayAux.popN(deckToDeal, 6)
            ],
            foundations: [
              [],
              [],
              [],
              []
            ],
            stock: [],
            waste: [],
            free: [
              undefined,
              undefined,
              undefined,
              undefined
            ]
          }
        ];
}

var OneDeck = GameBase.Create({
      game_encode: game_encode,
      game_decode: game_decode,
      deck_encode: deck_encode,
      deck_decode: deck_decode,
      getSpace: getSpace,
      spaceToString: spaceToString,
      initiateGame: initiateGame,
      forEachSpace: forEachSpace,
      removeDragFromGame: removeDragFromGame,
      winCheck: winCheck,
      applyLiftToDragPile: applyLiftToDragPile,
      applyMoveToDragPile: applyMoveToDragPile,
      Board: StandardBoard,
      AllCards: AllCards
    });

function initiateGame$1() {
  var shuffledDeck = Core__Array.toShuffled([].concat(Card.getDeck(0, false), Card.getDeck(1, false)));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: [
              Common.ArrayAux.popN(deckToDeal, 11),
              Common.ArrayAux.popN(deckToDeal, 11),
              Common.ArrayAux.popN(deckToDeal, 11),
              Common.ArrayAux.popN(deckToDeal, 11),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10)
            ],
            foundations: [
              [],
              [],
              [],
              []
            ],
            stock: [],
            waste: [],
            free: [
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined
            ]
          }
        ];
}

function FreeCell$TwoDeck$Board(props) {
  var setRef = props.setRef;
  return JsxRuntime.jsxs(React.Fragment, {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              children: [
                                  [],
                                  [],
                                  [],
                                  [],
                                  [],
                                  [],
                                  [],
                                  []
                                ].map(function (param, i) {
                                    return JsxRuntime.jsx("div", {
                                                ref: Caml_option.some(setRef({
                                                          TAG: "Free",
                                                          _0: i
                                                        })),
                                                className: "   bg-black opacity-20  rounded w-14 h-20"
                                              }, spaceToString({
                                                    TAG: "Free",
                                                    _0: i
                                                  }));
                                  }),
                              className: "grid grid-cols-4 gap-3"
                            }),
                        JsxRuntime.jsx("div", {
                              children: [
                                  [],
                                  [],
                                  [],
                                  [],
                                  [],
                                  [],
                                  [],
                                  []
                                ].map(function (param, i) {
                                    return JsxRuntime.jsx("div", {
                                                ref: Caml_option.some(setRef({
                                                          TAG: "Foundation",
                                                          _0: i
                                                        })),
                                                className: "   bg-white opacity-10  rounded w-14 h-20"
                                              }, spaceToString({
                                                    TAG: "Foundation",
                                                    _0: i
                                                  }));
                                  }),
                              className: "grid grid-cols-4 gap-3 ml-20"
                            })
                      ],
                      className: "flex flex-row"
                    }),
                JsxRuntime.jsx("div", {}),
                JsxRuntime.jsx("div", {
                      children: [
                          [],
                          [],
                          [],
                          [],
                          [],
                          [],
                          [],
                          [],
                          [],
                          []
                        ].map(function (param, i) {
                            return JsxRuntime.jsx("div", {
                                        ref: Caml_option.some(setRef({
                                                  TAG: "Pile",
                                                  _0: i
                                                })),
                                        className: " bg-black opacity-20  rounded w-14 h-20"
                                      }, spaceToString({
                                            TAG: "Pile",
                                            _0: i
                                          }));
                          }),
                      className: "flex flex-row gap-3 mt-5"
                    })
              ]
            });
}

var Board = {
  make: FreeCell$TwoDeck$Board
};

var TwoDeck = GameBase.Create({
      game_encode: game_encode,
      game_decode: game_decode,
      deck_encode: deck_encode,
      deck_decode: deck_decode,
      getSpace: getSpace,
      spaceToString: spaceToString,
      initiateGame: initiateGame$1,
      forEachSpace: forEachSpace,
      removeDragFromGame: removeDragFromGame,
      winCheck: winCheck,
      applyLiftToDragPile: applyLiftToDragPile,
      applyMoveToDragPile: applyMoveToDragPile,
      Board: Board,
      AllCards: AllCards
    });

var BakersGameBase = Packer.Make({
      spec: {
        drop: "OneSuit",
        drag: "OneSuit",
        size: "FreeSize",
        depot: "AnyDepot",
        foundation: "ByOne"
      }
    });

var game_encode$1 = BakersGameBase.game_encode;

var game_decode$1 = BakersGameBase.game_decode;

var getSpace$1 = BakersGameBase.getSpace;

var spaceToString$1 = BakersGameBase.spaceToString;

var deck_encode$1 = BakersGameBase.deck_encode;

var deck_decode$1 = BakersGameBase.deck_decode;

var applyLiftToDragPile$1 = BakersGameBase.applyLiftToDragPile;

var applyMoveToDragPile$1 = BakersGameBase.applyMoveToDragPile;

var removeDragFromGame$1 = BakersGameBase.removeDragFromGame;

var AllCards$1 = BakersGameBase.AllCards;

var forEachSpace$1 = BakersGameBase.makeForEachSpace(undefined, undefined, undefined, undefined, undefined, undefined, undefined, freeBaseRules, freeRules);

var BakersGameRules_dropCheck = BakersGameBase.dropCheck;

var BakersGameRules_dragCheck = BakersGameBase.dragCheck;

var BakersGameRules_dragSizeCheck = BakersGameBase.dragSizeCheck;

var BakersGameRules_pileBaseCheck = BakersGameBase.pileBaseCheck;

var BakersGameRules_foundationBaseCheck = BakersGameBase.foundationBaseCheck;

var BakersGameRules_foundationCheck = BakersGameBase.foundationCheck;

var BakersGameRules_pileBaseRules = BakersGameBase.pileBaseRules;

var BakersGameRules_pileRules = BakersGameBase.pileRules;

var BakersGameRules_foundationBaseRules = BakersGameBase.foundationBaseRules;

var BakersGameRules_foundationRules = BakersGameBase.foundationRules;

var BakersGameRules_wasteRules = BakersGameBase.wasteRules;

var BakersGameRules_stockRules = BakersGameBase.stockRules;

var BakersGameRules_stockBaseRules = BakersGameBase.stockBaseRules;

var BakersGameRules_freeRules = BakersGameBase.freeRules;

var BakersGameRules_freeBaseRules = BakersGameBase.freeBaseRules;

var BakersGameRules_makeForEachSpace = BakersGameBase.makeForEachSpace;

var BakersGameRules = {
  game_encode: game_encode$1,
  game_decode: game_decode$1,
  getSpace: getSpace$1,
  spaceToString: spaceToString$1,
  deck_encode: deck_encode$1,
  deck_decode: deck_decode$1,
  dropCheck: BakersGameRules_dropCheck,
  dragCheck: BakersGameRules_dragCheck,
  dragSizeCheck: BakersGameRules_dragSizeCheck,
  pileBaseCheck: BakersGameRules_pileBaseCheck,
  foundationBaseCheck: BakersGameRules_foundationBaseCheck,
  foundationCheck: BakersGameRules_foundationCheck,
  applyLiftToDragPile: applyLiftToDragPile$1,
  applyMoveToDragPile: applyMoveToDragPile$1,
  removeDragFromGame: removeDragFromGame$1,
  pileBaseRules: BakersGameRules_pileBaseRules,
  pileRules: BakersGameRules_pileRules,
  foundationBaseRules: BakersGameRules_foundationBaseRules,
  foundationRules: BakersGameRules_foundationRules,
  wasteRules: BakersGameRules_wasteRules,
  stockRules: BakersGameRules_stockRules,
  stockBaseRules: BakersGameRules_stockBaseRules,
  freeRules: BakersGameRules_freeRules,
  freeBaseRules: BakersGameRules_freeBaseRules,
  makeForEachSpace: BakersGameRules_makeForEachSpace,
  AllCards: AllCards$1,
  winCheck: winCheck,
  forEachSpace: forEachSpace$1
};

function initiateGame$2() {
  var shuffledDeck = Core__Array.toShuffled(Card.getDeck(0, false));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: [
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 7),
              Common.ArrayAux.popN(deckToDeal, 6),
              Common.ArrayAux.popN(deckToDeal, 6),
              Common.ArrayAux.popN(deckToDeal, 6),
              Common.ArrayAux.popN(deckToDeal, 6)
            ],
            foundations: [
              [],
              [],
              [],
              []
            ],
            stock: [],
            waste: [],
            free: [
              undefined,
              undefined,
              undefined,
              undefined
            ]
          }
        ];
}

var BakersGame = GameBase.Create({
      game_encode: game_encode$1,
      game_decode: game_decode$1,
      deck_encode: deck_encode$1,
      deck_decode: deck_decode$1,
      getSpace: getSpace$1,
      spaceToString: spaceToString$1,
      initiateGame: initiateGame$2,
      forEachSpace: forEachSpace$1,
      removeDragFromGame: removeDragFromGame$1,
      winCheck: winCheck,
      applyLiftToDragPile: applyLiftToDragPile$1,
      applyMoveToDragPile: applyMoveToDragPile$1,
      Board: StandardBoard,
      AllCards: AllCards$1
    });

function initiateGame$3() {
  var shuffledDeck = Core__Array.toShuffled(Card.getDeck(0, false));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: [
              Common.ArrayAux.popN(deckToDeal, 6),
              Common.ArrayAux.popN(deckToDeal, 6),
              Common.ArrayAux.popN(deckToDeal, 6),
              Common.ArrayAux.popN(deckToDeal, 6),
              Common.ArrayAux.popN(deckToDeal, 6),
              Common.ArrayAux.popN(deckToDeal, 6),
              Common.ArrayAux.popN(deckToDeal, 6),
              Common.ArrayAux.popN(deckToDeal, 6)
            ],
            foundations: [
              [],
              [],
              [],
              []
            ],
            stock: [],
            waste: [],
            free: [
              Common.ArrayAux.popN(deckToDeal, 1)[0],
              Common.ArrayAux.popN(deckToDeal, 1)[0],
              Common.ArrayAux.popN(deckToDeal, 1)[0],
              Common.ArrayAux.popN(deckToDeal, 1)[0],
              undefined,
              undefined,
              undefined,
              undefined
            ]
          }
        ];
}

function FreeCell$EightOff$Board(props) {
  var setRef = props.setRef;
  return JsxRuntime.jsx(React.Fragment, {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsx("div", {
                            children: [
                                [],
                                [],
                                [],
                                []
                              ].map(function (param, i) {
                                  return JsxRuntime.jsx("div", {
                                              ref: Caml_option.some(setRef({
                                                        TAG: "Foundation",
                                                        _0: i
                                                      })),
                                              className: " bg-white opacity-10  rounded w-14 h-20"
                                            }, spaceToString$1({
                                                  TAG: "Foundation",
                                                  _0: i
                                                }));
                                }),
                            className: "flex flex-col gap-3 mr-5"
                          }),
                      JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx("div", {
                                    children: JsxRuntime.jsx("div", {
                                          children: [
                                              [],
                                              [],
                                              [],
                                              [],
                                              [],
                                              [],
                                              [],
                                              []
                                            ].map(function (param, i) {
                                                return JsxRuntime.jsx("div", {
                                                            ref: Caml_option.some(setRef({
                                                                      TAG: "Free",
                                                                      _0: i
                                                                    })),
                                                            className: " bg-black opacity-20   rounded w-14 h-20"
                                                          }, spaceToString$1({
                                                                TAG: "Free",
                                                                _0: i
                                                              }));
                                              }),
                                          className: "flex flex-row gap-3"
                                        }),
                                    className: "flex flex-row"
                                  }),
                              JsxRuntime.jsx("div", {}),
                              JsxRuntime.jsx("div", {
                                    children: [
                                        [],
                                        [],
                                        [],
                                        [],
                                        [],
                                        [],
                                        [],
                                        []
                                      ].map(function (param, i) {
                                          return JsxRuntime.jsx("div", {
                                                      ref: Caml_option.some(setRef({
                                                                TAG: "Pile",
                                                                _0: i
                                                              })),
                                                      className: " bg-black opacity-20   rounded w-14 h-20"
                                                    }, spaceToString$1({
                                                          TAG: "Pile",
                                                          _0: i
                                                        }));
                                        }),
                                    className: "flex flex-row gap-3 mt-5"
                                  })
                            ]
                          })
                    ],
                    className: "flex flex-row"
                  })
            });
}

var Board$1 = {
  make: FreeCell$EightOff$Board
};

var EightOff = GameBase.Create({
      game_encode: game_encode$1,
      game_decode: game_decode$1,
      deck_encode: deck_encode$1,
      deck_decode: deck_decode$1,
      getSpace: getSpace$1,
      spaceToString: spaceToString$1,
      initiateGame: initiateGame$3,
      forEachSpace: forEachSpace$1,
      removeDragFromGame: removeDragFromGame$1,
      winCheck: winCheck,
      applyLiftToDragPile: applyLiftToDragPile$1,
      applyMoveToDragPile: applyMoveToDragPile$1,
      Board: Board$1,
      AllCards: AllCards$1
    });

var SeahavenTowersBase = Packer.Make({
      spec: {
        drop: "OneSuit",
        drag: "OneSuit",
        size: "FreeSize",
        depot: "KingDepot",
        foundation: "ByOne"
      }
    });

function initiateGame$4() {
  var shuffledDeck = Core__Array.toShuffled(Card.getDeck(0, false));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: [
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5)
            ],
            foundations: [
              [],
              [],
              [],
              []
            ],
            stock: [],
            waste: [],
            free: [
              Common.ArrayAux.popN(deckToDeal, 1)[0],
              Common.ArrayAux.popN(deckToDeal, 1)[0],
              undefined,
              undefined
            ]
          }
        ];
}

var forEachSpace$2 = SeahavenTowersBase.makeForEachSpace(undefined, undefined, undefined, undefined, undefined, undefined, undefined, freeBaseRules, freeRules);

var SeahavenTowers = GameBase.Create({
      game_encode: SeahavenTowersBase.game_encode,
      game_decode: SeahavenTowersBase.game_decode,
      deck_encode: SeahavenTowersBase.deck_encode,
      deck_decode: SeahavenTowersBase.deck_decode,
      getSpace: SeahavenTowersBase.getSpace,
      spaceToString: SeahavenTowersBase.spaceToString,
      initiateGame: initiateGame$4,
      forEachSpace: forEachSpace$2,
      removeDragFromGame: SeahavenTowersBase.removeDragFromGame,
      winCheck: winCheck,
      applyLiftToDragPile: SeahavenTowersBase.applyLiftToDragPile,
      applyMoveToDragPile: SeahavenTowersBase.applyMoveToDragPile,
      Board: StandardBoard,
      AllCards: SeahavenTowersBase.AllCards
    });

export {
  FreeCellBase ,
  FreeCellRules ,
  OneDeck ,
  TwoDeck ,
  BakersGameBase ,
  BakersGameRules ,
  BakersGame ,
  EightOff ,
  SeahavenTowersBase ,
  SeahavenTowers ,
}
/* FreeCellBase Not a pure module */
