// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../Card.res.mjs";
import * as Common from "../Common.res.mjs";
import * as Spider from "./Spider.res.mjs";
import * as GameBase from "../GameBase.res.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";

var flipLastUp = Spider.SpiderRules.flipLastUp;

function initiateGame() {
  var shuffledDeck = Core__Array.toShuffled([].concat(Card.getOneSuitDeck(0, "Spades", true), Card.getOneSuitDeck(1, "Spades", true), Card.getOneSuitDeck(2, "Spades", true), Card.getOneSuitDeck(3, "Spades", true), Card.getOneSuitDeck(4, "Hearts", true), Card.getOneSuitDeck(5, "Hearts", true), Card.getOneSuitDeck(6, "Hearts", true), Card.getOneSuitDeck(7, "Hearts", true)));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: flipLastUp([
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 6),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5),
                  Common.ArrayAux.popN(deckToDeal, 5)
                ]),
            foundations: [
              [],
              [],
              [],
              [],
              [],
              [],
              [],
              []
            ],
            stock: [
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10),
              Common.ArrayAux.popN(deckToDeal, 10)
            ]
          }
        ];
}

var GameRules_game_encode = Spider.SpiderRules.game_encode;

var GameRules_game_decode = Spider.SpiderRules.game_decode;

var GameRules_deck_encode = Spider.SpiderRules.deck_encode;

var GameRules_deck_decode = Spider.SpiderRules.deck_decode;

var GameRules_getSpace = Spider.SpiderRules.getSpace;

var GameRules_spaceToString = Spider.SpiderRules.spaceToString;

var GameRules_forEachSpace = Spider.SpiderRules.forEachSpace;

var GameRules_removeDragFromGame = Spider.SpiderRules.removeDragFromGame;

var GameRules_winCheck = Spider.SpiderRules.winCheck;

var GameRules_applyLiftToDragPile = Spider.SpiderRules.applyLiftToDragPile;

var GameRules_applyMoveToDragPile = Spider.SpiderRules.applyMoveToDragPile;

var GameRules_Board = Spider.SpiderRules.Board;

var GameRules_AllCards = Spider.SpiderRules.AllCards;

var GameRules = {
  game_encode: GameRules_game_encode,
  game_decode: GameRules_game_decode,
  deck_encode: GameRules_deck_encode,
  deck_decode: GameRules_deck_decode,
  getSpace: GameRules_getSpace,
  spaceToString: GameRules_spaceToString,
  initiateGame: initiateGame,
  forEachSpace: GameRules_forEachSpace,
  removeDragFromGame: GameRules_removeDragFromGame,
  winCheck: GameRules_winCheck,
  applyLiftToDragPile: GameRules_applyLiftToDragPile,
  applyMoveToDragPile: GameRules_applyMoveToDragPile,
  Board: GameRules_Board,
  AllCards: GameRules_AllCards
};

var Game = GameBase.Create(GameRules);

export {
  GameRules ,
  Game ,
}
/* Game Not a pure module */
