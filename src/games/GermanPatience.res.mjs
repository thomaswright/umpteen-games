// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../Card.res.mjs";
import * as React from "react";
import * as Common from "../Common.res.mjs";
import * as Packer from "./Packer.res.mjs";
import * as GameBase from "../GameBase.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as GameCommons from "./GameCommons.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

var GermanPatienceBase = Packer.Make({
      spec: {
        drop: "CyclicAnySuit",
        drag: "CyclicAnySuit",
        size: "AnySize",
        depot: "AnyDepot",
        foundation: "NoFoundation"
      }
    });

var game_encode = GermanPatienceBase.game_encode;

var game_decode = GermanPatienceBase.game_decode;

var getSpace = GermanPatienceBase.getSpace;

var spaceToString = GermanPatienceBase.spaceToString;

var deck_encode = GermanPatienceBase.deck_encode;

var deck_decode = GermanPatienceBase.deck_decode;

var applyLiftToDragPile = GermanPatienceBase.applyLiftToDragPile;

var applyMoveToDragPile = GermanPatienceBase.applyMoveToDragPile;

var removeDragFromGame = GermanPatienceBase.removeDragFromGame;

var AllCards = GermanPatienceBase.AllCards;

function winCheck(game) {
  return game.piles.every(function (pile) {
              if (pile.length === 13) {
                return GameCommons.decCyclicAnySuitValidation(pile);
              } else {
                return false;
              }
            });
}

function initiateGame() {
  var shuffledDeck = Core__Array.toShuffled([].concat(Card.getDeck(0, true), Card.getDeck(1, true)));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            piles: GameCommons.flipLastUp([
                  Common.ArrayAux.popN(deckToDeal, 1),
                  Common.ArrayAux.popN(deckToDeal, 1),
                  Common.ArrayAux.popN(deckToDeal, 1),
                  Common.ArrayAux.popN(deckToDeal, 1),
                  Common.ArrayAux.popN(deckToDeal, 1),
                  Common.ArrayAux.popN(deckToDeal, 1),
                  Common.ArrayAux.popN(deckToDeal, 1),
                  Common.ArrayAux.popN(deckToDeal, 1)
                ]),
            foundations: [],
            stock: [
              Common.ArrayAux.popN(deckToDeal, 8),
              Common.ArrayAux.popN(deckToDeal, 8),
              Common.ArrayAux.popN(deckToDeal, 8),
              Common.ArrayAux.popN(deckToDeal, 8),
              Common.ArrayAux.popN(deckToDeal, 8),
              Common.ArrayAux.popN(deckToDeal, 8),
              Common.ArrayAux.popN(deckToDeal, 8),
              Common.ArrayAux.popN(deckToDeal, 8),
              Common.ArrayAux.popN(deckToDeal, 8),
              Common.ArrayAux.popN(deckToDeal, 8),
              Common.ArrayAux.popN(deckToDeal, 8),
              Common.ArrayAux.popN(deckToDeal, 8)
            ],
            waste: [],
            free: []
          }
        ];
}

function stockRules(_game, _card, i, j) {
  return {
          locationAdjustment: {
            x: Math.imul(i, 20),
            y: 0,
            z: (Math.imul(i, 10) + j | 0) + 1 | 0
          },
          baseSpace: "Stock",
          dragPile: (function () {
              
            }),
          autoProgress: (function () {
              return "DoNothing";
            }),
          droppedUpon: (function (_game, _dragPile) {
              
            }),
          onStateChange: (function (element) {
              Card.hide(element);
            }),
          onClick: (function (game) {
              return Core__Option.map(Common.ArrayAux.getLast(game.stock), (function (stockGroup) {
                            return {
                                    piles: GameCommons.flipLastUp(game.piles.map(function (pile, i) {
                                              return Core__Option.mapOr(stockGroup[i], pile, (function (v) {
                                                            return pile.concat([v]);
                                                          }));
                                            })),
                                    foundations: game.foundations,
                                    stock: game.stock.slice(0, game.stock.length - 1 | 0),
                                    waste: game.waste,
                                    free: game.free
                                  };
                          }));
            })
        };
}

var forEachSpace = GermanPatienceBase.makeForEachSpace(undefined, undefined, undefined, undefined, undefined, undefined, stockRules, undefined, undefined);

function GermanPatience$GermanPatienceRules$Board(props) {
  var setRef = props.setRef;
  return JsxRuntime.jsxs(React.Fragment, {
              children: [
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx("div", {
                            ref: Caml_option.some(setRef("Stock")),
                            className: " bg-white opacity-10  rounded w-14 h-20 mr-20"
                          }, spaceToString("Stock")),
                      className: "flex flex-row"
                    }),
                JsxRuntime.jsx("div", {}),
                JsxRuntime.jsx("div", {
                      children: Core__Array.make(props.initialGame.piles.length, []).map(function (param, i) {
                            return JsxRuntime.jsx("div", {
                                        ref: Caml_option.some(setRef({
                                                  TAG: "Pile",
                                                  _0: i
                                                })),
                                        className: " bg-black opacity-20   rounded w-14 h-20"
                                      }, spaceToString({
                                            TAG: "Pile",
                                            _0: i
                                          }));
                          }),
                      className: "flex flex-row gap-3 mt-5"
                    })
              ]
            });
}

var Board = {
  make: GermanPatience$GermanPatienceRules$Board
};

var GermanPatienceRules_dropCheck = GermanPatienceBase.dropCheck;

var GermanPatienceRules_dragCheck = GermanPatienceBase.dragCheck;

var GermanPatienceRules_dragSizeCheck = GermanPatienceBase.dragSizeCheck;

var GermanPatienceRules_pileBaseCheck = GermanPatienceBase.pileBaseCheck;

var GermanPatienceRules_foundationBaseCheck = GermanPatienceBase.foundationBaseCheck;

var GermanPatienceRules_foundationCheck = GermanPatienceBase.foundationCheck;

var GermanPatienceRules_pileBaseRules = GermanPatienceBase.pileBaseRules;

var GermanPatienceRules_pileRules = GermanPatienceBase.pileRules;

var GermanPatienceRules_foundationBaseRules = GermanPatienceBase.foundationBaseRules;

var GermanPatienceRules_foundationRules = GermanPatienceBase.foundationRules;

var GermanPatienceRules_wasteRules = GermanPatienceBase.wasteRules;

var GermanPatienceRules_stockBaseRules = GermanPatienceBase.stockBaseRules;

var GermanPatienceRules_freeRules = GermanPatienceBase.freeRules;

var GermanPatienceRules_freeBaseRules = GermanPatienceBase.freeBaseRules;

var GermanPatienceRules_makeForEachSpace = GermanPatienceBase.makeForEachSpace;

var GermanPatienceRules = {
  game_encode: game_encode,
  game_decode: game_decode,
  getSpace: getSpace,
  spaceToString: spaceToString,
  deck_encode: deck_encode,
  deck_decode: deck_decode,
  dropCheck: GermanPatienceRules_dropCheck,
  dragCheck: GermanPatienceRules_dragCheck,
  dragSizeCheck: GermanPatienceRules_dragSizeCheck,
  pileBaseCheck: GermanPatienceRules_pileBaseCheck,
  foundationBaseCheck: GermanPatienceRules_foundationBaseCheck,
  foundationCheck: GermanPatienceRules_foundationCheck,
  applyLiftToDragPile: applyLiftToDragPile,
  applyMoveToDragPile: applyMoveToDragPile,
  removeDragFromGame: removeDragFromGame,
  pileBaseRules: GermanPatienceRules_pileBaseRules,
  pileRules: GermanPatienceRules_pileRules,
  foundationBaseRules: GermanPatienceRules_foundationBaseRules,
  foundationRules: GermanPatienceRules_foundationRules,
  wasteRules: GermanPatienceRules_wasteRules,
  stockBaseRules: GermanPatienceRules_stockBaseRules,
  freeRules: GermanPatienceRules_freeRules,
  freeBaseRules: GermanPatienceRules_freeBaseRules,
  makeForEachSpace: GermanPatienceRules_makeForEachSpace,
  AllCards: AllCards,
  winCheck: winCheck,
  initiateGame: initiateGame,
  stockRules: stockRules,
  forEachSpace: forEachSpace,
  Board: Board
};

var Game = GameBase.Create({
      game_encode: game_encode,
      game_decode: game_decode,
      deck_encode: deck_encode,
      deck_decode: deck_decode,
      getSpace: getSpace,
      spaceToString: spaceToString,
      initiateGame: initiateGame,
      forEachSpace: forEachSpace,
      removeDragFromGame: removeDragFromGame,
      winCheck: winCheck,
      applyLiftToDragPile: applyLiftToDragPile,
      applyMoveToDragPile: applyMoveToDragPile,
      Board: Board,
      AllCards: AllCards
    });

export {
  GermanPatienceBase ,
  GermanPatienceRules ,
  Game ,
}
/* GermanPatienceBase Not a pure module */
