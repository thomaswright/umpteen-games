// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../Card.res.mjs";
import * as Bases from "./Bases.res.mjs";
import * as Boards from "./Boards.res.mjs";
import * as Common from "../Common.res.mjs";
import * as Spider from "./Spider.res.mjs";
import * as GameBase from "../GameBase.res.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as GameCommons from "./GameCommons.res.mjs";

function initiateGame() {
  var shuffledDeck = Core__Array.toShuffled(Card.getDeck(0, false));
  var deckToDeal = {
    contents: shuffledDeck
  };
  var beak = Common.ArrayAux.popN(deckToDeal, 1);
  return [
          shuffledDeck,
          {
            piles: [
              Common.ArrayAux.popN(deckToDeal, 1),
              Common.ArrayAux.popN(deckToDeal, 2),
              Common.ArrayAux.popN(deckToDeal, 3),
              Common.ArrayAux.popN(deckToDeal, 4),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 6),
              Common.ArrayAux.popN(deckToDeal, 7)
            ],
            foundations: [
              beak,
              [],
              [],
              []
            ],
            stock: [Card.hideAfter(deckToDeal.contents, 0)],
            waste: [],
            free: []
          }
        ];
}

function foundationBaseCheck(game, dragPile, i) {
  var justOne = dragPile.length === 1;
  var noChildren = game.foundations[i].length === 0;
  var dragPileBase = dragPile[0];
  if (noChildren && justOne) {
    return dragPileBase.card.rank === game.foundations[0][0].card.rank;
  } else {
    return false;
  }
}

function foundationBaseRules(i) {
  return {
          droppedUpon: (function (game, dragPile) {
              if (foundationBaseCheck(game, dragPile, i)) {
                return {
                        piles: GameCommons.flipLastUp(game.piles),
                        foundations: Common.ArrayAux.update(game.foundations, i, (function (param) {
                                return dragPile;
                              })),
                        stock: game.stock,
                        waste: game.waste,
                        free: game.free
                      };
              }
              
            }),
          autoProgress: "Seek",
          onClick: (function (param) {
              
            })
        };
}

var forEachSpace = Bases.AgnesSorel.makeForEachSpace(undefined, undefined, foundationBaseRules, undefined, undefined, undefined, Spider.SpiderRules.stockRules, undefined, undefined);

var Game = GameBase.Create({
      game_encode: Bases.AgnesSorel.game_encode,
      game_decode: Bases.AgnesSorel.game_decode,
      deck_encode: Bases.AgnesSorel.deck_encode,
      deck_decode: Bases.AgnesSorel.deck_decode,
      getSpace: Bases.AgnesSorel.getSpace,
      spaceToString: Bases.AgnesSorel.spaceToString,
      initiateGame: initiateGame,
      forEachSpace: forEachSpace,
      removeDragFromGame: Bases.AgnesSorel.removeDragFromGame,
      winCheck: Bases.AgnesSorel.winCheck,
      applyLiftToDragPile: Bases.AgnesSorel.applyLiftToDragPile,
      applyMoveToDragPile: Bases.AgnesSorel.applyMoveToDragPile,
      Board: Boards.Spider,
      AllCards: Bases.AgnesSorel.AllCards
    });

export {
  Game ,
}
/* Game Not a pure module */
