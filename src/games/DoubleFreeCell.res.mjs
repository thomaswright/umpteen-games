// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../Card.res.mjs";
import * as React from "react";
import * as FreeCell from "./FreeCell.res.mjs";
import * as GameBase from "../GameBase.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as JsxRuntime from "react/jsx-runtime";

var spaceToString = FreeCell.FreeCellRules.spaceToString;

function DoubleFreeCell$GameRules$Board(props) {
  var setRef = props.setRef;
  return JsxRuntime.jsxs(React.Fragment, {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("div", {
                                      children: [
                                          [],
                                          [],
                                          [],
                                          []
                                        ].map(function (param, i) {
                                            return JsxRuntime.jsx("div", {
                                                        ref: Caml_option.some(setRef({
                                                                  TAG: "Free",
                                                                  _0: i
                                                                })),
                                                        className: "   bg-black opacity-20  rounded w-14 h-20"
                                                      }, spaceToString({
                                                            TAG: "Free",
                                                            _0: i
                                                          }));
                                          }),
                                      className: "flex flex-row gap-3"
                                    }),
                                JsxRuntime.jsx("div", {
                                      children: [
                                          [],
                                          [],
                                          [],
                                          []
                                        ].map(function (param, i) {
                                            return JsxRuntime.jsx("div", {
                                                        ref: Caml_option.some(setRef({
                                                                  TAG: "Free",
                                                                  _0: i + 4 | 0
                                                                })),
                                                        className: "   bg-black opacity-20  rounded w-14 h-20"
                                                      }, spaceToString({
                                                            TAG: "Free",
                                                            _0: i + 4 | 0
                                                          }));
                                          }),
                                      className: "flex flex-row gap-3"
                                    })
                              ],
                              className: "flex flex-col gap-3"
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("div", {
                                      children: [
                                          [],
                                          [],
                                          [],
                                          []
                                        ].map(function (param, i) {
                                            return JsxRuntime.jsx("div", {
                                                        ref: Caml_option.some(setRef({
                                                                  TAG: "Foundation",
                                                                  _0: i
                                                                })),
                                                        className: "   bg-white opacity-10  rounded w-14 h-20"
                                                      }, spaceToString({
                                                            TAG: "Free",
                                                            _0: i
                                                          }));
                                          }),
                                      className: "flex flex-row gap-3 ml-10"
                                    }),
                                JsxRuntime.jsx("div", {
                                      children: [
                                          [],
                                          [],
                                          [],
                                          []
                                        ].map(function (param, i) {
                                            return JsxRuntime.jsx("div", {
                                                        ref: Caml_option.some(setRef({
                                                                  TAG: "Foundation",
                                                                  _0: i + 4 | 0
                                                                })),
                                                        className: "   bg-white opacity-10  rounded w-14 h-20"
                                                      }, spaceToString({
                                                            TAG: "Free",
                                                            _0: i + 4 | 0
                                                          }));
                                          }),
                                      className: "flex flex-row gap-3 ml-10"
                                    })
                              ],
                              className: "flex flex-col gap-3"
                            })
                      ],
                      className: "flex flex-row"
                    }),
                JsxRuntime.jsx("div", {}),
                JsxRuntime.jsx("div", {
                      children: [
                          [],
                          [],
                          [],
                          [],
                          [],
                          [],
                          [],
                          [],
                          [],
                          []
                        ].map(function (param, i) {
                            return JsxRuntime.jsx("div", {
                                        ref: Caml_option.some(setRef({
                                                  TAG: "Pile",
                                                  _0: i
                                                })),
                                        className: " bg-black opacity-20  rounded w-14 h-20"
                                      }, spaceToString({
                                            TAG: "Pile",
                                            _0: i
                                          }));
                          }),
                      className: "flex flex-row gap-3 mt-5"
                    })
              ]
            });
}

var Board = {
  make: DoubleFreeCell$GameRules$Board
};

function DoubleFreeCell$GameRules$AllCards(props) {
  var onClick = props.onClick;
  var onMouseDown = props.onMouseDown;
  var setRef = props.setRef;
  return JsxRuntime.jsx(React.Fragment, {
              children: props.deck.map(function (card) {
                    return JsxRuntime.jsx(Card.Display.make, {
                                card: card,
                                id: spaceToString({
                                      TAG: "Card",
                                      _0: card.card
                                    }),
                                cardRef: setRef({
                                      TAG: "Card",
                                      _0: card.card
                                    }),
                                onMouseDown: onMouseDown,
                                onClick: onClick
                              }, spaceToString({
                                    TAG: "Card",
                                    _0: card.card
                                  }));
                  })
            });
}

var AllCards = {
  make: DoubleFreeCell$GameRules$AllCards
};

var GameRules_game_encode = FreeCell.FreeCellRules.game_encode;

var GameRules_game_decode = FreeCell.FreeCellRules.game_decode;

var GameRules_deck_encode = FreeCell.FreeCellRules.deck_encode;

var GameRules_deck_decode = FreeCell.FreeCellRules.deck_decode;

var GameRules_getSpace = FreeCell.FreeCellRules.getSpace;

var GameRules_initiateGame = FreeCell.FreeCellRules.initiateGame;

var GameRules_forEachSpace = FreeCell.FreeCellRules.forEachSpace;

var GameRules_removeDragFromGame = FreeCell.FreeCellRules.removeDragFromGame;

var GameRules_winCheck = FreeCell.FreeCellRules.winCheck;

var GameRules_applyLiftToDragPile = FreeCell.FreeCellRules.applyLiftToDragPile;

var GameRules_applyMoveToDragPile = FreeCell.FreeCellRules.applyMoveToDragPile;

var GameRules = {
  game_encode: GameRules_game_encode,
  game_decode: GameRules_game_decode,
  deck_encode: GameRules_deck_encode,
  deck_decode: GameRules_deck_decode,
  getSpace: GameRules_getSpace,
  spaceToString: spaceToString,
  initiateGame: GameRules_initiateGame,
  forEachSpace: GameRules_forEachSpace,
  removeDragFromGame: GameRules_removeDragFromGame,
  winCheck: GameRules_winCheck,
  applyLiftToDragPile: GameRules_applyLiftToDragPile,
  applyMoveToDragPile: GameRules_applyMoveToDragPile,
  Board: Board,
  AllCards: AllCards
};

var Game = GameBase.Create(GameRules);

export {
  GameRules ,
  Game ,
}
/* Game Not a pure module */
