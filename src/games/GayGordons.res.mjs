// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../Card.res.mjs";
import * as Bases from "./Bases.res.mjs";
import * as Boards from "./Boards.res.mjs";
import * as Common from "../Common.res.mjs";
import * as GameBase from "../GameBase.res.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";

function arePair(a, b) {
  var match = a.card.rank;
  switch (match) {
    case "RA" :
        return b.card.rank === "R10";
    case "R2" :
        return b.card.rank === "R9";
    case "R3" :
        return b.card.rank === "R8";
    case "R4" :
        return b.card.rank === "R7";
    case "R5" :
        return b.card.rank === "R6";
    case "R6" :
        return b.card.rank === "R5";
    case "R7" :
        return b.card.rank === "R4";
    case "R8" :
        return b.card.rank === "R3";
    case "R9" :
        return b.card.rank === "R2";
    case "R10" :
        return b.card.rank === "RA";
    case "RJ" :
        return b.card.rank === "RJ";
    case "RQ" :
        return b.card.rank === "RK";
    case "RK" :
        return b.card.rank === "RQ";
    
  }
}

function initiateGame() {
  var shuffledDeck = Core__Array.toShuffled(Card.getDeck(0, false));
  var deckToDeal = {
    contents: shuffledDeck
  };
  return [
          shuffledDeck,
          {
            tableau: [
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5),
              Common.ArrayAux.popN(deckToDeal, 5)
            ],
            foundations: [[]],
            stock: [],
            waste: [],
            free: [
              Common.ArrayAux.popN(deckToDeal, 1)[0],
              Common.ArrayAux.popN(deckToDeal, 1)[0]
            ]
          }
        ];
}

function freeBaseRules(i) {
  return {
          droppedUpon: (function (game, dragPile) {
              var noChildren = Core__Option.isNone(game.free[i]);
              if (noChildren && dragPile.length === 1) {
                return {
                        tableau: game.tableau,
                        foundations: game.foundations,
                        stock: game.stock,
                        waste: game.waste,
                        free: Common.ArrayAux.update(game.free, i, (function (param) {
                                return dragPile[0];
                              }))
                      };
              }
              
            }),
          autoProgress: "DoNothing",
          onClick: (function (param) {
              
            })
        };
}

function freeRules(card, i) {
  return {
          locationAdjustment: {
            x: 0,
            y: 0,
            z: 1
          },
          baseSpace: {
            TAG: "Free",
            _0: i
          },
          dragPile: (function () {
              return [card];
            }),
          autoProgress: (function () {
              return "DoNothing";
            }),
          droppedUpon: (function (_game, _dragPile) {
              
            }),
          onStateChange: (function (param) {
              
            }),
          onClick: (function (param) {
              
            })
        };
}

function tableauBaseRules(_game, _i) {
  return {
          droppedUpon: (function (_gameRemoved, _dragPile) {
              
            }),
          autoProgress: "Accept",
          onClick: (function (param) {
              
            })
        };
}

function tableauRules(_game, pile, card, i, j) {
  var isLast = j === (pile.length - 1 | 0);
  return {
          locationAdjustment: {
            x: 0,
            y: Math.imul(j, 20),
            z: j + 1 | 0
          },
          baseSpace: {
            TAG: "Tableau",
            _0: i
          },
          dragPile: (function () {
              var dragPile = pile.slice(j);
              if (dragPile.length === 1) {
                return dragPile;
              }
              
            }),
          autoProgress: (function () {
              return "DoNothing";
            }),
          droppedUpon: (function (game, dragPile) {
              var dragPileBase = dragPile[0];
              if (isLast && arePair(dragPileBase, card)) {
                return {
                        tableau: Common.ArrayAux.update(game.tableau, i, (function (stack) {
                                return stack.slice(0, stack.length - 1 | 0);
                              })),
                        foundations: Common.ArrayAux.update(game.foundations, 0, (function (a) {
                                return a.concat([
                                            card,
                                            dragPileBase
                                          ]);
                              })),
                        stock: game.stock,
                        waste: game.waste,
                        free: game.free
                      };
              }
              
            }),
          onStateChange: (function (element) {
              Card.showOrHide(card, element);
            }),
          onClick: (function (param) {
              
            })
        };
}

function foundationBaseRules(param) {
  return {
          droppedUpon: (function (_game, _dragPile) {
              
            }),
          autoProgress: "DoNothing",
          onClick: (function (param) {
              
            })
        };
}

function foundationRules(_game, _pile, card, i, j) {
  return {
          locationAdjustment: {
            x: 0,
            y: 0,
            z: j + 1 | 0
          },
          baseSpace: {
            TAG: "Foundation",
            _0: i
          },
          dragPile: (function () {
              
            }),
          autoProgress: (function () {
              return "DoNothing";
            }),
          droppedUpon: (function (_game, _dragPile) {
              
            }),
          onStateChange: (function (element) {
              Card.showOrHide(card, element);
            }),
          onClick: (function (param) {
              
            })
        };
}

var forEachSpace = Bases.GayGordons.makeForEachSpace(tableauBaseRules, tableauRules, foundationBaseRules, foundationRules, undefined, undefined, undefined, freeBaseRules, freeRules);

var Game = GameBase.Create({
      game_encode: Bases.GayGordons.game_encode,
      game_decode: Bases.GayGordons.game_decode,
      deck_encode: Bases.GayGordons.deck_encode,
      deck_decode: Bases.GayGordons.deck_decode,
      getSpace: Bases.GayGordons.getSpace,
      spaceToString: Bases.GayGordons.spaceToString,
      initiateGame: initiateGame,
      forEachSpace: forEachSpace,
      removeDragFromGame: Bases.GayGordons.removeDragFromGame,
      winCheck: Bases.GayGordons.winCheck,
      applyLiftToDragPile: Bases.GayGordons.applyLiftToDragPile,
      applyMoveToDragPile: Bases.GayGordons.applyMoveToDragPile,
      Board: Boards.FRT,
      AllCards: Bases.GayGordons.AllCards
    });

export {
  arePair ,
  Game ,
}
/* Game Not a pure module */
