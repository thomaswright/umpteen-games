// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Decco from "@rescript-labs/decco/src/Decco.res.mjs";
import * as React from "react";
import * as Common from "./Common.res.mjs";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as FreeCell from "./games/FreeCell.res.mjs";
import * as Js_array from "rescript/lib/es6/js_array.js";
import * as Klondike from "./games/Klondike.res.mjs";
import * as UpAndDown from "./games/UpAndDown.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function gameString(a) {
  return a;
}

function gameData_encode(value) {
  switch (value.TAG) {
    case "Klondike" :
        return [
                "Klondike",
                Klondike.Game.state_encode(value._0)
              ];
    case "FreeCell" :
        return [
                "FreeCell",
                FreeCell.Game.state_encode(value._0)
              ];
    case "UpAndDown" :
        return [
                "UpAndDown",
                UpAndDown.Game.state_encode(value._0)
              ];
    
  }
}

function gameData_decode(value) {
  var jsonArr = Js_json.classify(value);
  if (typeof jsonArr !== "object") {
    return Decco.error(undefined, "Not a variant", value);
  }
  if (jsonArr.TAG !== "JSONArray") {
    return Decco.error(undefined, "Not a variant", value);
  }
  var jsonArr$1 = jsonArr._0;
  if (jsonArr$1.length === 0) {
    return Decco.error(undefined, "Expected variant, found empty array", value);
  }
  var tagged = Js_array.map(Js_json.classify, jsonArr$1);
  var match = Belt_Array.getExn(tagged, 0);
  if (typeof match === "object" && match.TAG === "JSONString") {
    switch (match._0) {
      case "FreeCell" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0 = FreeCell.Game.state_decode(Belt_Array.getExn(jsonArr$1, 1));
          if (v0.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "FreeCell",
                      _0: v0._0
                    }
                  };
          }
          var e = v0._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
      case "Klondike" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0$1 = Klondike.Game.state_decode(Belt_Array.getExn(jsonArr$1, 1));
          if (v0$1.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "Klondike",
                      _0: v0$1._0
                    }
                  };
          }
          var e$1 = v0$1._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e$1.path,
                    message: e$1.message,
                    value: e$1.value
                  }
                };
      case "UpAndDown" :
          if (tagged.length !== 2) {
            return Decco.error(undefined, "Invalid number of arguments to variant constructor", value);
          }
          var v0$2 = UpAndDown.Game.state_decode(Belt_Array.getExn(jsonArr$1, 1));
          if (v0$2.TAG === "Ok") {
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "UpAndDown",
                      _0: v0$2._0
                    }
                  };
          }
          var e$2 = v0$2._0;
          return {
                  TAG: "Error",
                  _0: {
                    path: "[0]" + e$2.path,
                    message: e$2.message,
                    value: e$2.value
                  }
                };
      default:
        
    }
  }
  return Decco.error(undefined, "Invalid variant constructor", Belt_Array.getExn(jsonArr$1, 0));
}

function state_encode(value) {
  return Decco.arrayToJson(gameData_encode, value);
}

function state_decode(value) {
  return Decco.arrayFromJson(gameData_decode, value);
}

var state = {
  contents: []
};

function setState(f) {
  var newState = f(state.contents);
  state.contents = newState;
  localStorage.setItem("state", JSON.stringify(state_encode(newState)));
}

function GameBrowser(props) {
  var match = React.useState(function () {
        return "Klondike_";
      });
  var setSelectGameType = match[1];
  var selectGameType = match[0];
  React.useEffect((function () {
          Core__Option.mapOr(Caml_option.null_to_opt(localStorage.getItem("state")), undefined, (function (s) {
                  var d = state_decode(JSON.parse(s));
                  if (d.TAG === "Ok") {
                    state.contents = d._0;
                    return ;
                  }
                  
                }));
        }), []);
  var createNewGame_ = function () {
    switch (selectGameType) {
      case "Klondike_" :
          return {
                  TAG: "Klondike",
                  _0: Klondike.Game.createNewGame()
                };
      case "FreeCell_" :
          return {
                  TAG: "FreeCell",
                  _0: FreeCell.Game.createNewGame()
                };
      case "UpAndDown_" :
          return {
                  TAG: "UpAndDown",
                  _0: UpAndDown.Game.createNewGame()
                };
      
    }
  };
  var createNewGame = function () {
    state.contents = Belt_Array.concatMany([
          state.contents,
          [createNewGame_()]
        ]);
  };
  var getGameUtils = function () {
    var reversedIndex = Core__Array.findIndexOpt(state.contents.toReversed(), (function (x) {
            switch (x.TAG) {
              case "Klondike" :
                  switch (selectGameType) {
                    case "Klondike_" :
                        return true;
                    case "FreeCell_" :
                    case "UpAndDown_" :
                        return false;
                    
                  }
              case "FreeCell" :
                  switch (selectGameType) {
                    case "FreeCell_" :
                        return true;
                    case "Klondike_" :
                    case "UpAndDown_" :
                        return false;
                    
                  }
              case "UpAndDown" :
                  switch (selectGameType) {
                    case "Klondike_" :
                    case "FreeCell_" :
                        return false;
                    case "UpAndDown_" :
                        return true;
                    
                  }
              
            }
          }));
    if (reversedIndex === undefined) {
      return ;
    }
    var index = (state.contents.length - 1 | 0) - reversedIndex | 0;
    var get = function () {
      return state.contents[index];
    };
    var set = function (f) {
      state.contents = Common.ArrayAux.update(state.contents, index, f);
    };
    return [
            get,
            set
          ];
  };
  getGameUtils();
  var tmp;
  switch (selectGameType) {
    case "Klondike_" :
        tmp = JsxRuntime.jsx(Klondike.Game.make, {});
        break;
    case "FreeCell_" :
        tmp = JsxRuntime.jsx(FreeCell.Game.make, {});
        break;
    case "UpAndDown_" :
        tmp = JsxRuntime.jsx(UpAndDown.Game.make, {});
        break;
    
  }
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              children: "Card Games!",
                              className: "font-black text-xl mb-1"
                            }),
                        JsxRuntime.jsx("div", {
                              children: [
                                  "Klondike_",
                                  "FreeCell_",
                                  "UpAndDown_"
                                ].map(function (v) {
                                    var selected = v === selectGameType;
                                    return JsxRuntime.jsx("button", {
                                                children: v,
                                                className: [
                                                    selected ? "text-blue-700 underline" : "",
                                                    "font-medium"
                                                  ].join(" "),
                                                onClick: (function (param) {
                                                    setSelectGameType(function (param) {
                                                          return v;
                                                        });
                                                  })
                                              });
                                  }),
                              className: "flex flex-row gap-4"
                            }),
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsx("button", {
                                    children: "New Game",
                                    onClick: (function (param) {
                                        createNewGame();
                                      })
                                  })
                            })
                      ],
                      className: "px-5 pt-3 "
                    }),
                tmp
              ]
            });
}

var make = GameBrowser;

export {
  gameString ,
  gameData_encode ,
  gameData_decode ,
  state_encode ,
  state_decode ,
  state ,
  setState ,
  make ,
}
/* react Not a pure module */
