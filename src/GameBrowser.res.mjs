// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Decco from "@rescript-labs/decco/src/Decco.res.mjs";
import * as React from "react";
import * as Common from "./Common.res.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as FreeCell from "./games/FreeCell.res.mjs";
import * as Klondike from "./games/Klondike.res.mjs";
import * as UpAndDown from "./games/UpAndDown.res.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as JsxRuntime from "react/jsx-runtime";

function gameString(a) {
  return a;
}

function state_encode(value) {
  return Js_dict.fromArray([
              [
                "klondike",
                (function (extra) {
                      return Decco.arrayToJson(Klondike.Game.state_encode, extra);
                    })(value.klondike)
              ],
              [
                "freeCell",
                (function (extra) {
                      return Decco.arrayToJson(FreeCell.Game.state_encode, extra);
                    })(value.freeCell)
              ],
              [
                "upAndDown",
                (function (extra) {
                      return Decco.arrayToJson(UpAndDown.Game.state_encode, extra);
                    })(value.upAndDown)
              ]
            ]);
}

function state_decode(value) {
  var dict = Js_json.classify(value);
  if (typeof dict !== "object") {
    return Decco.error(undefined, "Not an object", value);
  }
  if (dict.TAG !== "JSONObject") {
    return Decco.error(undefined, "Not an object", value);
  }
  var dict$1 = dict._0;
  var extra = Belt_Option.getWithDefault(Js_dict.get(dict$1, "klondike"), null);
  var klondike = Decco.arrayFromJson(Klondike.Game.state_decode, extra);
  if (klondike.TAG === "Ok") {
    var extra$1 = Belt_Option.getWithDefault(Js_dict.get(dict$1, "freeCell"), null);
    var freeCell = Decco.arrayFromJson(FreeCell.Game.state_decode, extra$1);
    if (freeCell.TAG === "Ok") {
      var extra$2 = Belt_Option.getWithDefault(Js_dict.get(dict$1, "upAndDown"), null);
      var upAndDown = Decco.arrayFromJson(UpAndDown.Game.state_decode, extra$2);
      if (upAndDown.TAG === "Ok") {
        return {
                TAG: "Ok",
                _0: Decco.unsafeAddFieldToObject("klondike", klondike._0, Decco.unsafeAddFieldToObject("freeCell", freeCell._0, Decco.unsafeAddFieldToObject("upAndDown", upAndDown._0, {})))
              };
      }
      var e = upAndDown._0;
      return {
              TAG: "Error",
              _0: {
                path: ".upAndDown" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = freeCell._0;
    return {
            TAG: "Error",
            _0: {
              path: ".freeCell" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = klondike._0;
  return {
          TAG: "Error",
          _0: {
            path: ".klondike" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

var state = {
  contents: {
    klondike: [],
    freeCell: [],
    upAndDown: []
  }
};

function setState(f) {
  var newState = f(state.contents);
  state.contents = newState;
  localStorage.setItem("state", JSON.stringify(state_encode(newState)));
}

function useForceUpdate() {
  var match = React.useState(function () {
        return 0;
      });
  var setValue = match[1];
  return function () {
    setValue(function (value) {
          return value + 1 | 0;
        });
  };
}

function GameBrowser(props) {
  var match = React.useState(function () {
        return "Klondike";
      });
  var setSelectGameType = match[1];
  var selectGameType = match[0];
  var forceUpdate = useForceUpdate();
  React.useEffect((function () {
          var s = localStorage.getItem("state");
          if (s !== null) {
            var d = state_decode(JSON.parse(s));
            if (d.TAG === "Ok") {
              state.contents = d._0;
            }
            
          } else {
            setState(function (x) {
                  return x;
                });
          }
          forceUpdate();
        }), []);
  var createNewGame = function () {
    setState(function (state) {
          switch (selectGameType) {
            case "Klondike" :
                return {
                        klondike: [Klondike.Game.createNewGame()].concat(state.klondike),
                        freeCell: state.freeCell,
                        upAndDown: state.upAndDown
                      };
            case "FreeCell" :
                return {
                        klondike: state.klondike,
                        freeCell: [FreeCell.Game.createNewGame()].concat(state.freeCell),
                        upAndDown: state.upAndDown
                      };
            case "UpAndDown" :
                return {
                        klondike: state.klondike,
                        freeCell: state.freeCell,
                        upAndDown: [UpAndDown.Game.createNewGame()].concat(state.upAndDown)
                      };
            
          }
        });
    forceUpdate();
  };
  var tmp;
  switch (selectGameType) {
    case "Klondike" :
        tmp = state.contents.klondike.length === 0 ? null : JsxRuntime.jsx(Klondike.Game.make, {
                getState: (function () {
                    return state.contents.klondike[0];
                  }),
                setState: (function (f) {
                    setState(function (state) {
                          return {
                                  klondike: Common.ArrayAux.update(state.klondike, 0, f),
                                  freeCell: state.freeCell,
                                  upAndDown: state.upAndDown
                                };
                        });
                  })
              });
        break;
    case "FreeCell" :
        tmp = state.contents.freeCell.length === 0 ? null : JsxRuntime.jsx(FreeCell.Game.make, {
                getState: (function () {
                    return state.contents.freeCell[0];
                  }),
                setState: (function (f) {
                    setState(function (state) {
                          return {
                                  klondike: state.klondike,
                                  freeCell: Common.ArrayAux.update(state.freeCell, 0, f),
                                  upAndDown: state.upAndDown
                                };
                        });
                  })
              });
        break;
    case "UpAndDown" :
        tmp = state.contents.upAndDown.length === 0 ? null : JsxRuntime.jsx(UpAndDown.Game.make, {
                getState: (function () {
                    return state.contents.upAndDown[0];
                  }),
                setState: (function (f) {
                    setState(function (state) {
                          return {
                                  klondike: state.klondike,
                                  freeCell: state.freeCell,
                                  upAndDown: Common.ArrayAux.update(state.upAndDown, 0, f)
                                };
                        });
                  })
              });
        break;
    
  }
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              children: "Card Games!",
                              className: "font-black text-xl mb-1"
                            }),
                        JsxRuntime.jsx("div", {
                              children: [
                                  "Klondike",
                                  "FreeCell",
                                  "UpAndDown"
                                ].map(function (v) {
                                    var selected = v === selectGameType;
                                    return JsxRuntime.jsx("button", {
                                                children: v,
                                                className: [
                                                    selected ? "text-blue-700 underline" : "",
                                                    "font-medium"
                                                  ].join(" "),
                                                onClick: (function (param) {
                                                    setSelectGameType(function (param) {
                                                          return v;
                                                        });
                                                  })
                                              });
                                  }),
                              className: "flex flex-row gap-4"
                            }),
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsx("button", {
                                    children: "New Game",
                                    onClick: (function (param) {
                                        createNewGame();
                                      })
                                  })
                            })
                      ],
                      className: "px-5 pt-3 "
                    }),
                tmp
              ]
            });
}

var make = GameBrowser;

export {
  gameString ,
  state_encode ,
  state_decode ,
  state ,
  setState ,
  useForceUpdate ,
  make ,
}
/* react Not a pure module */
