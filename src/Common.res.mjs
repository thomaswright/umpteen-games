// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as OtherJs from "./other.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import UseLocalStorageJs from "./useLocalStorage.js";

function numInterval(prim0, prim1, prim2) {
  return OtherJs.numInterval(prim0, prim1, prim2);
}

function triggerConfetti(prim) {
  OtherJs.triggerConfetti();
}

function removeLast(a) {
  return a.toReversed().slice(1).toReversed();
}

function getLast(a) {
  return a.toReversed()[0];
}

function update(a, i, f) {
  return a.map(function (el, j) {
              if (j === i) {
                return f(el);
              } else {
                return el;
              }
            });
}

function updateLast(a, f) {
  return a.map(function (el, j) {
              if (j === (a.length - 1 | 0)) {
                return f(el);
              } else {
                return el;
              }
            });
}

function insertAfter(arr, match, $$new) {
  return Core__Array.reduce(arr, [], (function (acc, c) {
                if (Caml_obj.equal(c, match)) {
                  return acc.concat([c].concat($$new));
                } else {
                  return acc.concat([c]);
                }
              }));
}

function forEach2(a, f) {
  a.forEach(function (el1, i) {
        el1.forEach(function (el2, j) {
              f(el1, el2, i, j);
            });
      });
}

function sliceBefore(arr, pred) {
  var revIndex = arr.toReversed().findIndex(pred);
  return arr.slice(0, (arr.length - 1 | 0) - revIndex | 0);
}

function popN(deck, n) {
  var result = deck.contents.slice(0, n);
  deck.contents = deck.contents.slice(n);
  return result;
}

var ArrayAux = {
  removeLast: removeLast,
  getLast: getLast,
  update: update,
  updateLast: updateLast,
  insertAfter: insertAfter,
  forEach2: forEach2,
  sliceBefore: sliceBefore,
  popN: popN
};

function Common$UtilBoard(props) {
  var restartGame = props.restartGame;
  var createNewGame = props.createNewGame;
  var isWin = props.isWin;
  var undo = props.undo;
  React.useEffect((function () {
          if (isWin) {
            OtherJs.triggerConfetti();
          }
          
        }), [isWin]);
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("button", {
                      children: "Undo",
                      className: "bg-[var(--light)] text-[var(--green3)] rounded-lg px-4  tracking-wide",
                      onClick: (function (param) {
                          undo();
                        })
                    }),
                JsxRuntime.jsx("button", {
                      children: "Restart",
                      className: "bg-[var(--light)] text-[var(--green3)] rounded-lg px-4  tracking-wide",
                      onClick: (function (param) {
                          restartGame();
                        })
                    }),
                JsxRuntime.jsx("div", {
                      className: "w-36"
                    }),
                JsxRuntime.jsx("button", {
                      children: "New Game",
                      className: "bg-[var(--light)] text-[var(--green3)] rounded-lg px-4  tracking-wide",
                      onClick: (function (param) {
                          createNewGame();
                        })
                    }),
                JsxRuntime.jsx("div", {
                      children: isWin ? "You Won!" : null,
                      className: "px-4 font-black text-amber-400"
                    })
              ],
              className: "flex flex-row mb-5 mt-2 gap-2"
            });
}

var UtilBoard = {
  make: Common$UtilBoard
};

function useLocalStorage(prim0, prim1) {
  return UseLocalStorageJs(prim0, prim1);
}

var space = 24;

export {
  numInterval ,
  triggerConfetti ,
  space ,
  ArrayAux ,
  UtilBoard ,
  useLocalStorage ,
}
/* react Not a pure module */
